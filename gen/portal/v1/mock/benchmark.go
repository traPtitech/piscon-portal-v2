// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/traPtitech/piscon-portal-v2/gen/portal/v1 (interfaces: BenchmarkServiceClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/benchmark.go . BenchmarkServiceClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	portalv1 "github.com/traPtitech/piscon-portal-v2/gen/portal/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockBenchmarkServiceClient is a mock of BenchmarkServiceClient interface.
type MockBenchmarkServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBenchmarkServiceClientMockRecorder
	isgomock struct{}
}

// MockBenchmarkServiceClientMockRecorder is the mock recorder for MockBenchmarkServiceClient.
type MockBenchmarkServiceClientMockRecorder struct {
	mock *MockBenchmarkServiceClient
}

// NewMockBenchmarkServiceClient creates a new mock instance.
func NewMockBenchmarkServiceClient(ctrl *gomock.Controller) *MockBenchmarkServiceClient {
	mock := &MockBenchmarkServiceClient{ctrl: ctrl}
	mock.recorder = &MockBenchmarkServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBenchmarkServiceClient) EXPECT() *MockBenchmarkServiceClientMockRecorder {
	return m.recorder
}

// GetBenchmarkJob mocks base method.
func (m *MockBenchmarkServiceClient) GetBenchmarkJob(ctx context.Context, in *portalv1.GetBenchmarkJobRequest, opts ...grpc.CallOption) (*portalv1.GetBenchmarkJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBenchmarkJob", varargs...)
	ret0, _ := ret[0].(*portalv1.GetBenchmarkJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBenchmarkJob indicates an expected call of GetBenchmarkJob.
func (mr *MockBenchmarkServiceClientMockRecorder) GetBenchmarkJob(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBenchmarkJob", reflect.TypeOf((*MockBenchmarkServiceClient)(nil).GetBenchmarkJob), varargs...)
}

// PostJobFinished mocks base method.
func (m *MockBenchmarkServiceClient) PostJobFinished(ctx context.Context, in *portalv1.PostJobFinishedRequest, opts ...grpc.CallOption) (*portalv1.PostJobFinishedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostJobFinished", varargs...)
	ret0, _ := ret[0].(*portalv1.PostJobFinishedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostJobFinished indicates an expected call of PostJobFinished.
func (mr *MockBenchmarkServiceClientMockRecorder) PostJobFinished(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostJobFinished", reflect.TypeOf((*MockBenchmarkServiceClient)(nil).PostJobFinished), varargs...)
}

// SendBenchmarkProgress mocks base method.
func (m *MockBenchmarkServiceClient) SendBenchmarkProgress(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[portalv1.SendBenchmarkProgressRequest, portalv1.SendBenchmarkProgressResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendBenchmarkProgress", varargs...)
	ret0, _ := ret[0].(grpc.ClientStreamingClient[portalv1.SendBenchmarkProgressRequest, portalv1.SendBenchmarkProgressResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBenchmarkProgress indicates an expected call of SendBenchmarkProgress.
func (mr *MockBenchmarkServiceClientMockRecorder) SendBenchmarkProgress(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBenchmarkProgress", reflect.TypeOf((*MockBenchmarkServiceClient)(nil).SendBenchmarkProgress), varargs...)
}
