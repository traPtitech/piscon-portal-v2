// Code generated by MockGen. DO NOT EDIT.
// Source: google.golang.org/grpc (interfaces: ClientStreamingClient,ClientStreamingServer)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/progress_stream.go -typed google.golang.org/grpc ClientStreamingClient,ClientStreamingServer
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockClientStreamingClient is a mock of ClientStreamingClient interface.
type MockClientStreamingClient[Req any, Res any] struct {
	ctrl     *gomock.Controller
	recorder *MockClientStreamingClientMockRecorder[Req, Res]
	isgomock struct{}
}

// MockClientStreamingClientMockRecorder is the mock recorder for MockClientStreamingClient.
type MockClientStreamingClientMockRecorder[Req any, Res any] struct {
	mock *MockClientStreamingClient[Req, Res]
}

// NewMockClientStreamingClient creates a new mock instance.
func NewMockClientStreamingClient[Req any, Res any](ctrl *gomock.Controller) *MockClientStreamingClient[Req, Res] {
	mock := &MockClientStreamingClient[Req, Res]{ctrl: ctrl}
	mock.recorder = &MockClientStreamingClientMockRecorder[Req, Res]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientStreamingClient[Req, Res]) EXPECT() *MockClientStreamingClientMockRecorder[Req, Res] {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockClientStreamingClient[Req, Res]) CloseAndRecv() (*Res, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*Res)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockClientStreamingClientMockRecorder[Req, Res]) CloseAndRecv() *MockClientStreamingClientCloseAndRecvCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockClientStreamingClient[Req, Res])(nil).CloseAndRecv))
	return &MockClientStreamingClientCloseAndRecvCall[Req, Res]{Call: call}
}

// MockClientStreamingClientCloseAndRecvCall wrap *gomock.Call
type MockClientStreamingClientCloseAndRecvCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingClientCloseAndRecvCall[Req, Res]) Return(arg0 *Res, arg1 error) *MockClientStreamingClientCloseAndRecvCall[Req, Res] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingClientCloseAndRecvCall[Req, Res]) Do(f func() (*Res, error)) *MockClientStreamingClientCloseAndRecvCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingClientCloseAndRecvCall[Req, Res]) DoAndReturn(f func() (*Res, error)) *MockClientStreamingClientCloseAndRecvCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloseSend mocks base method.
func (m *MockClientStreamingClient[Req, Res]) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockClientStreamingClientMockRecorder[Req, Res]) CloseSend() *MockClientStreamingClientCloseSendCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockClientStreamingClient[Req, Res])(nil).CloseSend))
	return &MockClientStreamingClientCloseSendCall[Req, Res]{Call: call}
}

// MockClientStreamingClientCloseSendCall wrap *gomock.Call
type MockClientStreamingClientCloseSendCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingClientCloseSendCall[Req, Res]) Return(arg0 error) *MockClientStreamingClientCloseSendCall[Req, Res] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingClientCloseSendCall[Req, Res]) Do(f func() error) *MockClientStreamingClientCloseSendCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingClientCloseSendCall[Req, Res]) DoAndReturn(f func() error) *MockClientStreamingClientCloseSendCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Context mocks base method.
func (m *MockClientStreamingClient[Req, Res]) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockClientStreamingClientMockRecorder[Req, Res]) Context() *MockClientStreamingClientContextCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockClientStreamingClient[Req, Res])(nil).Context))
	return &MockClientStreamingClientContextCall[Req, Res]{Call: call}
}

// MockClientStreamingClientContextCall wrap *gomock.Call
type MockClientStreamingClientContextCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingClientContextCall[Req, Res]) Return(arg0 context.Context) *MockClientStreamingClientContextCall[Req, Res] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingClientContextCall[Req, Res]) Do(f func() context.Context) *MockClientStreamingClientContextCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingClientContextCall[Req, Res]) DoAndReturn(f func() context.Context) *MockClientStreamingClientContextCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Header mocks base method.
func (m *MockClientStreamingClient[Req, Res]) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockClientStreamingClientMockRecorder[Req, Res]) Header() *MockClientStreamingClientHeaderCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockClientStreamingClient[Req, Res])(nil).Header))
	return &MockClientStreamingClientHeaderCall[Req, Res]{Call: call}
}

// MockClientStreamingClientHeaderCall wrap *gomock.Call
type MockClientStreamingClientHeaderCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingClientHeaderCall[Req, Res]) Return(arg0 metadata.MD, arg1 error) *MockClientStreamingClientHeaderCall[Req, Res] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingClientHeaderCall[Req, Res]) Do(f func() (metadata.MD, error)) *MockClientStreamingClientHeaderCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingClientHeaderCall[Req, Res]) DoAndReturn(f func() (metadata.MD, error)) *MockClientStreamingClientHeaderCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecvMsg mocks base method.
func (m_2 *MockClientStreamingClient[Req, Res]) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockClientStreamingClientMockRecorder[Req, Res]) RecvMsg(m any) *MockClientStreamingClientRecvMsgCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockClientStreamingClient[Req, Res])(nil).RecvMsg), m)
	return &MockClientStreamingClientRecvMsgCall[Req, Res]{Call: call}
}

// MockClientStreamingClientRecvMsgCall wrap *gomock.Call
type MockClientStreamingClientRecvMsgCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingClientRecvMsgCall[Req, Res]) Return(arg0 error) *MockClientStreamingClientRecvMsgCall[Req, Res] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingClientRecvMsgCall[Req, Res]) Do(f func(any) error) *MockClientStreamingClientRecvMsgCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingClientRecvMsgCall[Req, Res]) DoAndReturn(f func(any) error) *MockClientStreamingClientRecvMsgCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockClientStreamingClient[Req, Res]) Send(arg0 *Req) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockClientStreamingClientMockRecorder[Req, Res]) Send(arg0 any) *MockClientStreamingClientSendCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClientStreamingClient[Req, Res])(nil).Send), arg0)
	return &MockClientStreamingClientSendCall[Req, Res]{Call: call}
}

// MockClientStreamingClientSendCall wrap *gomock.Call
type MockClientStreamingClientSendCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingClientSendCall[Req, Res]) Return(arg0 error) *MockClientStreamingClientSendCall[Req, Res] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingClientSendCall[Req, Res]) Do(f func(*Req) error) *MockClientStreamingClientSendCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingClientSendCall[Req, Res]) DoAndReturn(f func(*Req) error) *MockClientStreamingClientSendCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMsg mocks base method.
func (m_2 *MockClientStreamingClient[Req, Res]) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockClientStreamingClientMockRecorder[Req, Res]) SendMsg(m any) *MockClientStreamingClientSendMsgCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockClientStreamingClient[Req, Res])(nil).SendMsg), m)
	return &MockClientStreamingClientSendMsgCall[Req, Res]{Call: call}
}

// MockClientStreamingClientSendMsgCall wrap *gomock.Call
type MockClientStreamingClientSendMsgCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingClientSendMsgCall[Req, Res]) Return(arg0 error) *MockClientStreamingClientSendMsgCall[Req, Res] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingClientSendMsgCall[Req, Res]) Do(f func(any) error) *MockClientStreamingClientSendMsgCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingClientSendMsgCall[Req, Res]) DoAndReturn(f func(any) error) *MockClientStreamingClientSendMsgCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Trailer mocks base method.
func (m *MockClientStreamingClient[Req, Res]) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockClientStreamingClientMockRecorder[Req, Res]) Trailer() *MockClientStreamingClientTrailerCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockClientStreamingClient[Req, Res])(nil).Trailer))
	return &MockClientStreamingClientTrailerCall[Req, Res]{Call: call}
}

// MockClientStreamingClientTrailerCall wrap *gomock.Call
type MockClientStreamingClientTrailerCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingClientTrailerCall[Req, Res]) Return(arg0 metadata.MD) *MockClientStreamingClientTrailerCall[Req, Res] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingClientTrailerCall[Req, Res]) Do(f func() metadata.MD) *MockClientStreamingClientTrailerCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingClientTrailerCall[Req, Res]) DoAndReturn(f func() metadata.MD) *MockClientStreamingClientTrailerCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockClientStreamingServer is a mock of ClientStreamingServer interface.
type MockClientStreamingServer[Req any, Res any] struct {
	ctrl     *gomock.Controller
	recorder *MockClientStreamingServerMockRecorder[Req, Res]
	isgomock struct{}
}

// MockClientStreamingServerMockRecorder is the mock recorder for MockClientStreamingServer.
type MockClientStreamingServerMockRecorder[Req any, Res any] struct {
	mock *MockClientStreamingServer[Req, Res]
}

// NewMockClientStreamingServer creates a new mock instance.
func NewMockClientStreamingServer[Req any, Res any](ctrl *gomock.Controller) *MockClientStreamingServer[Req, Res] {
	mock := &MockClientStreamingServer[Req, Res]{ctrl: ctrl}
	mock.recorder = &MockClientStreamingServerMockRecorder[Req, Res]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientStreamingServer[Req, Res]) EXPECT() *MockClientStreamingServerMockRecorder[Req, Res] {
	return m.recorder
}

// Context mocks base method.
func (m *MockClientStreamingServer[Req, Res]) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockClientStreamingServerMockRecorder[Req, Res]) Context() *MockClientStreamingServerContextCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockClientStreamingServer[Req, Res])(nil).Context))
	return &MockClientStreamingServerContextCall[Req, Res]{Call: call}
}

// MockClientStreamingServerContextCall wrap *gomock.Call
type MockClientStreamingServerContextCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingServerContextCall[Req, Res]) Return(arg0 context.Context) *MockClientStreamingServerContextCall[Req, Res] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingServerContextCall[Req, Res]) Do(f func() context.Context) *MockClientStreamingServerContextCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingServerContextCall[Req, Res]) DoAndReturn(f func() context.Context) *MockClientStreamingServerContextCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Recv mocks base method.
func (m *MockClientStreamingServer[Req, Res]) Recv() (*Req, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Req)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockClientStreamingServerMockRecorder[Req, Res]) Recv() *MockClientStreamingServerRecvCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockClientStreamingServer[Req, Res])(nil).Recv))
	return &MockClientStreamingServerRecvCall[Req, Res]{Call: call}
}

// MockClientStreamingServerRecvCall wrap *gomock.Call
type MockClientStreamingServerRecvCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingServerRecvCall[Req, Res]) Return(arg0 *Req, arg1 error) *MockClientStreamingServerRecvCall[Req, Res] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingServerRecvCall[Req, Res]) Do(f func() (*Req, error)) *MockClientStreamingServerRecvCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingServerRecvCall[Req, Res]) DoAndReturn(f func() (*Req, error)) *MockClientStreamingServerRecvCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecvMsg mocks base method.
func (m_2 *MockClientStreamingServer[Req, Res]) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockClientStreamingServerMockRecorder[Req, Res]) RecvMsg(m any) *MockClientStreamingServerRecvMsgCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockClientStreamingServer[Req, Res])(nil).RecvMsg), m)
	return &MockClientStreamingServerRecvMsgCall[Req, Res]{Call: call}
}

// MockClientStreamingServerRecvMsgCall wrap *gomock.Call
type MockClientStreamingServerRecvMsgCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingServerRecvMsgCall[Req, Res]) Return(arg0 error) *MockClientStreamingServerRecvMsgCall[Req, Res] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingServerRecvMsgCall[Req, Res]) Do(f func(any) error) *MockClientStreamingServerRecvMsgCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingServerRecvMsgCall[Req, Res]) DoAndReturn(f func(any) error) *MockClientStreamingServerRecvMsgCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendAndClose mocks base method.
func (m *MockClientStreamingServer[Req, Res]) SendAndClose(arg0 *Res) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockClientStreamingServerMockRecorder[Req, Res]) SendAndClose(arg0 any) *MockClientStreamingServerSendAndCloseCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockClientStreamingServer[Req, Res])(nil).SendAndClose), arg0)
	return &MockClientStreamingServerSendAndCloseCall[Req, Res]{Call: call}
}

// MockClientStreamingServerSendAndCloseCall wrap *gomock.Call
type MockClientStreamingServerSendAndCloseCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingServerSendAndCloseCall[Req, Res]) Return(arg0 error) *MockClientStreamingServerSendAndCloseCall[Req, Res] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingServerSendAndCloseCall[Req, Res]) Do(f func(*Res) error) *MockClientStreamingServerSendAndCloseCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingServerSendAndCloseCall[Req, Res]) DoAndReturn(f func(*Res) error) *MockClientStreamingServerSendAndCloseCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendHeader mocks base method.
func (m *MockClientStreamingServer[Req, Res]) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockClientStreamingServerMockRecorder[Req, Res]) SendHeader(arg0 any) *MockClientStreamingServerSendHeaderCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockClientStreamingServer[Req, Res])(nil).SendHeader), arg0)
	return &MockClientStreamingServerSendHeaderCall[Req, Res]{Call: call}
}

// MockClientStreamingServerSendHeaderCall wrap *gomock.Call
type MockClientStreamingServerSendHeaderCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingServerSendHeaderCall[Req, Res]) Return(arg0 error) *MockClientStreamingServerSendHeaderCall[Req, Res] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingServerSendHeaderCall[Req, Res]) Do(f func(metadata.MD) error) *MockClientStreamingServerSendHeaderCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingServerSendHeaderCall[Req, Res]) DoAndReturn(f func(metadata.MD) error) *MockClientStreamingServerSendHeaderCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMsg mocks base method.
func (m_2 *MockClientStreamingServer[Req, Res]) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockClientStreamingServerMockRecorder[Req, Res]) SendMsg(m any) *MockClientStreamingServerSendMsgCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockClientStreamingServer[Req, Res])(nil).SendMsg), m)
	return &MockClientStreamingServerSendMsgCall[Req, Res]{Call: call}
}

// MockClientStreamingServerSendMsgCall wrap *gomock.Call
type MockClientStreamingServerSendMsgCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingServerSendMsgCall[Req, Res]) Return(arg0 error) *MockClientStreamingServerSendMsgCall[Req, Res] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingServerSendMsgCall[Req, Res]) Do(f func(any) error) *MockClientStreamingServerSendMsgCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingServerSendMsgCall[Req, Res]) DoAndReturn(f func(any) error) *MockClientStreamingServerSendMsgCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetHeader mocks base method.
func (m *MockClientStreamingServer[Req, Res]) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockClientStreamingServerMockRecorder[Req, Res]) SetHeader(arg0 any) *MockClientStreamingServerSetHeaderCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockClientStreamingServer[Req, Res])(nil).SetHeader), arg0)
	return &MockClientStreamingServerSetHeaderCall[Req, Res]{Call: call}
}

// MockClientStreamingServerSetHeaderCall wrap *gomock.Call
type MockClientStreamingServerSetHeaderCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingServerSetHeaderCall[Req, Res]) Return(arg0 error) *MockClientStreamingServerSetHeaderCall[Req, Res] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingServerSetHeaderCall[Req, Res]) Do(f func(metadata.MD) error) *MockClientStreamingServerSetHeaderCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingServerSetHeaderCall[Req, Res]) DoAndReturn(f func(metadata.MD) error) *MockClientStreamingServerSetHeaderCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetTrailer mocks base method.
func (m *MockClientStreamingServer[Req, Res]) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockClientStreamingServerMockRecorder[Req, Res]) SetTrailer(arg0 any) *MockClientStreamingServerSetTrailerCall[Req, Res] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockClientStreamingServer[Req, Res])(nil).SetTrailer), arg0)
	return &MockClientStreamingServerSetTrailerCall[Req, Res]{Call: call}
}

// MockClientStreamingServerSetTrailerCall wrap *gomock.Call
type MockClientStreamingServerSetTrailerCall[Req any, Res any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientStreamingServerSetTrailerCall[Req, Res]) Return() *MockClientStreamingServerSetTrailerCall[Req, Res] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientStreamingServerSetTrailerCall[Req, Res]) Do(f func(metadata.MD)) *MockClientStreamingServerSetTrailerCall[Req, Res] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientStreamingServerSetTrailerCall[Req, Res]) DoAndReturn(f func(metadata.MD)) *MockClientStreamingServerSetTrailerCall[Req, Res] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
