// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: portal/v1/benchmark.proto

package portalv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BenchmarkService_GetBenchmarkJob_FullMethodName     = "/portal.v1.BenchmarkService/GetBenchmarkJob"
	BenchmarkService_SendBenchmarkResult_FullMethodName = "/portal.v1.BenchmarkService/SendBenchmarkResult"
	BenchmarkService_PostJobFinished_FullMethodName     = "/portal.v1.BenchmarkService/PostJobFinished"
)

// BenchmarkServiceClient is the client API for BenchmarkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchmarkServiceClient interface {
	GetBenchmarkJob(ctx context.Context, in *GetBenchmarkJobRequest, opts ...grpc.CallOption) (*GetBenchmarkJobResponse, error)
	SendBenchmarkResult(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendBenchmarkResultRequest, SendBenchmarkResultResponse], error)
	PostJobFinished(ctx context.Context, in *PostJobFinishedRequest, opts ...grpc.CallOption) (*PostJobFinishedResponse, error)
}

type benchmarkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchmarkServiceClient(cc grpc.ClientConnInterface) BenchmarkServiceClient {
	return &benchmarkServiceClient{cc}
}

func (c *benchmarkServiceClient) GetBenchmarkJob(ctx context.Context, in *GetBenchmarkJobRequest, opts ...grpc.CallOption) (*GetBenchmarkJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBenchmarkJobResponse)
	err := c.cc.Invoke(ctx, BenchmarkService_GetBenchmarkJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkServiceClient) SendBenchmarkResult(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendBenchmarkResultRequest, SendBenchmarkResultResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BenchmarkService_ServiceDesc.Streams[0], BenchmarkService_SendBenchmarkResult_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendBenchmarkResultRequest, SendBenchmarkResultResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BenchmarkService_SendBenchmarkResultClient = grpc.ClientStreamingClient[SendBenchmarkResultRequest, SendBenchmarkResultResponse]

func (c *benchmarkServiceClient) PostJobFinished(ctx context.Context, in *PostJobFinishedRequest, opts ...grpc.CallOption) (*PostJobFinishedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostJobFinishedResponse)
	err := c.cc.Invoke(ctx, BenchmarkService_PostJobFinished_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchmarkServiceServer is the server API for BenchmarkService service.
// All implementations must embed UnimplementedBenchmarkServiceServer
// for forward compatibility.
type BenchmarkServiceServer interface {
	GetBenchmarkJob(context.Context, *GetBenchmarkJobRequest) (*GetBenchmarkJobResponse, error)
	SendBenchmarkResult(grpc.ClientStreamingServer[SendBenchmarkResultRequest, SendBenchmarkResultResponse]) error
	PostJobFinished(context.Context, *PostJobFinishedRequest) (*PostJobFinishedResponse, error)
	mustEmbedUnimplementedBenchmarkServiceServer()
}

// UnimplementedBenchmarkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBenchmarkServiceServer struct{}

func (UnimplementedBenchmarkServiceServer) GetBenchmarkJob(context.Context, *GetBenchmarkJobRequest) (*GetBenchmarkJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBenchmarkJob not implemented")
}
func (UnimplementedBenchmarkServiceServer) SendBenchmarkResult(grpc.ClientStreamingServer[SendBenchmarkResultRequest, SendBenchmarkResultResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendBenchmarkResult not implemented")
}
func (UnimplementedBenchmarkServiceServer) PostJobFinished(context.Context, *PostJobFinishedRequest) (*PostJobFinishedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostJobFinished not implemented")
}
func (UnimplementedBenchmarkServiceServer) mustEmbedUnimplementedBenchmarkServiceServer() {}
func (UnimplementedBenchmarkServiceServer) testEmbeddedByValue()                          {}

// UnsafeBenchmarkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchmarkServiceServer will
// result in compilation errors.
type UnsafeBenchmarkServiceServer interface {
	mustEmbedUnimplementedBenchmarkServiceServer()
}

func RegisterBenchmarkServiceServer(s grpc.ServiceRegistrar, srv BenchmarkServiceServer) {
	// If the following call pancis, it indicates UnimplementedBenchmarkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BenchmarkService_ServiceDesc, srv)
}

func _BenchmarkService_GetBenchmarkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBenchmarkJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).GetBenchmarkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenchmarkService_GetBenchmarkJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).GetBenchmarkJob(ctx, req.(*GetBenchmarkJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkService_SendBenchmarkResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BenchmarkServiceServer).SendBenchmarkResult(&grpc.GenericServerStream[SendBenchmarkResultRequest, SendBenchmarkResultResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BenchmarkService_SendBenchmarkResultServer = grpc.ClientStreamingServer[SendBenchmarkResultRequest, SendBenchmarkResultResponse]

func _BenchmarkService_PostJobFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostJobFinishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).PostJobFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenchmarkService_PostJobFinished_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).PostJobFinished(ctx, req.(*PostJobFinishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BenchmarkService_ServiceDesc is the grpc.ServiceDesc for BenchmarkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BenchmarkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portal.v1.BenchmarkService",
	HandlerType: (*BenchmarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBenchmarkJob",
			Handler:    _BenchmarkService_GetBenchmarkJob_Handler,
		},
		{
			MethodName: "PostJobFinished",
			Handler:    _BenchmarkService_PostJobFinished_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendBenchmarkResult",
			Handler:       _BenchmarkService_SendBenchmarkResult_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "portal/v1/benchmark.proto",
}
