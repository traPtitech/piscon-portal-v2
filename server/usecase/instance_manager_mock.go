// Code generated by MockGen. DO NOT EDIT.
// Source: ../domain/instance.go
//
// Generated by this command:
//
//	mockgen -destination=instance_manager_mock.go -package=usecase -source=../domain/instance.go
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/traPtitech/piscon-portal-v2/server/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockInstanceManager is a mock of InstanceManager interface.
type MockInstanceManager struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceManagerMockRecorder
	isgomock struct{}
}

// MockInstanceManagerMockRecorder is the mock recorder for MockInstanceManager.
type MockInstanceManagerMockRecorder struct {
	mock *MockInstanceManager
}

// NewMockInstanceManager creates a new mock instance.
func NewMockInstanceManager(ctrl *gomock.Controller) *MockInstanceManager {
	mock := &MockInstanceManager{ctrl: ctrl}
	mock.recorder = &MockInstanceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceManager) EXPECT() *MockInstanceManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInstanceManager) Create(ctx context.Context, name string, sshPubKeys []string) (domain.InfraInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, sshPubKeys)
	ret0, _ := ret[0].(domain.InfraInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInstanceManagerMockRecorder) Create(ctx, name, sshPubKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstanceManager)(nil).Create), ctx, name, sshPubKeys)
}

// Delete mocks base method.
func (m *MockInstanceManager) Delete(ctx context.Context, instance domain.InfraInstance) (domain.InfraInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, instance)
	ret0, _ := ret[0].(domain.InfraInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockInstanceManagerMockRecorder) Delete(ctx, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstanceManager)(nil).Delete), ctx, instance)
}

// Get mocks base method.
func (m *MockInstanceManager) Get(ctx context.Context, id string) (domain.InfraInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.InfraInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInstanceManagerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstanceManager)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockInstanceManager) GetAll(ctx context.Context) ([]domain.InfraInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.InfraInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockInstanceManagerMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockInstanceManager)(nil).GetAll), ctx)
}

// Start mocks base method.
func (m *MockInstanceManager) Start(ctx context.Context, instance domain.InfraInstance) (domain.InfraInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, instance)
	ret0, _ := ret[0].(domain.InfraInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockInstanceManagerMockRecorder) Start(ctx, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockInstanceManager)(nil).Start), ctx, instance)
}

// Stop mocks base method.
func (m *MockInstanceManager) Stop(ctx context.Context, instance domain.InfraInstance) (domain.InfraInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, instance)
	ret0, _ := ret[0].(domain.InfraInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockInstanceManagerMockRecorder) Stop(ctx, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInstanceManager)(nil).Stop), ctx, instance)
}
