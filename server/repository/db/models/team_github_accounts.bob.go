// Code generated by BobGen mysql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/dm"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// TeamGithubAccount is an object representing the database table.
type TeamGithubAccount struct {
	ID       string `db:"id,pk" `
	TeamID   string `db:"team_id" `
	GithubID string `db:"github_id" `

	R teamGithubAccountR `db:"-" `
}

// TeamGithubAccountSlice is an alias for a slice of pointers to TeamGithubAccount.
// This should almost always be used instead of []*TeamGithubAccount.
type TeamGithubAccountSlice []*TeamGithubAccount

// TeamGithubAccounts contains methods to work with the team_github_accounts table
var TeamGithubAccounts = mysql.NewTablex[*TeamGithubAccount, TeamGithubAccountSlice, *TeamGithubAccountSetter]("team_github_accounts", []string{"id"})

// TeamGithubAccountsQuery is a query on the team_github_accounts table
type TeamGithubAccountsQuery = *mysql.ViewQuery[*TeamGithubAccount, TeamGithubAccountSlice]

// teamGithubAccountR is where relationships are stored.
type teamGithubAccountR struct {
	Team *Team // team_github_accounts_ibfk_1
}

type teamGithubAccountColumnNames struct {
	ID       string
	TeamID   string
	GithubID string
}

var TeamGithubAccountColumns = buildTeamGithubAccountColumns("team_github_accounts")

type teamGithubAccountColumns struct {
	tableAlias string
	ID         mysql.Expression
	TeamID     mysql.Expression
	GithubID   mysql.Expression
}

func (c teamGithubAccountColumns) Alias() string {
	return c.tableAlias
}

func (teamGithubAccountColumns) AliasedAs(alias string) teamGithubAccountColumns {
	return buildTeamGithubAccountColumns(alias)
}

func buildTeamGithubAccountColumns(alias string) teamGithubAccountColumns {
	return teamGithubAccountColumns{
		tableAlias: alias,
		ID:         mysql.Quote(alias, "id"),
		TeamID:     mysql.Quote(alias, "team_id"),
		GithubID:   mysql.Quote(alias, "github_id"),
	}
}

type teamGithubAccountWhere[Q mysql.Filterable] struct {
	ID       mysql.WhereMod[Q, string]
	TeamID   mysql.WhereMod[Q, string]
	GithubID mysql.WhereMod[Q, string]
}

func (teamGithubAccountWhere[Q]) AliasedAs(alias string) teamGithubAccountWhere[Q] {
	return buildTeamGithubAccountWhere[Q](buildTeamGithubAccountColumns(alias))
}

func buildTeamGithubAccountWhere[Q mysql.Filterable](cols teamGithubAccountColumns) teamGithubAccountWhere[Q] {
	return teamGithubAccountWhere[Q]{
		ID:       mysql.Where[Q, string](cols.ID),
		TeamID:   mysql.Where[Q, string](cols.TeamID),
		GithubID: mysql.Where[Q, string](cols.GithubID),
	}
}

var TeamGithubAccountErrors = &teamGithubAccountErrors{
	ErrUniquePrimary: &UniqueConstraintError{
		schema:  "",
		table:   "team_github_accounts",
		columns: []string{"id"},
		s:       "PRIMARY",
	},
}

type teamGithubAccountErrors struct {
	ErrUniquePrimary *UniqueConstraintError
}

// TeamGithubAccountSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TeamGithubAccountSetter struct {
	ID       *string `db:"id,pk" `
	TeamID   *string `db:"team_id" `
	GithubID *string `db:"github_id" `
}

func (s TeamGithubAccountSetter) SetColumns() []string {
	vals := make([]string, 0, 3)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.TeamID != nil {
		vals = append(vals, "team_id")
	}

	if s.GithubID != nil {
		vals = append(vals, "github_id")
	}

	return vals
}

func (s TeamGithubAccountSetter) Overwrite(t *TeamGithubAccount) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.TeamID != nil {
		t.TeamID = *s.TeamID
	}
	if s.GithubID != nil {
		t.GithubID = *s.GithubID
	}
}

func (s *TeamGithubAccountSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return TeamGithubAccounts.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(
		bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.ID == nil {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.ID).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.TeamID == nil {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.TeamID).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.GithubID == nil {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.GithubID).WriteSQL(ctx, w, d, start)
		}))
}

func (s TeamGithubAccountSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions("team_github_accounts")...)
}

func (s TeamGithubAccountSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 3)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if s.TeamID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "team_id")...),
			mysql.Arg(s.TeamID),
		}})
	}

	if s.GithubID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "github_id")...),
			mysql.Arg(s.GithubID),
		}})
	}

	return exprs
}

// FindTeamGithubAccount retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTeamGithubAccount(ctx context.Context, exec bob.Executor, IDPK string, cols ...string) (*TeamGithubAccount, error) {
	if len(cols) == 0 {
		return TeamGithubAccounts.Query(
			SelectWhere.TeamGithubAccounts.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return TeamGithubAccounts.Query(
		SelectWhere.TeamGithubAccounts.ID.EQ(IDPK),
		sm.Columns(TeamGithubAccounts.Columns().Only(cols...)),
	).One(ctx, exec)
}

// TeamGithubAccountExists checks the presence of a single record by primary key
func TeamGithubAccountExists(ctx context.Context, exec bob.Executor, IDPK string) (bool, error) {
	return TeamGithubAccounts.Query(
		SelectWhere.TeamGithubAccounts.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after TeamGithubAccount is retrieved from the database
func (o *TeamGithubAccount) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = TeamGithubAccounts.AfterSelectHooks.RunHooks(ctx, exec, TeamGithubAccountSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = TeamGithubAccounts.AfterInsertHooks.RunHooks(ctx, exec, TeamGithubAccountSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = TeamGithubAccounts.AfterUpdateHooks.RunHooks(ctx, exec, TeamGithubAccountSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = TeamGithubAccounts.AfterDeleteHooks.RunHooks(ctx, exec, TeamGithubAccountSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the TeamGithubAccount
func (o *TeamGithubAccount) primaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

func (o *TeamGithubAccount) pkEQ() dialect.Expression {
	return mysql.Quote("team_github_accounts", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the TeamGithubAccount
func (o *TeamGithubAccount) Update(ctx context.Context, exec bob.Executor, s *TeamGithubAccountSetter) error {
	_, err := TeamGithubAccounts.Update(s.UpdateMod(), um.Where(o.pkEQ())).Exec(ctx, exec)
	if err != nil {
		return err
	}

	s.Overwrite(o)

	return nil
}

// Delete deletes a single TeamGithubAccount record with an executor
func (o *TeamGithubAccount) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := TeamGithubAccounts.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the TeamGithubAccount using the executor
func (o *TeamGithubAccount) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := TeamGithubAccounts.Query(
		SelectWhere.TeamGithubAccounts.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TeamGithubAccountSlice is retrieved from the database
func (o TeamGithubAccountSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = TeamGithubAccounts.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = TeamGithubAccounts.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = TeamGithubAccounts.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = TeamGithubAccounts.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TeamGithubAccountSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return mysql.Raw("NULL")
	}

	return mysql.Quote("team_github_accounts", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TeamGithubAccountSlice) copyMatchingRows(from ...*TeamGithubAccount) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TeamGithubAccountSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return TeamGithubAccounts.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *TeamGithubAccount:
				o.copyMatchingRows(retrieved)
			case []*TeamGithubAccount:
				o.copyMatchingRows(retrieved...)
			case TeamGithubAccountSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a TeamGithubAccount or a slice of TeamGithubAccount
				// then run the AfterUpdateHooks on the slice
				_, err = TeamGithubAccounts.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TeamGithubAccountSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return TeamGithubAccounts.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *TeamGithubAccount:
				o.copyMatchingRows(retrieved)
			case []*TeamGithubAccount:
				o.copyMatchingRows(retrieved...)
			case TeamGithubAccountSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a TeamGithubAccount or a slice of TeamGithubAccount
				// then run the AfterDeleteHooks on the slice
				_, err = TeamGithubAccounts.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TeamGithubAccountSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TeamGithubAccountSetter) error {
	_, err := TeamGithubAccounts.Update(vals.UpdateMod(), o.UpdateMod()).Exec(ctx, exec)

	for i := range o {
		vals.Overwrite(o[i])
	}

	return err
}

func (o TeamGithubAccountSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := TeamGithubAccounts.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TeamGithubAccountSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := TeamGithubAccounts.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type teamGithubAccountJoins[Q dialect.Joinable] struct {
	typ  string
	Team modAs[Q, teamColumns]
}

func (j teamGithubAccountJoins[Q]) aliasedAs(alias string) teamGithubAccountJoins[Q] {
	return buildTeamGithubAccountJoins[Q](buildTeamGithubAccountColumns(alias), j.typ)
}

func buildTeamGithubAccountJoins[Q dialect.Joinable](cols teamGithubAccountColumns, typ string) teamGithubAccountJoins[Q] {
	return teamGithubAccountJoins[Q]{
		typ: typ,
		Team: modAs[Q, teamColumns]{
			c: TeamColumns,
			f: func(to teamColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Teams.Name().As(to.Alias())).On(
						to.ID.EQ(cols.TeamID),
					))
				}

				return mods
			},
		},
	}
}

// Team starts a query for related objects on teams
func (o *TeamGithubAccount) Team(mods ...bob.Mod[*dialect.SelectQuery]) TeamsQuery {
	return Teams.Query(append(mods,
		sm.Where(TeamColumns.ID.EQ(mysql.Arg(o.TeamID))),
	)...)
}

func (os TeamGithubAccountSlice) Team(mods ...bob.Mod[*dialect.SelectQuery]) TeamsQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = mysql.ArgGroup(o.TeamID)
	}
	PKArgExpr := mysql.Group(PKArgSlice...)

	return Teams.Query(append(mods,
		sm.Where(mysql.Group(TeamColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

func (o *TeamGithubAccount) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Team":
		rel, ok := retrieved.(*Team)
		if !ok {
			return fmt.Errorf("teamGithubAccount cannot load %T as %q", retrieved, name)
		}

		o.R.Team = rel

		if rel != nil {
			rel.R.TeamGithubAccounts = TeamGithubAccountSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("teamGithubAccount has no relationship %q", name)
	}
}

type teamGithubAccountPreloader struct {
	Team func(...mysql.PreloadOption) mysql.Preloader
}

func buildTeamGithubAccountPreloader() teamGithubAccountPreloader {
	return teamGithubAccountPreloader{
		Team: func(opts ...mysql.PreloadOption) mysql.Preloader {
			return mysql.Preload[*Team, TeamSlice](orm.Relationship{
				Name: "Team",
				Sides: []orm.RelSide{
					{
						From: TableNames.TeamGithubAccounts,
						To:   TableNames.Teams,
						FromColumns: []string{
							ColumnNames.TeamGithubAccounts.TeamID,
						},
						ToColumns: []string{
							ColumnNames.Teams.ID,
						},
					},
				},
			}, Teams.Columns().Names(), opts...)
		},
	}
}

type teamGithubAccountThenLoader[Q orm.Loadable] struct {
	Team func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildTeamGithubAccountThenLoader[Q orm.Loadable]() teamGithubAccountThenLoader[Q] {
	type TeamLoadInterface interface {
		LoadTeam(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return teamGithubAccountThenLoader[Q]{
		Team: thenLoadBuilder[Q](
			"Team",
			func(ctx context.Context, exec bob.Executor, retrieved TeamLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadTeam(ctx, exec, mods...)
			},
		),
	}
}

// LoadTeam loads the teamGithubAccount's Team into the .R struct
func (o *TeamGithubAccount) LoadTeam(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Team = nil

	related, err := o.Team(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.TeamGithubAccounts = TeamGithubAccountSlice{o}

	o.R.Team = related
	return nil
}

// LoadTeam loads the teamGithubAccount's Team into the .R struct
func (os TeamGithubAccountSlice) LoadTeam(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	teams, err := os.Team(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range teams {
			if o.TeamID != rel.ID {
				continue
			}

			rel.R.TeamGithubAccounts = append(rel.R.TeamGithubAccounts, o)

			o.R.Team = rel
			break
		}
	}

	return nil
}

func attachTeamGithubAccountTeam0(ctx context.Context, exec bob.Executor, count int, teamGithubAccount0 *TeamGithubAccount, team1 *Team) (*TeamGithubAccount, error) {
	setter := &TeamGithubAccountSetter{
		TeamID: &team1.ID,
	}

	err := teamGithubAccount0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTeamGithubAccountTeam0: %w", err)
	}

	return teamGithubAccount0, nil
}

func (teamGithubAccount0 *TeamGithubAccount) InsertTeam(ctx context.Context, exec bob.Executor, related *TeamSetter) error {
	team1, err := Teams.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTeamGithubAccountTeam0(ctx, exec, 1, teamGithubAccount0, team1)
	if err != nil {
		return err
	}

	teamGithubAccount0.R.Team = team1

	team1.R.TeamGithubAccounts = append(team1.R.TeamGithubAccounts, teamGithubAccount0)

	return nil
}

func (teamGithubAccount0 *TeamGithubAccount) AttachTeam(ctx context.Context, exec bob.Executor, team1 *Team) error {
	var err error

	_, err = attachTeamGithubAccountTeam0(ctx, exec, 1, teamGithubAccount0, team1)
	if err != nil {
		return err
	}

	teamGithubAccount0.R.Team = team1

	team1.R.TeamGithubAccounts = append(team1.R.TeamGithubAccounts, teamGithubAccount0)

	return nil
}
