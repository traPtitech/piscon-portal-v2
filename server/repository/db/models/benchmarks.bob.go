// Code generated by BobGen mysql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/dm"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	enums "github.com/traPtitech/piscon-portal-v2/server/repository/db/enums"
)

// Benchmark is an object representing the database table.
type Benchmark struct {
	ID           string                           `db:"id,pk" `
	InstanceID   string                           `db:"instance_id" `
	TeamID       string                           `db:"team_id" `
	UserID       string                           `db:"user_id" `
	Status       enums.BenchmarksStatus           `db:"status" `
	CreatedAt    time.Time                        `db:"created_at" `
	StartedAt    sql.Null[time.Time]              `db:"started_at" `
	FinishedAt   sql.Null[time.Time]              `db:"finished_at" `
	Score        int64                            `db:"score" `
	Result       sql.Null[enums.BenchmarksResult] `db:"result" `
	ErrorMessage sql.Null[string]                 `db:"error_message" `

	R benchmarkR `db:"-" `
}

// BenchmarkSlice is an alias for a slice of pointers to Benchmark.
// This should almost always be used instead of []*Benchmark.
type BenchmarkSlice []*Benchmark

// Benchmarks contains methods to work with the benchmarks table
var Benchmarks = mysql.NewTablex[*Benchmark, BenchmarkSlice, *BenchmarkSetter]("benchmarks", buildBenchmarkColumns("benchmarks"), []string{"id"})

// BenchmarksQuery is a query on the benchmarks table
type BenchmarksQuery = *mysql.ViewQuery[*Benchmark, BenchmarkSlice]

// benchmarkR is where relationships are stored.
type benchmarkR struct {
	BenchmarkLog *BenchmarkLog // benchmark_logs_ibfk_1
	Instance     *Instance     // benchmarks_ibfk_1
}

func buildBenchmarkColumns(alias string) benchmarkColumns {
	return benchmarkColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "instance_id", "team_id", "user_id", "status", "created_at", "started_at", "finished_at", "score", "result", "error_message",
		).WithParent("benchmarks"),
		tableAlias:   alias,
		ID:           mysql.Quote(alias, "id"),
		InstanceID:   mysql.Quote(alias, "instance_id"),
		TeamID:       mysql.Quote(alias, "team_id"),
		UserID:       mysql.Quote(alias, "user_id"),
		Status:       mysql.Quote(alias, "status"),
		CreatedAt:    mysql.Quote(alias, "created_at"),
		StartedAt:    mysql.Quote(alias, "started_at"),
		FinishedAt:   mysql.Quote(alias, "finished_at"),
		Score:        mysql.Quote(alias, "score"),
		Result:       mysql.Quote(alias, "result"),
		ErrorMessage: mysql.Quote(alias, "error_message"),
	}
}

type benchmarkColumns struct {
	expr.ColumnsExpr
	tableAlias   string
	ID           mysql.Expression
	InstanceID   mysql.Expression
	TeamID       mysql.Expression
	UserID       mysql.Expression
	Status       mysql.Expression
	CreatedAt    mysql.Expression
	StartedAt    mysql.Expression
	FinishedAt   mysql.Expression
	Score        mysql.Expression
	Result       mysql.Expression
	ErrorMessage mysql.Expression
}

func (c benchmarkColumns) Alias() string {
	return c.tableAlias
}

func (benchmarkColumns) AliasedAs(alias string) benchmarkColumns {
	return buildBenchmarkColumns(alias)
}

// BenchmarkSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type BenchmarkSetter struct {
	ID           *string                           `db:"id,pk" `
	InstanceID   *string                           `db:"instance_id" `
	TeamID       *string                           `db:"team_id" `
	UserID       *string                           `db:"user_id" `
	Status       *enums.BenchmarksStatus           `db:"status" `
	CreatedAt    *time.Time                        `db:"created_at" `
	StartedAt    *sql.Null[time.Time]              `db:"started_at" `
	FinishedAt   *sql.Null[time.Time]              `db:"finished_at" `
	Score        *int64                            `db:"score" `
	Result       *sql.Null[enums.BenchmarksResult] `db:"result" `
	ErrorMessage *sql.Null[string]                 `db:"error_message" `
}

func (s BenchmarkSetter) SetColumns() []string {
	vals := make([]string, 0, 11)
	if s.ID != nil {
		vals = append(vals, "id")
	}
	if s.InstanceID != nil {
		vals = append(vals, "instance_id")
	}
	if s.TeamID != nil {
		vals = append(vals, "team_id")
	}
	if s.UserID != nil {
		vals = append(vals, "user_id")
	}
	if s.Status != nil {
		vals = append(vals, "status")
	}
	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}
	if s.StartedAt != nil {
		vals = append(vals, "started_at")
	}
	if s.FinishedAt != nil {
		vals = append(vals, "finished_at")
	}
	if s.Score != nil {
		vals = append(vals, "score")
	}
	if s.Result != nil {
		vals = append(vals, "result")
	}
	if s.ErrorMessage != nil {
		vals = append(vals, "error_message")
	}
	return vals
}

func (s BenchmarkSetter) Overwrite(t *Benchmark) {
	if s.ID != nil {
		t.ID = func() string {
			if s.ID == nil {
				return *new(string)
			}
			return *s.ID
		}()
	}
	if s.InstanceID != nil {
		t.InstanceID = func() string {
			if s.InstanceID == nil {
				return *new(string)
			}
			return *s.InstanceID
		}()
	}
	if s.TeamID != nil {
		t.TeamID = func() string {
			if s.TeamID == nil {
				return *new(string)
			}
			return *s.TeamID
		}()
	}
	if s.UserID != nil {
		t.UserID = func() string {
			if s.UserID == nil {
				return *new(string)
			}
			return *s.UserID
		}()
	}
	if s.Status != nil {
		t.Status = func() enums.BenchmarksStatus {
			if s.Status == nil {
				return *new(enums.BenchmarksStatus)
			}
			return *s.Status
		}()
	}
	if s.CreatedAt != nil {
		t.CreatedAt = func() time.Time {
			if s.CreatedAt == nil {
				return *new(time.Time)
			}
			return *s.CreatedAt
		}()
	}
	if s.StartedAt != nil {
		t.StartedAt = func() sql.Null[time.Time] {
			if s.StartedAt == nil {
				return *new(sql.Null[time.Time])
			}
			v := s.StartedAt
			return *v
		}()
	}
	if s.FinishedAt != nil {
		t.FinishedAt = func() sql.Null[time.Time] {
			if s.FinishedAt == nil {
				return *new(sql.Null[time.Time])
			}
			v := s.FinishedAt
			return *v
		}()
	}
	if s.Score != nil {
		t.Score = func() int64 {
			if s.Score == nil {
				return *new(int64)
			}
			return *s.Score
		}()
	}
	if s.Result != nil {
		t.Result = func() sql.Null[enums.BenchmarksResult] {
			if s.Result == nil {
				return *new(sql.Null[enums.BenchmarksResult])
			}
			v := s.Result
			return *v
		}()
	}
	if s.ErrorMessage != nil {
		t.ErrorMessage = func() sql.Null[string] {
			if s.ErrorMessage == nil {
				return *new(sql.Null[string])
			}
			v := s.ErrorMessage
			return *v
		}()
	}
}

func (s *BenchmarkSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Benchmarks.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(
		bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.ID != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() string {
				if s.ID == nil {
					return *new(string)
				}
				return *s.ID
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.InstanceID != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() string {
				if s.InstanceID == nil {
					return *new(string)
				}
				return *s.InstanceID
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.TeamID != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() string {
				if s.TeamID == nil {
					return *new(string)
				}
				return *s.TeamID
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.UserID != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() string {
				if s.UserID == nil {
					return *new(string)
				}
				return *s.UserID
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.Status != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() enums.BenchmarksStatus {
				if s.Status == nil {
					return *new(enums.BenchmarksStatus)
				}
				return *s.Status
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.CreatedAt != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() time.Time {
				if s.CreatedAt == nil {
					return *new(time.Time)
				}
				return *s.CreatedAt
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.StartedAt != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() sql.Null[time.Time] {
				if s.StartedAt == nil {
					return *new(sql.Null[time.Time])
				}
				v := s.StartedAt
				return *v
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.FinishedAt != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() sql.Null[time.Time] {
				if s.FinishedAt == nil {
					return *new(sql.Null[time.Time])
				}
				v := s.FinishedAt
				return *v
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.Score != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() int64 {
				if s.Score == nil {
					return *new(int64)
				}
				return *s.Score
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.Result != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() sql.Null[enums.BenchmarksResult] {
				if s.Result == nil {
					return *new(sql.Null[enums.BenchmarksResult])
				}
				v := s.Result
				return *v
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.ErrorMessage != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() sql.Null[string] {
				if s.ErrorMessage == nil {
					return *new(sql.Null[string])
				}
				v := s.ErrorMessage
				return *v
			}()).WriteSQL(ctx, w, d, start)
		}))
}

func (s BenchmarkSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions("benchmarks")...)
}

func (s BenchmarkSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 11)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if s.InstanceID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "instance_id")...),
			mysql.Arg(s.InstanceID),
		}})
	}

	if s.TeamID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "team_id")...),
			mysql.Arg(s.TeamID),
		}})
	}

	if s.UserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "user_id")...),
			mysql.Arg(s.UserID),
		}})
	}

	if s.Status != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "status")...),
			mysql.Arg(s.Status),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "created_at")...),
			mysql.Arg(s.CreatedAt),
		}})
	}

	if s.StartedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "started_at")...),
			mysql.Arg(s.StartedAt),
		}})
	}

	if s.FinishedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "finished_at")...),
			mysql.Arg(s.FinishedAt),
		}})
	}

	if s.Score != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "score")...),
			mysql.Arg(s.Score),
		}})
	}

	if s.Result != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "result")...),
			mysql.Arg(s.Result),
		}})
	}

	if s.ErrorMessage != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "error_message")...),
			mysql.Arg(s.ErrorMessage),
		}})
	}

	return exprs
}

// FindBenchmark retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindBenchmark(ctx context.Context, exec bob.Executor, IDPK string, cols ...string) (*Benchmark, error) {
	if len(cols) == 0 {
		return Benchmarks.Query(
			sm.Where(Benchmarks.Columns.ID.EQ(mysql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return Benchmarks.Query(
		sm.Where(Benchmarks.Columns.ID.EQ(mysql.Arg(IDPK))),
		sm.Columns(Benchmarks.Columns.Only(cols...)),
	).One(ctx, exec)
}

// BenchmarkExists checks the presence of a single record by primary key
func BenchmarkExists(ctx context.Context, exec bob.Executor, IDPK string) (bool, error) {
	return Benchmarks.Query(
		sm.Where(Benchmarks.Columns.ID.EQ(mysql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Benchmark is retrieved from the database
func (o *Benchmark) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Benchmarks.AfterSelectHooks.RunHooks(ctx, exec, BenchmarkSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Benchmarks.AfterInsertHooks.RunHooks(ctx, exec, BenchmarkSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Benchmarks.AfterUpdateHooks.RunHooks(ctx, exec, BenchmarkSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Benchmarks.AfterDeleteHooks.RunHooks(ctx, exec, BenchmarkSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Benchmark
func (o *Benchmark) primaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

func (o *Benchmark) pkEQ() dialect.Expression {
	return mysql.Quote("benchmarks", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Benchmark
func (o *Benchmark) Update(ctx context.Context, exec bob.Executor, s *BenchmarkSetter) error {
	_, err := Benchmarks.Update(s.UpdateMod(), um.Where(o.pkEQ())).Exec(ctx, exec)
	if err != nil {
		return err
	}

	s.Overwrite(o)

	return nil
}

// Delete deletes a single Benchmark record with an executor
func (o *Benchmark) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Benchmarks.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Benchmark using the executor
func (o *Benchmark) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Benchmarks.Query(
		sm.Where(Benchmarks.Columns.ID.EQ(mysql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after BenchmarkSlice is retrieved from the database
func (o BenchmarkSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Benchmarks.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Benchmarks.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Benchmarks.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Benchmarks.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o BenchmarkSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return mysql.Raw("NULL")
	}

	return mysql.Quote("benchmarks", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o BenchmarkSlice) copyMatchingRows(from ...*Benchmark) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o BenchmarkSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Benchmarks.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Benchmark:
				o.copyMatchingRows(retrieved)
			case []*Benchmark:
				o.copyMatchingRows(retrieved...)
			case BenchmarkSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Benchmark or a slice of Benchmark
				// then run the AfterUpdateHooks on the slice
				_, err = Benchmarks.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o BenchmarkSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Benchmarks.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Benchmark:
				o.copyMatchingRows(retrieved)
			case []*Benchmark:
				o.copyMatchingRows(retrieved...)
			case BenchmarkSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Benchmark or a slice of Benchmark
				// then run the AfterDeleteHooks on the slice
				_, err = Benchmarks.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o BenchmarkSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals BenchmarkSetter) error {
	_, err := Benchmarks.Update(vals.UpdateMod(), o.UpdateMod()).Exec(ctx, exec)

	for i := range o {
		vals.Overwrite(o[i])
	}

	return err
}

func (o BenchmarkSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Benchmarks.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o BenchmarkSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Benchmarks.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// BenchmarkLog starts a query for related objects on benchmark_logs
func (o *Benchmark) BenchmarkLog(mods ...bob.Mod[*dialect.SelectQuery]) BenchmarkLogsQuery {
	return BenchmarkLogs.Query(append(mods,
		sm.Where(BenchmarkLogs.Columns.BenchmarkID.EQ(mysql.Arg(o.ID))),
	)...)
}

func (os BenchmarkSlice) BenchmarkLog(mods ...bob.Mod[*dialect.SelectQuery]) BenchmarkLogsQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = mysql.ArgGroup(o.ID)
	}
	PKArgExpr := mysql.Group(PKArgSlice...)

	return BenchmarkLogs.Query(append(mods,
		sm.Where(mysql.Group(BenchmarkLogs.Columns.BenchmarkID).OP("IN", PKArgExpr)),
	)...)
}

// Instance starts a query for related objects on instances
func (o *Benchmark) Instance(mods ...bob.Mod[*dialect.SelectQuery]) InstancesQuery {
	return Instances.Query(append(mods,
		sm.Where(Instances.Columns.ID.EQ(mysql.Arg(o.InstanceID))),
	)...)
}

func (os BenchmarkSlice) Instance(mods ...bob.Mod[*dialect.SelectQuery]) InstancesQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = mysql.ArgGroup(o.InstanceID)
	}
	PKArgExpr := mysql.Group(PKArgSlice...)

	return Instances.Query(append(mods,
		sm.Where(mysql.Group(Instances.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

func insertBenchmarkBenchmarkLog0(ctx context.Context, exec bob.Executor, benchmarkLog1 *BenchmarkLogSetter, benchmark0 *Benchmark) (*BenchmarkLog, error) {
	benchmarkLog1.BenchmarkID = func() *string { return &benchmark0.ID }()

	ret, err := BenchmarkLogs.Insert(benchmarkLog1).One(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertBenchmarkBenchmarkLog0: %w", err)
	}

	return ret, nil
}

func attachBenchmarkBenchmarkLog0(ctx context.Context, exec bob.Executor, count int, benchmarkLog1 *BenchmarkLog, benchmark0 *Benchmark) (*BenchmarkLog, error) {
	setter := &BenchmarkLogSetter{
		BenchmarkID: func() *string { return &benchmark0.ID }(),
	}

	err := benchmarkLog1.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachBenchmarkBenchmarkLog0: %w", err)
	}

	return benchmarkLog1, nil
}

func (benchmark0 *Benchmark) InsertBenchmarkLog(ctx context.Context, exec bob.Executor, related *BenchmarkLogSetter) error {
	var err error

	benchmarkLog1, err := insertBenchmarkBenchmarkLog0(ctx, exec, related, benchmark0)
	if err != nil {
		return err
	}

	benchmark0.R.BenchmarkLog = benchmarkLog1

	benchmarkLog1.R.Benchmark = benchmark0

	return nil
}

func (benchmark0 *Benchmark) AttachBenchmarkLog(ctx context.Context, exec bob.Executor, benchmarkLog1 *BenchmarkLog) error {
	var err error

	_, err = attachBenchmarkBenchmarkLog0(ctx, exec, 1, benchmarkLog1, benchmark0)
	if err != nil {
		return err
	}

	benchmark0.R.BenchmarkLog = benchmarkLog1

	benchmarkLog1.R.Benchmark = benchmark0

	return nil
}

func attachBenchmarkInstance0(ctx context.Context, exec bob.Executor, count int, benchmark0 *Benchmark, instance1 *Instance) (*Benchmark, error) {
	setter := &BenchmarkSetter{
		InstanceID: func() *string { return &instance1.ID }(),
	}

	err := benchmark0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachBenchmarkInstance0: %w", err)
	}

	return benchmark0, nil
}

func (benchmark0 *Benchmark) InsertInstance(ctx context.Context, exec bob.Executor, related *InstanceSetter) error {
	var err error

	instance1, err := Instances.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachBenchmarkInstance0(ctx, exec, 1, benchmark0, instance1)
	if err != nil {
		return err
	}

	benchmark0.R.Instance = instance1

	instance1.R.Benchmarks = append(instance1.R.Benchmarks, benchmark0)

	return nil
}

func (benchmark0 *Benchmark) AttachInstance(ctx context.Context, exec bob.Executor, instance1 *Instance) error {
	var err error

	_, err = attachBenchmarkInstance0(ctx, exec, 1, benchmark0, instance1)
	if err != nil {
		return err
	}

	benchmark0.R.Instance = instance1

	instance1.R.Benchmarks = append(instance1.R.Benchmarks, benchmark0)

	return nil
}

type benchmarkWhere[Q mysql.Filterable] struct {
	ID           mysql.WhereMod[Q, string]
	InstanceID   mysql.WhereMod[Q, string]
	TeamID       mysql.WhereMod[Q, string]
	UserID       mysql.WhereMod[Q, string]
	Status       mysql.WhereMod[Q, enums.BenchmarksStatus]
	CreatedAt    mysql.WhereMod[Q, time.Time]
	StartedAt    mysql.WhereNullMod[Q, time.Time]
	FinishedAt   mysql.WhereNullMod[Q, time.Time]
	Score        mysql.WhereMod[Q, int64]
	Result       mysql.WhereNullMod[Q, enums.BenchmarksResult]
	ErrorMessage mysql.WhereNullMod[Q, string]
}

func (benchmarkWhere[Q]) AliasedAs(alias string) benchmarkWhere[Q] {
	return buildBenchmarkWhere[Q](buildBenchmarkColumns(alias))
}

func buildBenchmarkWhere[Q mysql.Filterable](cols benchmarkColumns) benchmarkWhere[Q] {
	return benchmarkWhere[Q]{
		ID:           mysql.Where[Q, string](cols.ID),
		InstanceID:   mysql.Where[Q, string](cols.InstanceID),
		TeamID:       mysql.Where[Q, string](cols.TeamID),
		UserID:       mysql.Where[Q, string](cols.UserID),
		Status:       mysql.Where[Q, enums.BenchmarksStatus](cols.Status),
		CreatedAt:    mysql.Where[Q, time.Time](cols.CreatedAt),
		StartedAt:    mysql.WhereNull[Q, time.Time](cols.StartedAt),
		FinishedAt:   mysql.WhereNull[Q, time.Time](cols.FinishedAt),
		Score:        mysql.Where[Q, int64](cols.Score),
		Result:       mysql.WhereNull[Q, enums.BenchmarksResult](cols.Result),
		ErrorMessage: mysql.WhereNull[Q, string](cols.ErrorMessage),
	}
}

func (o *Benchmark) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "BenchmarkLog":
		rel, ok := retrieved.(*BenchmarkLog)
		if !ok {
			return fmt.Errorf("benchmark cannot load %T as %q", retrieved, name)
		}

		o.R.BenchmarkLog = rel

		if rel != nil {
			rel.R.Benchmark = o
		}
		return nil
	case "Instance":
		rel, ok := retrieved.(*Instance)
		if !ok {
			return fmt.Errorf("benchmark cannot load %T as %q", retrieved, name)
		}

		o.R.Instance = rel

		if rel != nil {
			rel.R.Benchmarks = BenchmarkSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("benchmark has no relationship %q", name)
	}
}

type benchmarkPreloader struct {
	BenchmarkLog func(...mysql.PreloadOption) mysql.Preloader
	Instance     func(...mysql.PreloadOption) mysql.Preloader
}

func buildBenchmarkPreloader() benchmarkPreloader {
	return benchmarkPreloader{
		BenchmarkLog: func(opts ...mysql.PreloadOption) mysql.Preloader {
			return mysql.Preload[*BenchmarkLog, BenchmarkLogSlice](mysql.PreloadRel{
				Name: "BenchmarkLog",
				Sides: []mysql.PreloadSide{
					{
						From:        Benchmarks,
						To:          BenchmarkLogs,
						FromColumns: []string{"id"},
						ToColumns:   []string{"benchmark_id"},
					},
				},
			}, BenchmarkLogs.Columns.Names(), opts...)
		},
		Instance: func(opts ...mysql.PreloadOption) mysql.Preloader {
			return mysql.Preload[*Instance, InstanceSlice](mysql.PreloadRel{
				Name: "Instance",
				Sides: []mysql.PreloadSide{
					{
						From:        Benchmarks,
						To:          Instances,
						FromColumns: []string{"instance_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, Instances.Columns.Names(), opts...)
		},
	}
}

type benchmarkThenLoader[Q orm.Loadable] struct {
	BenchmarkLog func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Instance     func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildBenchmarkThenLoader[Q orm.Loadable]() benchmarkThenLoader[Q] {
	type BenchmarkLogLoadInterface interface {
		LoadBenchmarkLog(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type InstanceLoadInterface interface {
		LoadInstance(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return benchmarkThenLoader[Q]{
		BenchmarkLog: thenLoadBuilder[Q](
			"BenchmarkLog",
			func(ctx context.Context, exec bob.Executor, retrieved BenchmarkLogLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadBenchmarkLog(ctx, exec, mods...)
			},
		),
		Instance: thenLoadBuilder[Q](
			"Instance",
			func(ctx context.Context, exec bob.Executor, retrieved InstanceLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadInstance(ctx, exec, mods...)
			},
		),
	}
}

// LoadBenchmarkLog loads the benchmark's BenchmarkLog into the .R struct
func (o *Benchmark) LoadBenchmarkLog(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BenchmarkLog = nil

	related, err := o.BenchmarkLog(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Benchmark = o

	o.R.BenchmarkLog = related
	return nil
}

// LoadBenchmarkLog loads the benchmark's BenchmarkLog into the .R struct
func (os BenchmarkSlice) LoadBenchmarkLog(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	benchmarkLogs, err := os.BenchmarkLog(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range benchmarkLogs {

			if !(o.ID == rel.BenchmarkID) {
				continue
			}

			rel.R.Benchmark = o

			o.R.BenchmarkLog = rel
			break
		}
	}

	return nil
}

// LoadInstance loads the benchmark's Instance into the .R struct
func (o *Benchmark) LoadInstance(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Instance = nil

	related, err := o.Instance(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Benchmarks = BenchmarkSlice{o}

	o.R.Instance = related
	return nil
}

// LoadInstance loads the benchmark's Instance into the .R struct
func (os BenchmarkSlice) LoadInstance(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	instances, err := os.Instance(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range instances {

			if !(o.InstanceID == rel.ID) {
				continue
			}

			rel.R.Benchmarks = append(rel.R.Benchmarks, o)

			o.R.Instance = rel
			break
		}
	}

	return nil
}

type benchmarkJoins[Q dialect.Joinable] struct {
	typ          string
	BenchmarkLog modAs[Q, benchmarkLogColumns]
	Instance     modAs[Q, instanceColumns]
}

func (j benchmarkJoins[Q]) aliasedAs(alias string) benchmarkJoins[Q] {
	return buildBenchmarkJoins[Q](buildBenchmarkColumns(alias), j.typ)
}

func buildBenchmarkJoins[Q dialect.Joinable](cols benchmarkColumns, typ string) benchmarkJoins[Q] {
	return benchmarkJoins[Q]{
		typ: typ,
		BenchmarkLog: modAs[Q, benchmarkLogColumns]{
			c: BenchmarkLogs.Columns,
			f: func(to benchmarkLogColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, BenchmarkLogs.Name().As(to.Alias())).On(
						to.BenchmarkID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		Instance: modAs[Q, instanceColumns]{
			c: Instances.Columns,
			f: func(to instanceColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Instances.Name().As(to.Alias())).On(
						to.ID.EQ(cols.InstanceID),
					))
				}

				return mods
			},
		},
	}
}
