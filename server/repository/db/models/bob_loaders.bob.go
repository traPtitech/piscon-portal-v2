// Code generated by BobGen mysql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/orm"
)

var Preload = getPreloaders()

type preloaders struct {
	BenchmarkLog      benchmarkLogPreloader
	Benchmark         benchmarkPreloader
	Instance          instancePreloader
	Session           sessionPreloader
	TeamGithubAccount teamGithubAccountPreloader
	Team              teamPreloader
	User              userPreloader
}

func getPreloaders() preloaders {
	return preloaders{
		BenchmarkLog:      buildBenchmarkLogPreloader(),
		Benchmark:         buildBenchmarkPreloader(),
		Instance:          buildInstancePreloader(),
		Session:           buildSessionPreloader(),
		TeamGithubAccount: buildTeamGithubAccountPreloader(),
		Team:              buildTeamPreloader(),
		User:              buildUserPreloader(),
	}
}

var SelectThenLoad = getThenLoaders[*dialect.SelectQuery]()

type thenLoaders[Q orm.Loadable] struct {
	BenchmarkLog      benchmarkLogThenLoader[Q]
	Benchmark         benchmarkThenLoader[Q]
	Instance          instanceThenLoader[Q]
	Session           sessionThenLoader[Q]
	TeamGithubAccount teamGithubAccountThenLoader[Q]
	Team              teamThenLoader[Q]
	User              userThenLoader[Q]
}

func getThenLoaders[Q orm.Loadable]() thenLoaders[Q] {
	return thenLoaders[Q]{
		BenchmarkLog:      buildBenchmarkLogThenLoader[Q](),
		Benchmark:         buildBenchmarkThenLoader[Q](),
		Instance:          buildInstanceThenLoader[Q](),
		Session:           buildSessionThenLoader[Q](),
		TeamGithubAccount: buildTeamGithubAccountThenLoader[Q](),
		Team:              buildTeamThenLoader[Q](),
		User:              buildUserThenLoader[Q](),
	}
}

func thenLoadBuilder[Q orm.Loadable, T any](name string, f func(context.Context, bob.Executor, T, ...bob.Mod[*dialect.SelectQuery]) error) func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q] {
	return func(queryMods ...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q] {
		return func(ctx context.Context, exec bob.Executor, retrieved any) error {
			loader, isLoader := retrieved.(T)
			if !isLoader {
				return fmt.Errorf("object %T cannot load %q", retrieved, name)
			}

			err := f(ctx, exec, loader, queryMods...)

			// Don't cause an issue due to missing relationships
			if errors.Is(err, sql.ErrNoRows) {
				return nil
			}

			return err
		}
	}
}
