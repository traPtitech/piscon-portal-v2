// Code generated by BobGen mysql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/traPtitech/piscon-portal-v2/server/repository/db/models"
)

type InstanceMod interface {
	Apply(context.Context, *InstanceTemplate)
}

type InstanceModFunc func(context.Context, *InstanceTemplate)

func (f InstanceModFunc) Apply(ctx context.Context, n *InstanceTemplate) {
	f(ctx, n)
}

type InstanceModSlice []InstanceMod

func (mods InstanceModSlice) Apply(ctx context.Context, n *InstanceTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// InstanceTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type InstanceTemplate struct {
	ID                 func() string
	ProviderInstanceID func() string
	TeamID             func() string
	InstanceNumber     func() int32
	CreatedAt          func() time.Time
	DeletedAt          func() sql.Null[time.Time]

	r instanceR
	f *Factory
}

type instanceR struct {
	Benchmarks []*instanceRBenchmarksR
}

type instanceRBenchmarksR struct {
	number int
	o      *BenchmarkTemplate
}

// Apply mods to the InstanceTemplate
func (o *InstanceTemplate) Apply(ctx context.Context, mods ...InstanceMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Instance
// according to the relationships in the template. Nothing is inserted into the db
func (t InstanceTemplate) setModelRels(o *models.Instance) {
	if t.r.Benchmarks != nil {
		rel := models.BenchmarkSlice{}
		for _, r := range t.r.Benchmarks {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.InstanceID = o.ID // h2
				rel.R.Instance = o
			}
			rel = append(rel, related...)
		}
		o.R.Benchmarks = rel
	}
}

// BuildSetter returns an *models.InstanceSetter
// this does nothing with the relationship templates
func (o InstanceTemplate) BuildSetter() *models.InstanceSetter {
	m := &models.InstanceSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.ProviderInstanceID != nil {
		val := o.ProviderInstanceID()
		m.ProviderInstanceID = &val
	}
	if o.TeamID != nil {
		val := o.TeamID()
		m.TeamID = &val
	}
	if o.InstanceNumber != nil {
		val := o.InstanceNumber()
		m.InstanceNumber = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.DeletedAt != nil {
		val := o.DeletedAt()
		m.DeletedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.InstanceSetter
// this does nothing with the relationship templates
func (o InstanceTemplate) BuildManySetter(number int) []*models.InstanceSetter {
	m := make([]*models.InstanceSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Instance
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use InstanceTemplate.Create
func (o InstanceTemplate) Build() *models.Instance {
	m := &models.Instance{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.ProviderInstanceID != nil {
		m.ProviderInstanceID = o.ProviderInstanceID()
	}
	if o.TeamID != nil {
		m.TeamID = o.TeamID()
	}
	if o.InstanceNumber != nil {
		m.InstanceNumber = o.InstanceNumber()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.DeletedAt != nil {
		m.DeletedAt = o.DeletedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.InstanceSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use InstanceTemplate.CreateMany
func (o InstanceTemplate) BuildMany(number int) models.InstanceSlice {
	m := make(models.InstanceSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableInstance(m *models.InstanceSetter) {
	if m.ID == nil {
		val := random_string(nil, "36")
		m.ID = &val
	}
	if m.ProviderInstanceID == nil {
		val := random_string(nil, "255")
		m.ProviderInstanceID = &val
	}
	if m.TeamID == nil {
		val := random_string(nil, "36")
		m.TeamID = &val
	}
	if m.InstanceNumber == nil {
		val := random_int32(nil)
		m.InstanceNumber = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Instance
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *InstanceTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Instance) (context.Context, error) {
	var err error

	isBenchmarksDone, _ := instanceRelBenchmarksCtx.Value(ctx)
	if !isBenchmarksDone && o.r.Benchmarks != nil {
		ctx = instanceRelBenchmarksCtx.WithValue(ctx, true)
		for _, r := range o.r.Benchmarks {
			var rel0 models.BenchmarkSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachBenchmarks(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a instance and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *InstanceTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Instance, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a instance and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *InstanceTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Instance {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a instance and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *InstanceTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Instance {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a instance and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *InstanceTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Instance, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableInstance(opt)

	m, err := models.Instances.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = instanceCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple instances and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o InstanceTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.InstanceSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple instances and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o InstanceTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.InstanceSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple instances and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o InstanceTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.InstanceSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple instances and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o InstanceTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.InstanceSlice, error) {
	var err error
	m := make(models.InstanceSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Instance has methods that act as mods for the InstanceTemplate
var InstanceMods instanceMods

type instanceMods struct{}

func (m instanceMods) RandomizeAllColumns(f *faker.Faker) InstanceMod {
	return InstanceModSlice{
		InstanceMods.RandomID(f),
		InstanceMods.RandomProviderInstanceID(f),
		InstanceMods.RandomTeamID(f),
		InstanceMods.RandomInstanceNumber(f),
		InstanceMods.RandomCreatedAt(f),
		InstanceMods.RandomDeletedAt(f),
	}
}

// Set the model columns to this value
func (m instanceMods) ID(val string) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m instanceMods) IDFunc(f func() string) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m instanceMods) UnsetID() InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m instanceMods) RandomID(f *faker.Faker) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.ID = func() string {
			return random_string(f, "36")
		}
	})
}

// Set the model columns to this value
func (m instanceMods) ProviderInstanceID(val string) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.ProviderInstanceID = func() string { return val }
	})
}

// Set the Column from the function
func (m instanceMods) ProviderInstanceIDFunc(f func() string) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.ProviderInstanceID = f
	})
}

// Clear any values for the column
func (m instanceMods) UnsetProviderInstanceID() InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.ProviderInstanceID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m instanceMods) RandomProviderInstanceID(f *faker.Faker) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.ProviderInstanceID = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m instanceMods) TeamID(val string) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.TeamID = func() string { return val }
	})
}

// Set the Column from the function
func (m instanceMods) TeamIDFunc(f func() string) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.TeamID = f
	})
}

// Clear any values for the column
func (m instanceMods) UnsetTeamID() InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.TeamID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m instanceMods) RandomTeamID(f *faker.Faker) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.TeamID = func() string {
			return random_string(f, "36")
		}
	})
}

// Set the model columns to this value
func (m instanceMods) InstanceNumber(val int32) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.InstanceNumber = func() int32 { return val }
	})
}

// Set the Column from the function
func (m instanceMods) InstanceNumberFunc(f func() int32) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.InstanceNumber = f
	})
}

// Clear any values for the column
func (m instanceMods) UnsetInstanceNumber() InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.InstanceNumber = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m instanceMods) RandomInstanceNumber(f *faker.Faker) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.InstanceNumber = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m instanceMods) CreatedAt(val time.Time) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m instanceMods) CreatedAtFunc(f func() time.Time) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m instanceMods) UnsetCreatedAt() InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m instanceMods) RandomCreatedAt(f *faker.Faker) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m instanceMods) DeletedAt(val sql.Null[time.Time]) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.DeletedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m instanceMods) DeletedAtFunc(f func() sql.Null[time.Time]) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.DeletedAt = f
	})
}

// Clear any values for the column
func (m instanceMods) UnsetDeletedAt() InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.DeletedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m instanceMods) RandomDeletedAt(f *faker.Faker) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.DeletedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m instanceMods) RandomDeletedAtNotNull(f *faker.Faker) InstanceMod {
	return InstanceModFunc(func(_ context.Context, o *InstanceTemplate) {
		o.DeletedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

func (m instanceMods) WithParentsCascading() InstanceMod {
	return InstanceModFunc(func(ctx context.Context, o *InstanceTemplate) {
		if isDone, _ := instanceWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = instanceWithParentsCascadingCtx.WithValue(ctx, true)
	})
}

func (m instanceMods) WithBenchmarks(number int, related *BenchmarkTemplate) InstanceMod {
	return InstanceModFunc(func(ctx context.Context, o *InstanceTemplate) {
		o.r.Benchmarks = []*instanceRBenchmarksR{{
			number: number,
			o:      related,
		}}
	})
}

func (m instanceMods) WithNewBenchmarks(number int, mods ...BenchmarkMod) InstanceMod {
	return InstanceModFunc(func(ctx context.Context, o *InstanceTemplate) {
		related := o.f.NewBenchmark(ctx, mods...)
		m.WithBenchmarks(number, related).Apply(ctx, o)
	})
}

func (m instanceMods) AddBenchmarks(number int, related *BenchmarkTemplate) InstanceMod {
	return InstanceModFunc(func(ctx context.Context, o *InstanceTemplate) {
		o.r.Benchmarks = append(o.r.Benchmarks, &instanceRBenchmarksR{
			number: number,
			o:      related,
		})
	})
}

func (m instanceMods) AddNewBenchmarks(number int, mods ...BenchmarkMod) InstanceMod {
	return InstanceModFunc(func(ctx context.Context, o *InstanceTemplate) {
		related := o.f.NewBenchmark(ctx, mods...)
		m.AddBenchmarks(number, related).Apply(ctx, o)
	})
}

func (m instanceMods) WithoutBenchmarks() InstanceMod {
	return InstanceModFunc(func(ctx context.Context, o *InstanceTemplate) {
		o.r.Benchmarks = nil
	})
}
