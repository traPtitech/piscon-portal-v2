// Code generated by BobGen mysql v0.37.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/traPtitech/piscon-portal-v2/server/repository/db/models"
)

type BenchmarkMod interface {
	Apply(context.Context, *BenchmarkTemplate)
}

type BenchmarkModFunc func(context.Context, *BenchmarkTemplate)

func (f BenchmarkModFunc) Apply(ctx context.Context, n *BenchmarkTemplate) {
	f(ctx, n)
}

type BenchmarkModSlice []BenchmarkMod

func (mods BenchmarkModSlice) Apply(ctx context.Context, n *BenchmarkTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// BenchmarkTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type BenchmarkTemplate struct {
	ID           func() string
	InstanceID   func() string
	TeamID       func() string
	UserID       func() string
	Status       func() BenchmarksStatus
	CreatedAt    func() time.Time
	StartedAt    func() sql.Null[time.Time]
	FinishedAt   func() sql.Null[time.Time]
	Score        func() int64
	Result       func() sql.Null[BenchmarksResult]
	ErrorMessage func() sql.Null[string]

	r benchmarkR
	f *Factory
}

type benchmarkR struct {
	BenchmarkLog *benchmarkRBenchmarkLogR
	Instance     *benchmarkRInstanceR
}

type benchmarkRBenchmarkLogR struct {
	o *BenchmarkLogTemplate
}
type benchmarkRInstanceR struct {
	o *InstanceTemplate
}

// Apply mods to the BenchmarkTemplate
func (o *BenchmarkTemplate) Apply(ctx context.Context, mods ...BenchmarkMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// toModel returns an *models.Benchmark
// this does nothing with the relationship templates
func (o BenchmarkTemplate) toModel() *models.Benchmark {
	m := &models.Benchmark{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.InstanceID != nil {
		m.InstanceID = o.InstanceID()
	}
	if o.TeamID != nil {
		m.TeamID = o.TeamID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Status != nil {
		m.Status = o.Status()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.StartedAt != nil {
		m.StartedAt = o.StartedAt()
	}
	if o.FinishedAt != nil {
		m.FinishedAt = o.FinishedAt()
	}
	if o.Score != nil {
		m.Score = o.Score()
	}
	if o.Result != nil {
		m.Result = o.Result()
	}
	if o.ErrorMessage != nil {
		m.ErrorMessage = o.ErrorMessage()
	}

	return m
}

// toModels returns an models.BenchmarkSlice
// this does nothing with the relationship templates
func (o BenchmarkTemplate) toModels(number int) models.BenchmarkSlice {
	m := make(models.BenchmarkSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Benchmark
// according to the relationships in the template. Nothing is inserted into the db
func (t BenchmarkTemplate) setModelRels(o *models.Benchmark) {
	if t.r.BenchmarkLog != nil {
		rel := t.r.BenchmarkLog.o.toModel()
		rel.R.Benchmark = o
		rel.BenchmarkID = o.ID // h2
		o.R.BenchmarkLog = rel
	}

	if t.r.Instance != nil {
		rel := t.r.Instance.o.toModel()
		rel.R.Benchmarks = append(rel.R.Benchmarks, o)
		o.InstanceID = rel.ID // h2
		o.R.Instance = rel
	}
}

// BuildSetter returns an *models.BenchmarkSetter
// this does nothing with the relationship templates
func (o BenchmarkTemplate) BuildSetter() *models.BenchmarkSetter {
	m := &models.BenchmarkSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.InstanceID != nil {
		val := o.InstanceID()
		m.InstanceID = &val
	}
	if o.TeamID != nil {
		val := o.TeamID()
		m.TeamID = &val
	}
	if o.UserID != nil {
		val := o.UserID()
		m.UserID = &val
	}
	if o.Status != nil {
		val := o.Status()
		m.Status = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.StartedAt != nil {
		val := o.StartedAt()
		m.StartedAt = &val
	}
	if o.FinishedAt != nil {
		val := o.FinishedAt()
		m.FinishedAt = &val
	}
	if o.Score != nil {
		val := o.Score()
		m.Score = &val
	}
	if o.Result != nil {
		val := o.Result()
		m.Result = &val
	}
	if o.ErrorMessage != nil {
		val := o.ErrorMessage()
		m.ErrorMessage = &val
	}

	return m
}

// BuildManySetter returns an []*models.BenchmarkSetter
// this does nothing with the relationship templates
func (o BenchmarkTemplate) BuildManySetter(number int) []*models.BenchmarkSetter {
	m := make([]*models.BenchmarkSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Benchmark
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use BenchmarkTemplate.Create
func (o BenchmarkTemplate) Build() *models.Benchmark {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.BenchmarkSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use BenchmarkTemplate.CreateMany
func (o BenchmarkTemplate) BuildMany(number int) models.BenchmarkSlice {
	m := make(models.BenchmarkSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableBenchmark(m *models.BenchmarkSetter) {
	if m.ID == nil {
		val := random_string(nil, "36")
		m.ID = &val
	}
	if m.InstanceID == nil {
		val := random_string(nil, "36")
		m.InstanceID = &val
	}
	if m.TeamID == nil {
		val := random_string(nil, "36")
		m.TeamID = &val
	}
	if m.UserID == nil {
		val := random_string(nil, "36")
		m.UserID = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Benchmark
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *BenchmarkTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Benchmark) (context.Context, error) {
	var err error

	isBenchmarkLogDone, _ := benchmarkRelBenchmarkLogCtx.Value(ctx)
	if !isBenchmarkLogDone && o.r.BenchmarkLog != nil {
		ctx = benchmarkRelBenchmarkLogCtx.WithValue(ctx, true)
		var rel0 *models.BenchmarkLog
		ctx, rel0, err = o.r.BenchmarkLog.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachBenchmarkLog(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}

	}

	return ctx, err
}

// Create builds a benchmark and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *BenchmarkTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Benchmark, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a benchmark and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *BenchmarkTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Benchmark {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a benchmark and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *BenchmarkTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Benchmark {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a benchmark and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *BenchmarkTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Benchmark, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableBenchmark(opt)

	if o.r.Instance == nil {
		BenchmarkMods.WithNewInstance().Apply(ctx, o)
	}

	rel1, ok := instanceCtx.Value(ctx)
	if !ok {
		ctx, rel1, err = o.r.Instance.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.InstanceID = &rel1.ID

	m, err := models.Benchmarks.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = benchmarkCtx.WithValue(ctx, m)

	m.R.Instance = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple benchmarks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o BenchmarkTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.BenchmarkSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple benchmarks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o BenchmarkTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.BenchmarkSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple benchmarks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o BenchmarkTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.BenchmarkSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple benchmarks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o BenchmarkTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.BenchmarkSlice, error) {
	var err error
	m := make(models.BenchmarkSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Benchmark has methods that act as mods for the BenchmarkTemplate
var BenchmarkMods benchmarkMods

type benchmarkMods struct{}

func (m benchmarkMods) RandomizeAllColumns(f *faker.Faker) BenchmarkMod {
	return BenchmarkModSlice{
		BenchmarkMods.RandomID(f),
		BenchmarkMods.RandomInstanceID(f),
		BenchmarkMods.RandomTeamID(f),
		BenchmarkMods.RandomUserID(f),
		BenchmarkMods.RandomStatus(f),
		BenchmarkMods.RandomCreatedAt(f),
		BenchmarkMods.RandomStartedAt(f),
		BenchmarkMods.RandomFinishedAt(f),
		BenchmarkMods.RandomScore(f),
		BenchmarkMods.RandomResult(f),
		BenchmarkMods.RandomErrorMessage(f),
	}
}

// Set the model columns to this value
func (m benchmarkMods) ID(val string) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m benchmarkMods) IDFunc(f func() string) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m benchmarkMods) UnsetID() BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m benchmarkMods) RandomID(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.ID = func() string {
			return random_string(f, "36")
		}
	})
}

// Set the model columns to this value
func (m benchmarkMods) InstanceID(val string) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.InstanceID = func() string { return val }
	})
}

// Set the Column from the function
func (m benchmarkMods) InstanceIDFunc(f func() string) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.InstanceID = f
	})
}

// Clear any values for the column
func (m benchmarkMods) UnsetInstanceID() BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.InstanceID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m benchmarkMods) RandomInstanceID(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.InstanceID = func() string {
			return random_string(f, "36")
		}
	})
}

// Set the model columns to this value
func (m benchmarkMods) TeamID(val string) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.TeamID = func() string { return val }
	})
}

// Set the Column from the function
func (m benchmarkMods) TeamIDFunc(f func() string) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.TeamID = f
	})
}

// Clear any values for the column
func (m benchmarkMods) UnsetTeamID() BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.TeamID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m benchmarkMods) RandomTeamID(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.TeamID = func() string {
			return random_string(f, "36")
		}
	})
}

// Set the model columns to this value
func (m benchmarkMods) UserID(val string) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.UserID = func() string { return val }
	})
}

// Set the Column from the function
func (m benchmarkMods) UserIDFunc(f func() string) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m benchmarkMods) UnsetUserID() BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m benchmarkMods) RandomUserID(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.UserID = func() string {
			return random_string(f, "36")
		}
	})
}

// Set the model columns to this value
func (m benchmarkMods) Status(val BenchmarksStatus) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Status = func() BenchmarksStatus { return val }
	})
}

// Set the Column from the function
func (m benchmarkMods) StatusFunc(f func() BenchmarksStatus) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Status = f
	})
}

// Clear any values for the column
func (m benchmarkMods) UnsetStatus() BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Status = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m benchmarkMods) RandomStatus(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Status = func() BenchmarksStatus {
			return random_BenchmarksStatus(f)
		}
	})
}

// Set the model columns to this value
func (m benchmarkMods) CreatedAt(val time.Time) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m benchmarkMods) CreatedAtFunc(f func() time.Time) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m benchmarkMods) UnsetCreatedAt() BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m benchmarkMods) RandomCreatedAt(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m benchmarkMods) StartedAt(val sql.Null[time.Time]) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.StartedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m benchmarkMods) StartedAtFunc(f func() sql.Null[time.Time]) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.StartedAt = f
	})
}

// Clear any values for the column
func (m benchmarkMods) UnsetStartedAt() BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.StartedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m benchmarkMods) RandomStartedAt(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.StartedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m benchmarkMods) RandomStartedAtNotNull(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.StartedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m benchmarkMods) FinishedAt(val sql.Null[time.Time]) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.FinishedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m benchmarkMods) FinishedAtFunc(f func() sql.Null[time.Time]) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.FinishedAt = f
	})
}

// Clear any values for the column
func (m benchmarkMods) UnsetFinishedAt() BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.FinishedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m benchmarkMods) RandomFinishedAt(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.FinishedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m benchmarkMods) RandomFinishedAtNotNull(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.FinishedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m benchmarkMods) Score(val int64) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Score = func() int64 { return val }
	})
}

// Set the Column from the function
func (m benchmarkMods) ScoreFunc(f func() int64) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Score = f
	})
}

// Clear any values for the column
func (m benchmarkMods) UnsetScore() BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Score = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m benchmarkMods) RandomScore(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Score = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m benchmarkMods) Result(val sql.Null[BenchmarksResult]) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Result = func() sql.Null[BenchmarksResult] { return val }
	})
}

// Set the Column from the function
func (m benchmarkMods) ResultFunc(f func() sql.Null[BenchmarksResult]) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Result = f
	})
}

// Clear any values for the column
func (m benchmarkMods) UnsetResult() BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Result = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m benchmarkMods) RandomResult(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Result = func() sql.Null[BenchmarksResult] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_BenchmarksResult(f)
			return sql.Null[BenchmarksResult]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m benchmarkMods) RandomResultNotNull(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.Result = func() sql.Null[BenchmarksResult] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_BenchmarksResult(f)
			return sql.Null[BenchmarksResult]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m benchmarkMods) ErrorMessage(val sql.Null[string]) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.ErrorMessage = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m benchmarkMods) ErrorMessageFunc(f func() sql.Null[string]) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.ErrorMessage = f
	})
}

// Clear any values for the column
func (m benchmarkMods) UnsetErrorMessage() BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.ErrorMessage = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m benchmarkMods) RandomErrorMessage(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.ErrorMessage = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m benchmarkMods) RandomErrorMessageNotNull(f *faker.Faker) BenchmarkMod {
	return BenchmarkModFunc(func(_ context.Context, o *BenchmarkTemplate) {
		o.ErrorMessage = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

func (m benchmarkMods) WithParentsCascading() BenchmarkMod {
	return BenchmarkModFunc(func(ctx context.Context, o *BenchmarkTemplate) {
		if isDone, _ := benchmarkWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = benchmarkWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewBenchmarkLog(ctx, BenchmarkLogMods.WithParentsCascading())
			m.WithBenchmarkLog(related).Apply(ctx, o)
		}
		{

			related := o.f.NewInstance(ctx, InstanceMods.WithParentsCascading())
			m.WithInstance(related).Apply(ctx, o)
		}
	})
}

func (m benchmarkMods) WithBenchmarkLog(rel *BenchmarkLogTemplate) BenchmarkMod {
	return BenchmarkModFunc(func(ctx context.Context, o *BenchmarkTemplate) {
		o.r.BenchmarkLog = &benchmarkRBenchmarkLogR{
			o: rel,
		}
	})
}

func (m benchmarkMods) WithNewBenchmarkLog(mods ...BenchmarkLogMod) BenchmarkMod {
	return BenchmarkModFunc(func(ctx context.Context, o *BenchmarkTemplate) {
		related := o.f.NewBenchmarkLog(ctx, mods...)

		m.WithBenchmarkLog(related).Apply(ctx, o)
	})
}

func (m benchmarkMods) WithoutBenchmarkLog() BenchmarkMod {
	return BenchmarkModFunc(func(ctx context.Context, o *BenchmarkTemplate) {
		o.r.BenchmarkLog = nil
	})
}

func (m benchmarkMods) WithInstance(rel *InstanceTemplate) BenchmarkMod {
	return BenchmarkModFunc(func(ctx context.Context, o *BenchmarkTemplate) {
		o.r.Instance = &benchmarkRInstanceR{
			o: rel,
		}
	})
}

func (m benchmarkMods) WithNewInstance(mods ...InstanceMod) BenchmarkMod {
	return BenchmarkModFunc(func(ctx context.Context, o *BenchmarkTemplate) {
		related := o.f.NewInstance(ctx, mods...)

		m.WithInstance(related).Apply(ctx, o)
	})
}

func (m benchmarkMods) WithoutInstance() BenchmarkMod {
	return BenchmarkModFunc(func(ctx context.Context, o *BenchmarkTemplate) {
		o.r.Instance = nil
	})
}
