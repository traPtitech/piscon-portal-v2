// Code generated by BobGen mysql v0.29.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/traPtitech/piscon-portal-v2/server/repository/db/models"
)

type TeamMod interface {
	Apply(*TeamTemplate)
}

type TeamModFunc func(*TeamTemplate)

func (f TeamModFunc) Apply(n *TeamTemplate) {
	f(n)
}

type TeamModSlice []TeamMod

func (mods TeamModSlice) Apply(n *TeamTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// TeamTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TeamTemplate struct {
	ID        func() string
	Name      func() string
	CreatedAt func() time.Time

	r teamR
	f *Factory
}

type teamR struct {
	Users []*teamRUsersR
}

type teamRUsersR struct {
	number int
	o      *UserTemplate
}

// Apply mods to the TeamTemplate
func (o *TeamTemplate) Apply(mods ...TeamMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Team
// this does nothing with the relationship templates
func (o TeamTemplate) toModel() *models.Team {
	m := &models.Team{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	return m
}

// toModels returns an models.TeamSlice
// this does nothing with the relationship templates
func (o TeamTemplate) toModels(number int) models.TeamSlice {
	m := make(models.TeamSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Team
// according to the relationships in the template. Nothing is inserted into the db
func (t TeamTemplate) setModelRels(o *models.Team) {
	if t.r.Users != nil {
		rel := models.UserSlice{}
		for _, r := range t.r.Users {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.TeamID = null.From(o.ID)
				rel.R.Team = o
			}
			rel = append(rel, related...)
		}
		o.R.Users = rel
	}
}

// BuildSetter returns an *models.TeamSetter
// this does nothing with the relationship templates
func (o TeamTemplate) BuildSetter() *models.TeamSetter {
	m := &models.TeamSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.TeamSetter
// this does nothing with the relationship templates
func (o TeamTemplate) BuildManySetter(number int) []*models.TeamSetter {
	m := make([]*models.TeamSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Team
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TeamTemplate.Create
func (o TeamTemplate) Build() *models.Team {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TeamSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TeamTemplate.CreateMany
func (o TeamTemplate) BuildMany(number int) models.TeamSlice {
	m := make(models.TeamSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTeam(m *models.TeamSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random_string(nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Team
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TeamTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Team) (context.Context, error) {
	var err error

	if o.r.Users != nil {
		for _, r := range o.r.Users {
			var rel0 models.UserSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachUsers(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a team and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TeamTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Team, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a team and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *TeamTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Team {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a team and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *TeamTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Team {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a team and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TeamTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Team, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTeam(opt)

	m, err := models.Teams.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = teamCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple teams and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TeamTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TeamSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple teams and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o TeamTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.TeamSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple teams and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o TeamTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.TeamSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple teams and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TeamTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TeamSlice, error) {
	var err error
	m := make(models.TeamSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Team has methods that act as mods for the TeamTemplate
var TeamMods teamMods

type teamMods struct{}

func (m teamMods) RandomizeAllColumns(f *faker.Faker) TeamMod {
	return TeamModSlice{
		TeamMods.RandomID(f),
		TeamMods.RandomName(f),
		TeamMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m teamMods) ID(val string) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m teamMods) IDFunc(f func() string) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m teamMods) UnsetID() TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m teamMods) RandomID(f *faker.Faker) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.ID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m teamMods) Name(val string) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m teamMods) NameFunc(f func() string) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m teamMods) UnsetName() TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m teamMods) RandomName(f *faker.Faker) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m teamMods) CreatedAt(val time.Time) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m teamMods) CreatedAtFunc(f func() time.Time) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m teamMods) UnsetCreatedAt() TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m teamMods) RandomCreatedAt(f *faker.Faker) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m teamMods) WithUsers(number int, related *UserTemplate) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.r.Users = []*teamRUsersR{{
			number: number,
			o:      related,
		}}
	})
}

func (m teamMods) WithNewUsers(number int, mods ...UserMod) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		related := o.f.NewUser(mods...)
		m.WithUsers(number, related).Apply(o)
	})
}

func (m teamMods) AddUsers(number int, related *UserTemplate) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.r.Users = append(o.r.Users, &teamRUsersR{
			number: number,
			o:      related,
		})
	})
}

func (m teamMods) AddNewUsers(number int, mods ...UserMod) TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		related := o.f.NewUser(mods...)
		m.AddUsers(number, related).Apply(o)
	})
}

func (m teamMods) WithoutUsers() TeamMod {
	return TeamModFunc(func(o *TeamTemplate) {
		o.r.Users = nil
	})
}
