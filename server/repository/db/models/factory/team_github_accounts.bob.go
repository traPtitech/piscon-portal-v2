// Code generated by BobGen mysql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/traPtitech/piscon-portal-v2/server/repository/db/models"
)

type TeamGithubAccountMod interface {
	Apply(context.Context, *TeamGithubAccountTemplate)
}

type TeamGithubAccountModFunc func(context.Context, *TeamGithubAccountTemplate)

func (f TeamGithubAccountModFunc) Apply(ctx context.Context, n *TeamGithubAccountTemplate) {
	f(ctx, n)
}

type TeamGithubAccountModSlice []TeamGithubAccountMod

func (mods TeamGithubAccountModSlice) Apply(ctx context.Context, n *TeamGithubAccountTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// TeamGithubAccountTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TeamGithubAccountTemplate struct {
	ID       func() string
	TeamID   func() string
	GithubID func() string

	r teamGithubAccountR
	f *Factory
}

type teamGithubAccountR struct {
	Team *teamGithubAccountRTeamR
}

type teamGithubAccountRTeamR struct {
	o *TeamTemplate
}

// Apply mods to the TeamGithubAccountTemplate
func (o *TeamGithubAccountTemplate) Apply(ctx context.Context, mods ...TeamGithubAccountMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.TeamGithubAccount
// according to the relationships in the template. Nothing is inserted into the db
func (t TeamGithubAccountTemplate) setModelRels(o *models.TeamGithubAccount) {
	if t.r.Team != nil {
		rel := t.r.Team.o.Build()
		rel.R.TeamGithubAccounts = append(rel.R.TeamGithubAccounts, o)
		o.TeamID = rel.ID // h2
		o.R.Team = rel
	}
}

// BuildSetter returns an *models.TeamGithubAccountSetter
// this does nothing with the relationship templates
func (o TeamGithubAccountTemplate) BuildSetter() *models.TeamGithubAccountSetter {
	m := &models.TeamGithubAccountSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.TeamID != nil {
		val := o.TeamID()
		m.TeamID = &val
	}
	if o.GithubID != nil {
		val := o.GithubID()
		m.GithubID = &val
	}

	return m
}

// BuildManySetter returns an []*models.TeamGithubAccountSetter
// this does nothing with the relationship templates
func (o TeamGithubAccountTemplate) BuildManySetter(number int) []*models.TeamGithubAccountSetter {
	m := make([]*models.TeamGithubAccountSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.TeamGithubAccount
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TeamGithubAccountTemplate.Create
func (o TeamGithubAccountTemplate) Build() *models.TeamGithubAccount {
	m := &models.TeamGithubAccount{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.TeamID != nil {
		m.TeamID = o.TeamID()
	}
	if o.GithubID != nil {
		m.GithubID = o.GithubID()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TeamGithubAccountSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TeamGithubAccountTemplate.CreateMany
func (o TeamGithubAccountTemplate) BuildMany(number int) models.TeamGithubAccountSlice {
	m := make(models.TeamGithubAccountSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTeamGithubAccount(m *models.TeamGithubAccountSetter) {
	if m.ID == nil {
		val := random_string(nil, "36")
		m.ID = &val
	}
	if m.TeamID == nil {
		val := random_string(nil, "36")
		m.TeamID = &val
	}
	if m.GithubID == nil {
		val := random_string(nil, "255")
		m.GithubID = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.TeamGithubAccount
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TeamGithubAccountTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.TeamGithubAccount) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a teamGithubAccount and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TeamGithubAccountTemplate) Create(ctx context.Context, exec bob.Executor) (*models.TeamGithubAccount, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a teamGithubAccount and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *TeamGithubAccountTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.TeamGithubAccount {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a teamGithubAccount and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *TeamGithubAccountTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.TeamGithubAccount {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a teamGithubAccount and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TeamGithubAccountTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.TeamGithubAccount, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTeamGithubAccount(opt)

	if o.r.Team == nil {
		TeamGithubAccountMods.WithNewTeam().Apply(ctx, o)
	}

	rel0, ok := teamCtx.Value(ctx)
	if !ok {
		ctx, rel0, err = o.r.Team.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.TeamID = &rel0.ID

	m, err := models.TeamGithubAccounts.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = teamGithubAccountCtx.WithValue(ctx, m)

	m.R.Team = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple teamGithubAccounts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TeamGithubAccountTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TeamGithubAccountSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple teamGithubAccounts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o TeamGithubAccountTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.TeamGithubAccountSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple teamGithubAccounts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o TeamGithubAccountTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.TeamGithubAccountSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple teamGithubAccounts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TeamGithubAccountTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TeamGithubAccountSlice, error) {
	var err error
	m := make(models.TeamGithubAccountSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// TeamGithubAccount has methods that act as mods for the TeamGithubAccountTemplate
var TeamGithubAccountMods teamGithubAccountMods

type teamGithubAccountMods struct{}

func (m teamGithubAccountMods) RandomizeAllColumns(f *faker.Faker) TeamGithubAccountMod {
	return TeamGithubAccountModSlice{
		TeamGithubAccountMods.RandomID(f),
		TeamGithubAccountMods.RandomTeamID(f),
		TeamGithubAccountMods.RandomGithubID(f),
	}
}

// Set the model columns to this value
func (m teamGithubAccountMods) ID(val string) TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(_ context.Context, o *TeamGithubAccountTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m teamGithubAccountMods) IDFunc(f func() string) TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(_ context.Context, o *TeamGithubAccountTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m teamGithubAccountMods) UnsetID() TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(_ context.Context, o *TeamGithubAccountTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m teamGithubAccountMods) RandomID(f *faker.Faker) TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(_ context.Context, o *TeamGithubAccountTemplate) {
		o.ID = func() string {
			return random_string(f, "36")
		}
	})
}

// Set the model columns to this value
func (m teamGithubAccountMods) TeamID(val string) TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(_ context.Context, o *TeamGithubAccountTemplate) {
		o.TeamID = func() string { return val }
	})
}

// Set the Column from the function
func (m teamGithubAccountMods) TeamIDFunc(f func() string) TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(_ context.Context, o *TeamGithubAccountTemplate) {
		o.TeamID = f
	})
}

// Clear any values for the column
func (m teamGithubAccountMods) UnsetTeamID() TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(_ context.Context, o *TeamGithubAccountTemplate) {
		o.TeamID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m teamGithubAccountMods) RandomTeamID(f *faker.Faker) TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(_ context.Context, o *TeamGithubAccountTemplate) {
		o.TeamID = func() string {
			return random_string(f, "36")
		}
	})
}

// Set the model columns to this value
func (m teamGithubAccountMods) GithubID(val string) TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(_ context.Context, o *TeamGithubAccountTemplate) {
		o.GithubID = func() string { return val }
	})
}

// Set the Column from the function
func (m teamGithubAccountMods) GithubIDFunc(f func() string) TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(_ context.Context, o *TeamGithubAccountTemplate) {
		o.GithubID = f
	})
}

// Clear any values for the column
func (m teamGithubAccountMods) UnsetGithubID() TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(_ context.Context, o *TeamGithubAccountTemplate) {
		o.GithubID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m teamGithubAccountMods) RandomGithubID(f *faker.Faker) TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(_ context.Context, o *TeamGithubAccountTemplate) {
		o.GithubID = func() string {
			return random_string(f, "255")
		}
	})
}

func (m teamGithubAccountMods) WithParentsCascading() TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(ctx context.Context, o *TeamGithubAccountTemplate) {
		if isDone, _ := teamGithubAccountWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = teamGithubAccountWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewTeam(ctx, TeamMods.WithParentsCascading())
			m.WithTeam(related).Apply(ctx, o)
		}
	})
}

func (m teamGithubAccountMods) WithTeam(rel *TeamTemplate) TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(ctx context.Context, o *TeamGithubAccountTemplate) {
		o.r.Team = &teamGithubAccountRTeamR{
			o: rel,
		}
	})
}

func (m teamGithubAccountMods) WithNewTeam(mods ...TeamMod) TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(ctx context.Context, o *TeamGithubAccountTemplate) {
		related := o.f.NewTeam(ctx, mods...)

		m.WithTeam(related).Apply(ctx, o)
	})
}

func (m teamGithubAccountMods) WithoutTeam() TeamGithubAccountMod {
	return TeamGithubAccountModFunc(func(ctx context.Context, o *TeamGithubAccountTemplate) {
		o.r.Team = nil
	})
}
