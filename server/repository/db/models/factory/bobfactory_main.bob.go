// Code generated by BobGen mysql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import "context"

type Factory struct {
	baseBenchmarkLogMods BenchmarkLogModSlice
	baseBenchmarkMods    BenchmarkModSlice
	baseDocumentMods     DocumentModSlice
	baseInstanceMods     InstanceModSlice
	baseSessionMods      SessionModSlice
	baseTeamMods         TeamModSlice
	baseUserMods         UserModSlice
}

func New() *Factory {
	return &Factory{}
}

func (f *Factory) NewBenchmarkLog(ctx context.Context, mods ...BenchmarkLogMod) *BenchmarkLogTemplate {
	o := &BenchmarkLogTemplate{f: f}

	if f != nil {
		f.baseBenchmarkLogMods.Apply(ctx, o)
	}

	BenchmarkLogModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewBenchmark(ctx context.Context, mods ...BenchmarkMod) *BenchmarkTemplate {
	o := &BenchmarkTemplate{f: f}

	if f != nil {
		f.baseBenchmarkMods.Apply(ctx, o)
	}

	BenchmarkModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewDocument(ctx context.Context, mods ...DocumentMod) *DocumentTemplate {
	o := &DocumentTemplate{f: f}

	if f != nil {
		f.baseDocumentMods.Apply(ctx, o)
	}

	DocumentModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewInstance(ctx context.Context, mods ...InstanceMod) *InstanceTemplate {
	o := &InstanceTemplate{f: f}

	if f != nil {
		f.baseInstanceMods.Apply(ctx, o)
	}

	InstanceModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewSession(ctx context.Context, mods ...SessionMod) *SessionTemplate {
	o := &SessionTemplate{f: f}

	if f != nil {
		f.baseSessionMods.Apply(ctx, o)
	}

	SessionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewTeam(ctx context.Context, mods ...TeamMod) *TeamTemplate {
	o := &TeamTemplate{f: f}

	if f != nil {
		f.baseTeamMods.Apply(ctx, o)
	}

	TeamModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewUser(ctx context.Context, mods ...UserMod) *UserTemplate {
	o := &UserTemplate{f: f}

	if f != nil {
		f.baseUserMods.Apply(ctx, o)
	}

	UserModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) ClearBaseBenchmarkLogMods() {
	f.baseBenchmarkLogMods = nil
}

func (f *Factory) AddBaseBenchmarkLogMod(mods ...BenchmarkLogMod) {
	f.baseBenchmarkLogMods = append(f.baseBenchmarkLogMods, mods...)
}

func (f *Factory) ClearBaseBenchmarkMods() {
	f.baseBenchmarkMods = nil
}

func (f *Factory) AddBaseBenchmarkMod(mods ...BenchmarkMod) {
	f.baseBenchmarkMods = append(f.baseBenchmarkMods, mods...)
}

func (f *Factory) ClearBaseDocumentMods() {
	f.baseDocumentMods = nil
}

func (f *Factory) AddBaseDocumentMod(mods ...DocumentMod) {
	f.baseDocumentMods = append(f.baseDocumentMods, mods...)
}

func (f *Factory) ClearBaseInstanceMods() {
	f.baseInstanceMods = nil
}

func (f *Factory) AddBaseInstanceMod(mods ...InstanceMod) {
	f.baseInstanceMods = append(f.baseInstanceMods, mods...)
}

func (f *Factory) ClearBaseSessionMods() {
	f.baseSessionMods = nil
}

func (f *Factory) AddBaseSessionMod(mods ...SessionMod) {
	f.baseSessionMods = append(f.baseSessionMods, mods...)
}

func (f *Factory) ClearBaseTeamMods() {
	f.baseTeamMods = nil
}

func (f *Factory) AddBaseTeamMod(mods ...TeamMod) {
	f.baseTeamMods = append(f.baseTeamMods, mods...)
}

func (f *Factory) ClearBaseUserMods() {
	f.baseUserMods = nil
}

func (f *Factory) AddBaseUserMod(mods ...UserMod) {
	f.baseUserMods = append(f.baseUserMods, mods...)
}
