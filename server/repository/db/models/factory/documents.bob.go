// Code generated by BobGen mysql v0.36.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/traPtitech/piscon-portal-v2/server/repository/db/models"
)

type DocumentMod interface {
	Apply(context.Context, *DocumentTemplate)
}

type DocumentModFunc func(context.Context, *DocumentTemplate)

func (f DocumentModFunc) Apply(ctx context.Context, n *DocumentTemplate) {
	f(ctx, n)
}

type DocumentModSlice []DocumentMod

func (mods DocumentModSlice) Apply(ctx context.Context, n *DocumentTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// DocumentTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type DocumentTemplate struct {
	ID        func() string
	Body      func() string
	CreatedAt func() time.Time

	f *Factory
}

// Apply mods to the DocumentTemplate
func (o *DocumentTemplate) Apply(ctx context.Context, mods ...DocumentMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// toModel returns an *models.Document
// this does nothing with the relationship templates
func (o DocumentTemplate) toModel() *models.Document {
	m := &models.Document{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Body != nil {
		m.Body = o.Body()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	return m
}

// toModels returns an models.DocumentSlice
// this does nothing with the relationship templates
func (o DocumentTemplate) toModels(number int) models.DocumentSlice {
	m := make(models.DocumentSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Document
// according to the relationships in the template. Nothing is inserted into the db
func (t DocumentTemplate) setModelRels(o *models.Document) {}

// BuildSetter returns an *models.DocumentSetter
// this does nothing with the relationship templates
func (o DocumentTemplate) BuildSetter() *models.DocumentSetter {
	m := &models.DocumentSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Body != nil {
		m.Body = omit.From(o.Body())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.DocumentSetter
// this does nothing with the relationship templates
func (o DocumentTemplate) BuildManySetter(number int) []*models.DocumentSetter {
	m := make([]*models.DocumentSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Document
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use DocumentTemplate.Create
func (o DocumentTemplate) Build() *models.Document {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.DocumentSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use DocumentTemplate.CreateMany
func (o DocumentTemplate) BuildMany(number int) models.DocumentSlice {
	m := make(models.DocumentSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableDocument(m *models.DocumentSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random_string(nil, "36"))
	}
	if m.Body.IsUnset() {
		m.Body = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Document
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *DocumentTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Document) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a document and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *DocumentTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Document, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a document and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *DocumentTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Document {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a document and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *DocumentTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Document {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a document and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *DocumentTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Document, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableDocument(opt)

	m, err := models.Documents.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = documentCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple documents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o DocumentTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.DocumentSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple documents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o DocumentTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.DocumentSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple documents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o DocumentTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.DocumentSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple documents and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o DocumentTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.DocumentSlice, error) {
	var err error
	m := make(models.DocumentSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Document has methods that act as mods for the DocumentTemplate
var DocumentMods documentMods

type documentMods struct{}

func (m documentMods) RandomizeAllColumns(f *faker.Faker) DocumentMod {
	return DocumentModSlice{
		DocumentMods.RandomID(f),
		DocumentMods.RandomBody(f),
		DocumentMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m documentMods) ID(val string) DocumentMod {
	return DocumentModFunc(func(_ context.Context, o *DocumentTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m documentMods) IDFunc(f func() string) DocumentMod {
	return DocumentModFunc(func(_ context.Context, o *DocumentTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m documentMods) UnsetID() DocumentMod {
	return DocumentModFunc(func(_ context.Context, o *DocumentTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m documentMods) RandomID(f *faker.Faker) DocumentMod {
	return DocumentModFunc(func(_ context.Context, o *DocumentTemplate) {
		o.ID = func() string {
			return random_string(f, "36")
		}
	})
}

// Set the model columns to this value
func (m documentMods) Body(val string) DocumentMod {
	return DocumentModFunc(func(_ context.Context, o *DocumentTemplate) {
		o.Body = func() string { return val }
	})
}

// Set the Column from the function
func (m documentMods) BodyFunc(f func() string) DocumentMod {
	return DocumentModFunc(func(_ context.Context, o *DocumentTemplate) {
		o.Body = f
	})
}

// Clear any values for the column
func (m documentMods) UnsetBody() DocumentMod {
	return DocumentModFunc(func(_ context.Context, o *DocumentTemplate) {
		o.Body = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m documentMods) RandomBody(f *faker.Faker) DocumentMod {
	return DocumentModFunc(func(_ context.Context, o *DocumentTemplate) {
		o.Body = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m documentMods) CreatedAt(val time.Time) DocumentMod {
	return DocumentModFunc(func(_ context.Context, o *DocumentTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m documentMods) CreatedAtFunc(f func() time.Time) DocumentMod {
	return DocumentModFunc(func(_ context.Context, o *DocumentTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m documentMods) UnsetCreatedAt() DocumentMod {
	return DocumentModFunc(func(_ context.Context, o *DocumentTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m documentMods) RandomCreatedAt(f *faker.Faker) DocumentMod {
	return DocumentModFunc(func(_ context.Context, o *DocumentTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m documentMods) WithParentsCascading() DocumentMod {
	return DocumentModFunc(func(ctx context.Context, o *DocumentTemplate) {
		if isDone, _ := documentWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = documentWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
