// Code generated by BobGen mysql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/dm"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Instance is an object representing the database table.
type Instance struct {
	ID                 string              `db:"id,pk" `
	ProviderInstanceID string              `db:"provider_instance_id" `
	TeamID             string              `db:"team_id" `
	InstanceNumber     int32               `db:"instance_number" `
	CreatedAt          time.Time           `db:"created_at" `
	DeletedAt          sql.Null[time.Time] `db:"deleted_at" `

	R instanceR `db:"-" `
}

// InstanceSlice is an alias for a slice of pointers to Instance.
// This should almost always be used instead of []*Instance.
type InstanceSlice []*Instance

// Instances contains methods to work with the instances table
var Instances = mysql.NewTablex[*Instance, InstanceSlice, *InstanceSetter]("instances", buildInstanceColumns("instances"), []string{"id"})

// InstancesQuery is a query on the instances table
type InstancesQuery = *mysql.ViewQuery[*Instance, InstanceSlice]

// instanceR is where relationships are stored.
type instanceR struct {
	Benchmarks BenchmarkSlice // benchmarks_ibfk_1
}

func buildInstanceColumns(alias string) instanceColumns {
	return instanceColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "provider_instance_id", "team_id", "instance_number", "created_at", "deleted_at",
		).WithParent("instances"),
		tableAlias:         alias,
		ID:                 mysql.Quote(alias, "id"),
		ProviderInstanceID: mysql.Quote(alias, "provider_instance_id"),
		TeamID:             mysql.Quote(alias, "team_id"),
		InstanceNumber:     mysql.Quote(alias, "instance_number"),
		CreatedAt:          mysql.Quote(alias, "created_at"),
		DeletedAt:          mysql.Quote(alias, "deleted_at"),
	}
}

type instanceColumns struct {
	expr.ColumnsExpr
	tableAlias         string
	ID                 mysql.Expression
	ProviderInstanceID mysql.Expression
	TeamID             mysql.Expression
	InstanceNumber     mysql.Expression
	CreatedAt          mysql.Expression
	DeletedAt          mysql.Expression
}

func (c instanceColumns) Alias() string {
	return c.tableAlias
}

func (instanceColumns) AliasedAs(alias string) instanceColumns {
	return buildInstanceColumns(alias)
}

// InstanceSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type InstanceSetter struct {
	ID                 *string              `db:"id,pk" `
	ProviderInstanceID *string              `db:"provider_instance_id" `
	TeamID             *string              `db:"team_id" `
	InstanceNumber     *int32               `db:"instance_number" `
	CreatedAt          *time.Time           `db:"created_at" `
	DeletedAt          *sql.Null[time.Time] `db:"deleted_at" `
}

func (s InstanceSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if s.ID != nil {
		vals = append(vals, "id")
	}
	if s.ProviderInstanceID != nil {
		vals = append(vals, "provider_instance_id")
	}
	if s.TeamID != nil {
		vals = append(vals, "team_id")
	}
	if s.InstanceNumber != nil {
		vals = append(vals, "instance_number")
	}
	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}
	if s.DeletedAt != nil {
		vals = append(vals, "deleted_at")
	}
	return vals
}

func (s InstanceSetter) Overwrite(t *Instance) {
	if s.ID != nil {
		t.ID = func() string {
			if s.ID == nil {
				return *new(string)
			}
			return *s.ID
		}()
	}
	if s.ProviderInstanceID != nil {
		t.ProviderInstanceID = func() string {
			if s.ProviderInstanceID == nil {
				return *new(string)
			}
			return *s.ProviderInstanceID
		}()
	}
	if s.TeamID != nil {
		t.TeamID = func() string {
			if s.TeamID == nil {
				return *new(string)
			}
			return *s.TeamID
		}()
	}
	if s.InstanceNumber != nil {
		t.InstanceNumber = func() int32 {
			if s.InstanceNumber == nil {
				return *new(int32)
			}
			return *s.InstanceNumber
		}()
	}
	if s.CreatedAt != nil {
		t.CreatedAt = func() time.Time {
			if s.CreatedAt == nil {
				return *new(time.Time)
			}
			return *s.CreatedAt
		}()
	}
	if s.DeletedAt != nil {
		t.DeletedAt = func() sql.Null[time.Time] {
			if s.DeletedAt == nil {
				return *new(sql.Null[time.Time])
			}
			v := s.DeletedAt
			return *v
		}()
	}
}

func (s *InstanceSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Instances.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(
		bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.ID != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() string {
				if s.ID == nil {
					return *new(string)
				}
				return *s.ID
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.ProviderInstanceID != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() string {
				if s.ProviderInstanceID == nil {
					return *new(string)
				}
				return *s.ProviderInstanceID
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.TeamID != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() string {
				if s.TeamID == nil {
					return *new(string)
				}
				return *s.TeamID
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.InstanceNumber != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() int32 {
				if s.InstanceNumber == nil {
					return *new(int32)
				}
				return *s.InstanceNumber
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.CreatedAt != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() time.Time {
				if s.CreatedAt == nil {
					return *new(time.Time)
				}
				return *s.CreatedAt
			}()).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if !(s.DeletedAt != nil) {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(func() sql.Null[time.Time] {
				if s.DeletedAt == nil {
					return *new(sql.Null[time.Time])
				}
				v := s.DeletedAt
				return *v
			}()).WriteSQL(ctx, w, d, start)
		}))
}

func (s InstanceSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions("instances")...)
}

func (s InstanceSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if s.ProviderInstanceID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "provider_instance_id")...),
			mysql.Arg(s.ProviderInstanceID),
		}})
	}

	if s.TeamID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "team_id")...),
			mysql.Arg(s.TeamID),
		}})
	}

	if s.InstanceNumber != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "instance_number")...),
			mysql.Arg(s.InstanceNumber),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "created_at")...),
			mysql.Arg(s.CreatedAt),
		}})
	}

	if s.DeletedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "deleted_at")...),
			mysql.Arg(s.DeletedAt),
		}})
	}

	return exprs
}

// FindInstance retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindInstance(ctx context.Context, exec bob.Executor, IDPK string, cols ...string) (*Instance, error) {
	if len(cols) == 0 {
		return Instances.Query(
			sm.Where(Instances.Columns.ID.EQ(mysql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return Instances.Query(
		sm.Where(Instances.Columns.ID.EQ(mysql.Arg(IDPK))),
		sm.Columns(Instances.Columns.Only(cols...)),
	).One(ctx, exec)
}

// InstanceExists checks the presence of a single record by primary key
func InstanceExists(ctx context.Context, exec bob.Executor, IDPK string) (bool, error) {
	return Instances.Query(
		sm.Where(Instances.Columns.ID.EQ(mysql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Instance is retrieved from the database
func (o *Instance) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Instances.AfterSelectHooks.RunHooks(ctx, exec, InstanceSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Instances.AfterInsertHooks.RunHooks(ctx, exec, InstanceSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Instances.AfterUpdateHooks.RunHooks(ctx, exec, InstanceSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Instances.AfterDeleteHooks.RunHooks(ctx, exec, InstanceSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Instance
func (o *Instance) primaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

func (o *Instance) pkEQ() dialect.Expression {
	return mysql.Quote("instances", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Instance
func (o *Instance) Update(ctx context.Context, exec bob.Executor, s *InstanceSetter) error {
	_, err := Instances.Update(s.UpdateMod(), um.Where(o.pkEQ())).Exec(ctx, exec)
	if err != nil {
		return err
	}

	s.Overwrite(o)

	return nil
}

// Delete deletes a single Instance record with an executor
func (o *Instance) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Instances.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Instance using the executor
func (o *Instance) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Instances.Query(
		sm.Where(Instances.Columns.ID.EQ(mysql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after InstanceSlice is retrieved from the database
func (o InstanceSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Instances.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Instances.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Instances.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Instances.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o InstanceSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return mysql.Raw("NULL")
	}

	return mysql.Quote("instances", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o InstanceSlice) copyMatchingRows(from ...*Instance) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o InstanceSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Instances.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Instance:
				o.copyMatchingRows(retrieved)
			case []*Instance:
				o.copyMatchingRows(retrieved...)
			case InstanceSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Instance or a slice of Instance
				// then run the AfterUpdateHooks on the slice
				_, err = Instances.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o InstanceSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Instances.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Instance:
				o.copyMatchingRows(retrieved)
			case []*Instance:
				o.copyMatchingRows(retrieved...)
			case InstanceSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Instance or a slice of Instance
				// then run the AfterDeleteHooks on the slice
				_, err = Instances.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o InstanceSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals InstanceSetter) error {
	_, err := Instances.Update(vals.UpdateMod(), o.UpdateMod()).Exec(ctx, exec)

	for i := range o {
		vals.Overwrite(o[i])
	}

	return err
}

func (o InstanceSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Instances.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o InstanceSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Instances.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// Benchmarks starts a query for related objects on benchmarks
func (o *Instance) Benchmarks(mods ...bob.Mod[*dialect.SelectQuery]) BenchmarksQuery {
	return Benchmarks.Query(append(mods,
		sm.Where(Benchmarks.Columns.InstanceID.EQ(mysql.Arg(o.ID))),
	)...)
}

func (os InstanceSlice) Benchmarks(mods ...bob.Mod[*dialect.SelectQuery]) BenchmarksQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = mysql.ArgGroup(o.ID)
	}
	PKArgExpr := mysql.Group(PKArgSlice...)

	return Benchmarks.Query(append(mods,
		sm.Where(mysql.Group(Benchmarks.Columns.InstanceID).OP("IN", PKArgExpr)),
	)...)
}

func insertInstanceBenchmarks0(ctx context.Context, exec bob.Executor, benchmarks1 []*BenchmarkSetter, instance0 *Instance) (BenchmarkSlice, error) {
	for i := range benchmarks1 {
		benchmarks1[i].InstanceID = func() *string { return &instance0.ID }()
	}

	ret, err := Benchmarks.Insert(bob.ToMods(benchmarks1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertInstanceBenchmarks0: %w", err)
	}

	return ret, nil
}

func attachInstanceBenchmarks0(ctx context.Context, exec bob.Executor, count int, benchmarks1 BenchmarkSlice, instance0 *Instance) (BenchmarkSlice, error) {
	setter := &BenchmarkSetter{
		InstanceID: func() *string { return &instance0.ID }(),
	}

	err := benchmarks1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachInstanceBenchmarks0: %w", err)
	}

	return benchmarks1, nil
}

func (instance0 *Instance) InsertBenchmarks(ctx context.Context, exec bob.Executor, related ...*BenchmarkSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	benchmarks1, err := insertInstanceBenchmarks0(ctx, exec, related, instance0)
	if err != nil {
		return err
	}

	instance0.R.Benchmarks = append(instance0.R.Benchmarks, benchmarks1...)

	for _, rel := range benchmarks1 {
		rel.R.Instance = instance0
	}
	return nil
}

func (instance0 *Instance) AttachBenchmarks(ctx context.Context, exec bob.Executor, related ...*Benchmark) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	benchmarks1 := BenchmarkSlice(related)

	_, err = attachInstanceBenchmarks0(ctx, exec, len(related), benchmarks1, instance0)
	if err != nil {
		return err
	}

	instance0.R.Benchmarks = append(instance0.R.Benchmarks, benchmarks1...)

	for _, rel := range related {
		rel.R.Instance = instance0
	}

	return nil
}

type instanceWhere[Q mysql.Filterable] struct {
	ID                 mysql.WhereMod[Q, string]
	ProviderInstanceID mysql.WhereMod[Q, string]
	TeamID             mysql.WhereMod[Q, string]
	InstanceNumber     mysql.WhereMod[Q, int32]
	CreatedAt          mysql.WhereMod[Q, time.Time]
	DeletedAt          mysql.WhereNullMod[Q, time.Time]
}

func (instanceWhere[Q]) AliasedAs(alias string) instanceWhere[Q] {
	return buildInstanceWhere[Q](buildInstanceColumns(alias))
}

func buildInstanceWhere[Q mysql.Filterable](cols instanceColumns) instanceWhere[Q] {
	return instanceWhere[Q]{
		ID:                 mysql.Where[Q, string](cols.ID),
		ProviderInstanceID: mysql.Where[Q, string](cols.ProviderInstanceID),
		TeamID:             mysql.Where[Q, string](cols.TeamID),
		InstanceNumber:     mysql.Where[Q, int32](cols.InstanceNumber),
		CreatedAt:          mysql.Where[Q, time.Time](cols.CreatedAt),
		DeletedAt:          mysql.WhereNull[Q, time.Time](cols.DeletedAt),
	}
}

func (o *Instance) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Benchmarks":
		rels, ok := retrieved.(BenchmarkSlice)
		if !ok {
			return fmt.Errorf("instance cannot load %T as %q", retrieved, name)
		}

		o.R.Benchmarks = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Instance = o
			}
		}
		return nil
	default:
		return fmt.Errorf("instance has no relationship %q", name)
	}
}

type instancePreloader struct{}

func buildInstancePreloader() instancePreloader {
	return instancePreloader{}
}

type instanceThenLoader[Q orm.Loadable] struct {
	Benchmarks func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildInstanceThenLoader[Q orm.Loadable]() instanceThenLoader[Q] {
	type BenchmarksLoadInterface interface {
		LoadBenchmarks(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return instanceThenLoader[Q]{
		Benchmarks: thenLoadBuilder[Q](
			"Benchmarks",
			func(ctx context.Context, exec bob.Executor, retrieved BenchmarksLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadBenchmarks(ctx, exec, mods...)
			},
		),
	}
}

// LoadBenchmarks loads the instance's Benchmarks into the .R struct
func (o *Instance) LoadBenchmarks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Benchmarks = nil

	related, err := o.Benchmarks(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Instance = o
	}

	o.R.Benchmarks = related
	return nil
}

// LoadBenchmarks loads the instance's Benchmarks into the .R struct
func (os InstanceSlice) LoadBenchmarks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	benchmarks, err := os.Benchmarks(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.Benchmarks = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range benchmarks {

			if !(o.ID == rel.InstanceID) {
				continue
			}

			rel.R.Instance = o

			o.R.Benchmarks = append(o.R.Benchmarks, rel)
		}
	}

	return nil
}

type instanceJoins[Q dialect.Joinable] struct {
	typ        string
	Benchmarks modAs[Q, benchmarkColumns]
}

func (j instanceJoins[Q]) aliasedAs(alias string) instanceJoins[Q] {
	return buildInstanceJoins[Q](buildInstanceColumns(alias), j.typ)
}

func buildInstanceJoins[Q dialect.Joinable](cols instanceColumns, typ string) instanceJoins[Q] {
	return instanceJoins[Q]{
		typ: typ,
		Benchmarks: modAs[Q, benchmarkColumns]{
			c: Benchmarks.Columns,
			f: func(to benchmarkColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Benchmarks.Name().As(to.Alias())).On(
						to.InstanceID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
	}
}
