// Code generated by BobGen mysql v0.30.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"hash/maphash"
	"strings"

	mysqlDriver "github.com/go-sql-driver/mysql"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
)

var TableNames = struct {
	Sessions string
	Teams    string
	Users    string
}{
	Sessions: "sessions",
	Teams:    "teams",
	Users:    "users",
}

var ColumnNames = struct {
	Sessions sessionColumnNames
	Teams    teamColumnNames
	Users    userColumnNames
}{
	Sessions: sessionColumnNames{
		ID:        "id",
		UserID:    "user_id",
		CreatedAt: "created_at",
		ExpiredAt: "expired_at",
	},
	Teams: teamColumnNames{
		ID:        "id",
		Name:      "name",
		CreatedAt: "created_at",
	},
	Users: userColumnNames{
		ID:      "id",
		Name:    "name",
		TeamID:  "team_id",
		IsAdmin: "is_admin",
	},
}

var (
	SelectWhere = Where[*dialect.SelectQuery]()
	UpdateWhere = Where[*dialect.UpdateQuery]()
	DeleteWhere = Where[*dialect.DeleteQuery]()
)

func Where[Q mysql.Filterable]() struct {
	Sessions sessionWhere[Q]
	Teams    teamWhere[Q]
	Users    userWhere[Q]
} {
	return struct {
		Sessions sessionWhere[Q]
		Teams    teamWhere[Q]
		Users    userWhere[Q]
	}{
		Sessions: buildSessionWhere[Q](SessionColumns),
		Teams:    buildTeamWhere[Q](TeamColumns),
		Users:    buildUserWhere[Q](UserColumns),
	}
}

var (
	SelectJoins = getJoins[*dialect.SelectQuery]()
	UpdateJoins = getJoins[*dialect.UpdateQuery]()
	DeleteJoins = getJoins[*dialect.DeleteQuery]()
)

type joinSet[Q interface{ aliasedAs(string) Q }] struct {
	InnerJoin Q
	LeftJoin  Q
	RightJoin Q
}

func (j joinSet[Q]) AliasedAs(alias string) joinSet[Q] {
	return joinSet[Q]{
		InnerJoin: j.InnerJoin.aliasedAs(alias),
		LeftJoin:  j.LeftJoin.aliasedAs(alias),
		RightJoin: j.RightJoin.aliasedAs(alias),
	}
}

type joins[Q dialect.Joinable] struct {
	Sessions joinSet[sessionJoins[Q]]
	Teams    joinSet[teamJoins[Q]]
	Users    joinSet[userJoins[Q]]
}

func buildJoinSet[Q interface{ aliasedAs(string) Q }, C any, F func(C, string) Q](c C, f F) joinSet[Q] {
	return joinSet[Q]{
		InnerJoin: f(c, clause.InnerJoin),
		LeftJoin:  f(c, clause.LeftJoin),
		RightJoin: f(c, clause.RightJoin),
	}
}

func getJoins[Q dialect.Joinable]() joins[Q] {
	return joins[Q]{
		Sessions: buildJoinSet[sessionJoins[Q]](SessionColumns, buildSessionJoins),
		Teams:    buildJoinSet[teamJoins[Q]](TeamColumns, buildTeamJoins),
		Users:    buildJoinSet[userJoins[Q]](UserColumns, buildUserJoins),
	}
}

type modAs[Q any, C interface{ AliasedAs(string) C }] struct {
	c C
	f func(C) bob.Mod[Q]
}

func (m modAs[Q, C]) Apply(q Q) {
	m.f(m.c).Apply(q)
}

func (m modAs[Q, C]) AliasedAs(alias string) bob.Mod[Q] {
	m.c = m.c.AliasedAs(alias)
	return m
}

func randInt() int64 {
	out := int64(new(maphash.Hash).Sum64())

	if out < 0 {
		return -out % 10000
	}

	return out % 10000
}

// ErrUniqueConstraint captures all unique constraint errors by explicitly leaving `s` empty.
var ErrUniqueConstraint = &UniqueConstraintError{s: ""}

type UniqueConstraintError struct {
	// s is a string uniquely identifying the constraint in the raw error message returned from the database.
	s string
}

func (e *UniqueConstraintError) Error() string {
	return e.s
}

func (e *UniqueConstraintError) Is(target error) bool {
	err, ok := target.(*mysqlDriver.MySQLError)
	if !ok {
		return false
	}
	return err.Number == 1062 && strings.Contains(err.Message, e.s)
}
