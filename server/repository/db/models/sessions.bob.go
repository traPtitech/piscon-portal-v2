// Code generated by BobGen mysql v0.33.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/dm"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Session is an object representing the database table.
type Session struct {
	ID        string    `db:"id,pk" `
	UserID    string    `db:"user_id" `
	CreatedAt time.Time `db:"created_at" `
	ExpiredAt time.Time `db:"expired_at" `

	R sessionR `db:"-" `
}

// SessionSlice is an alias for a slice of pointers to Session.
// This should almost always be used instead of []*Session.
type SessionSlice []*Session

// Sessions contains methods to work with the sessions table
var Sessions = mysql.NewTablex[*Session, SessionSlice, *SessionSetter]("sessions", []string{"id"})

// SessionsQuery is a query on the sessions table
type SessionsQuery = *mysql.ViewQuery[*Session, SessionSlice]

// sessionR is where relationships are stored.
type sessionR struct {
	User *User // sessions_ibfk_1
}

type sessionColumnNames struct {
	ID        string
	UserID    string
	CreatedAt string
	ExpiredAt string
}

var SessionColumns = buildSessionColumns("sessions")

type sessionColumns struct {
	tableAlias string
	ID         mysql.Expression
	UserID     mysql.Expression
	CreatedAt  mysql.Expression
	ExpiredAt  mysql.Expression
}

func (c sessionColumns) Alias() string {
	return c.tableAlias
}

func (sessionColumns) AliasedAs(alias string) sessionColumns {
	return buildSessionColumns(alias)
}

func buildSessionColumns(alias string) sessionColumns {
	return sessionColumns{
		tableAlias: alias,
		ID:         mysql.Quote(alias, "id"),
		UserID:     mysql.Quote(alias, "user_id"),
		CreatedAt:  mysql.Quote(alias, "created_at"),
		ExpiredAt:  mysql.Quote(alias, "expired_at"),
	}
}

type sessionWhere[Q mysql.Filterable] struct {
	ID        mysql.WhereMod[Q, string]
	UserID    mysql.WhereMod[Q, string]
	CreatedAt mysql.WhereMod[Q, time.Time]
	ExpiredAt mysql.WhereMod[Q, time.Time]
}

func (sessionWhere[Q]) AliasedAs(alias string) sessionWhere[Q] {
	return buildSessionWhere[Q](buildSessionColumns(alias))
}

func buildSessionWhere[Q mysql.Filterable](cols sessionColumns) sessionWhere[Q] {
	return sessionWhere[Q]{
		ID:        mysql.Where[Q, string](cols.ID),
		UserID:    mysql.Where[Q, string](cols.UserID),
		CreatedAt: mysql.Where[Q, time.Time](cols.CreatedAt),
		ExpiredAt: mysql.Where[Q, time.Time](cols.ExpiredAt),
	}
}

var SessionErrors = &sessionErrors{
	ErrUniquePrimary: &UniqueConstraintError{s: "PRIMARY"},
}

type sessionErrors struct {
	ErrUniquePrimary *UniqueConstraintError
}

// SessionSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type SessionSetter struct {
	ID        omit.Val[string]    `db:"id,pk" `
	UserID    omit.Val[string]    `db:"user_id" `
	CreatedAt omit.Val[time.Time] `db:"created_at" `
	ExpiredAt omit.Val[time.Time] `db:"expired_at" `
}

func (s SessionSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.ExpiredAt.IsUnset() {
		vals = append(vals, "expired_at")
	}

	return vals
}

func (s SessionSetter) Overwrite(t *Session) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.ExpiredAt.IsUnset() {
		t.ExpiredAt, _ = s.ExpiredAt.Get()
	}
}

func (s *SessionSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Sessions.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(
		bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.ID.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.ID).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.UserID.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.UserID).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.CreatedAt.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.CreatedAt).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.ExpiredAt.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.ExpiredAt).WriteSQL(ctx, w, d, start)
		}))
}

func (s SessionSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions("sessions")...)
}

func (s SessionSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "user_id")...),
			mysql.Arg(s.UserID),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "created_at")...),
			mysql.Arg(s.CreatedAt),
		}})
	}

	if !s.ExpiredAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "expired_at")...),
			mysql.Arg(s.ExpiredAt),
		}})
	}

	return exprs
}

// FindSession retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindSession(ctx context.Context, exec bob.Executor, IDPK string, cols ...string) (*Session, error) {
	if len(cols) == 0 {
		return Sessions.Query(
			SelectWhere.Sessions.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Sessions.Query(
		SelectWhere.Sessions.ID.EQ(IDPK),
		sm.Columns(Sessions.Columns().Only(cols...)),
	).One(ctx, exec)
}

// SessionExists checks the presence of a single record by primary key
func SessionExists(ctx context.Context, exec bob.Executor, IDPK string) (bool, error) {
	return Sessions.Query(
		SelectWhere.Sessions.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Session is retrieved from the database
func (o *Session) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Sessions.AfterSelectHooks.RunHooks(ctx, exec, SessionSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Sessions.AfterInsertHooks.RunHooks(ctx, exec, SessionSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Sessions.AfterUpdateHooks.RunHooks(ctx, exec, SessionSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Sessions.AfterDeleteHooks.RunHooks(ctx, exec, SessionSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Session
func (o *Session) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

func (o *Session) pkEQ() dialect.Expression {
	return mysql.Quote("sessions", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Session
func (o *Session) Update(ctx context.Context, exec bob.Executor, s *SessionSetter) error {
	_, err := Sessions.Update(s.UpdateMod(), um.Where(o.pkEQ())).Exec(ctx, exec)
	if err != nil {
		return err
	}

	s.Overwrite(o)

	return nil
}

// Delete deletes a single Session record with an executor
func (o *Session) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Sessions.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Session using the executor
func (o *Session) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Sessions.Query(
		SelectWhere.Sessions.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after SessionSlice is retrieved from the database
func (o SessionSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Sessions.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Sessions.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Sessions.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Sessions.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o SessionSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return mysql.Raw("NULL")
	}

	return mysql.Quote("sessions", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o SessionSlice) copyMatchingRows(from ...*Session) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o SessionSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Sessions.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Session:
				o.copyMatchingRows(retrieved)
			case []*Session:
				o.copyMatchingRows(retrieved...)
			case SessionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Session or a slice of Session
				// then run the AfterUpdateHooks on the slice
				_, err = Sessions.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o SessionSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Sessions.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Session:
				o.copyMatchingRows(retrieved)
			case []*Session:
				o.copyMatchingRows(retrieved...)
			case SessionSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Session or a slice of Session
				// then run the AfterDeleteHooks on the slice
				_, err = Sessions.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o SessionSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals SessionSetter) error {
	_, err := Sessions.Update(vals.UpdateMod(), o.UpdateMod()).Exec(ctx, exec)

	for i := range o {
		vals.Overwrite(o[i])
	}

	return err
}

func (o SessionSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Sessions.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o SessionSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Sessions.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type sessionJoins[Q dialect.Joinable] struct {
	typ  string
	User func(context.Context) modAs[Q, userColumns]
}

func (j sessionJoins[Q]) aliasedAs(alias string) sessionJoins[Q] {
	return buildSessionJoins[Q](buildSessionColumns(alias), j.typ)
}

func buildSessionJoins[Q dialect.Joinable](cols sessionColumns, typ string) sessionJoins[Q] {
	return sessionJoins[Q]{
		typ:  typ,
		User: sessionsJoinUser[Q](cols, typ),
	}
}

func sessionsJoinUser[Q dialect.Joinable](from sessionColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// User starts a query for related objects on users
func (o *Session) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(mysql.Arg(o.UserID))),
	)...)
}

func (os SessionSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(mysql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *Session) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("session cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Sessions = SessionSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("session has no relationship %q", name)
	}
}

func PreloadSessionUser(opts ...mysql.PreloadOption) mysql.Preloader {
	return mysql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.Sessions,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.Sessions.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadSessionUser(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadSessionUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load SessionUser", retrieved)
		}

		err := loader.LoadSessionUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadSessionUser loads the session's User into the .R struct
func (o *Session) LoadSessionUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Sessions = SessionSlice{o}

	o.R.User = related
	return nil
}

// LoadSessionUser loads the session's User into the .R struct
func (os SessionSlice) LoadSessionUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.Sessions = append(rel.R.Sessions, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachSessionUser0(ctx context.Context, exec bob.Executor, count int, session0 *Session, user1 *User) (*Session, error) {
	setter := &SessionSetter{
		UserID: omit.From(user1.ID),
	}

	err := session0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachSessionUser0: %w", err)
	}

	return session0, nil
}

func (session0 *Session) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachSessionUser0(ctx, exec, 1, session0, user1)
	if err != nil {
		return err
	}

	session0.R.User = user1

	user1.R.Sessions = append(user1.R.Sessions, session0)

	return nil
}

func (session0 *Session) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachSessionUser0(ctx, exec, 1, session0, user1)
	if err != nil {
		return err
	}

	session0.R.User = user1

	user1.R.Sessions = append(user1.R.Sessions, session0)

	return nil
}
