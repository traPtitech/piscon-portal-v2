// Code generated by BobGen mysql v0.33.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/dm"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// BenchmarkLog is an object representing the database table.
type BenchmarkLog struct {
	BenchmarkID string `db:"benchmark_id,pk" `
	UserLog     string `db:"user_log" `
	AdminLog    string `db:"admin_log" `

	R benchmarkLogR `db:"-" `
}

// BenchmarkLogSlice is an alias for a slice of pointers to BenchmarkLog.
// This should almost always be used instead of []*BenchmarkLog.
type BenchmarkLogSlice []*BenchmarkLog

// BenchmarkLogs contains methods to work with the benchmark_logs table
var BenchmarkLogs = mysql.NewTablex[*BenchmarkLog, BenchmarkLogSlice, *BenchmarkLogSetter]("benchmark_logs", []string{"benchmark_id"})

// BenchmarkLogsQuery is a query on the benchmark_logs table
type BenchmarkLogsQuery = *mysql.ViewQuery[*BenchmarkLog, BenchmarkLogSlice]

// benchmarkLogR is where relationships are stored.
type benchmarkLogR struct {
	Benchmark *Benchmark // benchmark_logs_ibfk_1
}

type benchmarkLogColumnNames struct {
	BenchmarkID string
	UserLog     string
	AdminLog    string
}

var BenchmarkLogColumns = buildBenchmarkLogColumns("benchmark_logs")

type benchmarkLogColumns struct {
	tableAlias  string
	BenchmarkID mysql.Expression
	UserLog     mysql.Expression
	AdminLog    mysql.Expression
}

func (c benchmarkLogColumns) Alias() string {
	return c.tableAlias
}

func (benchmarkLogColumns) AliasedAs(alias string) benchmarkLogColumns {
	return buildBenchmarkLogColumns(alias)
}

func buildBenchmarkLogColumns(alias string) benchmarkLogColumns {
	return benchmarkLogColumns{
		tableAlias:  alias,
		BenchmarkID: mysql.Quote(alias, "benchmark_id"),
		UserLog:     mysql.Quote(alias, "user_log"),
		AdminLog:    mysql.Quote(alias, "admin_log"),
	}
}

type benchmarkLogWhere[Q mysql.Filterable] struct {
	BenchmarkID mysql.WhereMod[Q, string]
	UserLog     mysql.WhereMod[Q, string]
	AdminLog    mysql.WhereMod[Q, string]
}

func (benchmarkLogWhere[Q]) AliasedAs(alias string) benchmarkLogWhere[Q] {
	return buildBenchmarkLogWhere[Q](buildBenchmarkLogColumns(alias))
}

func buildBenchmarkLogWhere[Q mysql.Filterable](cols benchmarkLogColumns) benchmarkLogWhere[Q] {
	return benchmarkLogWhere[Q]{
		BenchmarkID: mysql.Where[Q, string](cols.BenchmarkID),
		UserLog:     mysql.Where[Q, string](cols.UserLog),
		AdminLog:    mysql.Where[Q, string](cols.AdminLog),
	}
}

var BenchmarkLogErrors = &benchmarkLogErrors{
	ErrUniquePrimary: &UniqueConstraintError{s: "PRIMARY"},
}

type benchmarkLogErrors struct {
	ErrUniquePrimary *UniqueConstraintError
}

// BenchmarkLogSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type BenchmarkLogSetter struct {
	BenchmarkID omit.Val[string] `db:"benchmark_id,pk" `
	UserLog     omit.Val[string] `db:"user_log" `
	AdminLog    omit.Val[string] `db:"admin_log" `
}

func (s BenchmarkLogSetter) SetColumns() []string {
	vals := make([]string, 0, 3)
	if !s.BenchmarkID.IsUnset() {
		vals = append(vals, "benchmark_id")
	}

	if !s.UserLog.IsUnset() {
		vals = append(vals, "user_log")
	}

	if !s.AdminLog.IsUnset() {
		vals = append(vals, "admin_log")
	}

	return vals
}

func (s BenchmarkLogSetter) Overwrite(t *BenchmarkLog) {
	if !s.BenchmarkID.IsUnset() {
		t.BenchmarkID, _ = s.BenchmarkID.Get()
	}
	if !s.UserLog.IsUnset() {
		t.UserLog, _ = s.UserLog.Get()
	}
	if !s.AdminLog.IsUnset() {
		t.AdminLog, _ = s.AdminLog.Get()
	}
}

func (s *BenchmarkLogSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return BenchmarkLogs.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(
		bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.BenchmarkID.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.BenchmarkID).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.UserLog.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.UserLog).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.AdminLog.IsUnset() {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.AdminLog).WriteSQL(ctx, w, d, start)
		}))
}

func (s BenchmarkLogSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions("benchmark_logs")...)
}

func (s BenchmarkLogSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 3)

	if !s.BenchmarkID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "benchmark_id")...),
			mysql.Arg(s.BenchmarkID),
		}})
	}

	if !s.UserLog.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "user_log")...),
			mysql.Arg(s.UserLog),
		}})
	}

	if !s.AdminLog.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "admin_log")...),
			mysql.Arg(s.AdminLog),
		}})
	}

	return exprs
}

// FindBenchmarkLog retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindBenchmarkLog(ctx context.Context, exec bob.Executor, BenchmarkIDPK string, cols ...string) (*BenchmarkLog, error) {
	if len(cols) == 0 {
		return BenchmarkLogs.Query(
			SelectWhere.BenchmarkLogs.BenchmarkID.EQ(BenchmarkIDPK),
		).One(ctx, exec)
	}

	return BenchmarkLogs.Query(
		SelectWhere.BenchmarkLogs.BenchmarkID.EQ(BenchmarkIDPK),
		sm.Columns(BenchmarkLogs.Columns().Only(cols...)),
	).One(ctx, exec)
}

// BenchmarkLogExists checks the presence of a single record by primary key
func BenchmarkLogExists(ctx context.Context, exec bob.Executor, BenchmarkIDPK string) (bool, error) {
	return BenchmarkLogs.Query(
		SelectWhere.BenchmarkLogs.BenchmarkID.EQ(BenchmarkIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after BenchmarkLog is retrieved from the database
func (o *BenchmarkLog) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = BenchmarkLogs.AfterSelectHooks.RunHooks(ctx, exec, BenchmarkLogSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = BenchmarkLogs.AfterInsertHooks.RunHooks(ctx, exec, BenchmarkLogSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = BenchmarkLogs.AfterUpdateHooks.RunHooks(ctx, exec, BenchmarkLogSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = BenchmarkLogs.AfterDeleteHooks.RunHooks(ctx, exec, BenchmarkLogSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the BenchmarkLog
func (o *BenchmarkLog) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.BenchmarkID)
}

func (o *BenchmarkLog) pkEQ() dialect.Expression {
	return mysql.Quote("benchmark_logs", "benchmark_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the BenchmarkLog
func (o *BenchmarkLog) Update(ctx context.Context, exec bob.Executor, s *BenchmarkLogSetter) error {
	_, err := BenchmarkLogs.Update(s.UpdateMod(), um.Where(o.pkEQ())).Exec(ctx, exec)
	if err != nil {
		return err
	}

	s.Overwrite(o)

	return nil
}

// Delete deletes a single BenchmarkLog record with an executor
func (o *BenchmarkLog) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := BenchmarkLogs.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the BenchmarkLog using the executor
func (o *BenchmarkLog) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := BenchmarkLogs.Query(
		SelectWhere.BenchmarkLogs.BenchmarkID.EQ(o.BenchmarkID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after BenchmarkLogSlice is retrieved from the database
func (o BenchmarkLogSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = BenchmarkLogs.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = BenchmarkLogs.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = BenchmarkLogs.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = BenchmarkLogs.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o BenchmarkLogSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return mysql.Raw("NULL")
	}

	return mysql.Quote("benchmark_logs", "benchmark_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o BenchmarkLogSlice) copyMatchingRows(from ...*BenchmarkLog) {
	for i, old := range o {
		for _, new := range from {
			if new.BenchmarkID != old.BenchmarkID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o BenchmarkLogSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return BenchmarkLogs.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *BenchmarkLog:
				o.copyMatchingRows(retrieved)
			case []*BenchmarkLog:
				o.copyMatchingRows(retrieved...)
			case BenchmarkLogSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a BenchmarkLog or a slice of BenchmarkLog
				// then run the AfterUpdateHooks on the slice
				_, err = BenchmarkLogs.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o BenchmarkLogSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return BenchmarkLogs.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *BenchmarkLog:
				o.copyMatchingRows(retrieved)
			case []*BenchmarkLog:
				o.copyMatchingRows(retrieved...)
			case BenchmarkLogSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a BenchmarkLog or a slice of BenchmarkLog
				// then run the AfterDeleteHooks on the slice
				_, err = BenchmarkLogs.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o BenchmarkLogSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals BenchmarkLogSetter) error {
	_, err := BenchmarkLogs.Update(vals.UpdateMod(), o.UpdateMod()).Exec(ctx, exec)

	for i := range o {
		vals.Overwrite(o[i])
	}

	return err
}

func (o BenchmarkLogSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := BenchmarkLogs.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o BenchmarkLogSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := BenchmarkLogs.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type benchmarkLogJoins[Q dialect.Joinable] struct {
	typ       string
	Benchmark func(context.Context) modAs[Q, benchmarkColumns]
}

func (j benchmarkLogJoins[Q]) aliasedAs(alias string) benchmarkLogJoins[Q] {
	return buildBenchmarkLogJoins[Q](buildBenchmarkLogColumns(alias), j.typ)
}

func buildBenchmarkLogJoins[Q dialect.Joinable](cols benchmarkLogColumns, typ string) benchmarkLogJoins[Q] {
	return benchmarkLogJoins[Q]{
		typ:       typ,
		Benchmark: benchmarkLogsJoinBenchmark[Q](cols, typ),
	}
}

func benchmarkLogsJoinBenchmark[Q dialect.Joinable](from benchmarkLogColumns, typ string) func(context.Context) modAs[Q, benchmarkColumns] {
	return func(ctx context.Context) modAs[Q, benchmarkColumns] {
		return modAs[Q, benchmarkColumns]{
			c: BenchmarkColumns,
			f: func(to benchmarkColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Benchmarks.Name().As(to.Alias())).On(
						to.ID.EQ(from.BenchmarkID),
					))
				}

				return mods
			},
		}
	}
}

// Benchmark starts a query for related objects on benchmarks
func (o *BenchmarkLog) Benchmark(mods ...bob.Mod[*dialect.SelectQuery]) BenchmarksQuery {
	return Benchmarks.Query(append(mods,
		sm.Where(BenchmarkColumns.ID.EQ(mysql.Arg(o.BenchmarkID))),
	)...)
}

func (os BenchmarkLogSlice) Benchmark(mods ...bob.Mod[*dialect.SelectQuery]) BenchmarksQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.BenchmarkID)
	}

	return Benchmarks.Query(append(mods,
		sm.Where(mysql.Group(BenchmarkColumns.ID).In(PKArgs...)),
	)...)
}

func (o *BenchmarkLog) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Benchmark":
		rel, ok := retrieved.(*Benchmark)
		if !ok {
			return fmt.Errorf("benchmarkLog cannot load %T as %q", retrieved, name)
		}

		o.R.Benchmark = rel

		if rel != nil {
			rel.R.BenchmarkLog = o
		}
		return nil
	default:
		return fmt.Errorf("benchmarkLog has no relationship %q", name)
	}
}

func PreloadBenchmarkLogBenchmark(opts ...mysql.PreloadOption) mysql.Preloader {
	return mysql.Preload[*Benchmark, BenchmarkSlice](orm.Relationship{
		Name: "Benchmark",
		Sides: []orm.RelSide{
			{
				From: TableNames.BenchmarkLogs,
				To:   TableNames.Benchmarks,
				FromColumns: []string{
					ColumnNames.BenchmarkLogs.BenchmarkID,
				},
				ToColumns: []string{
					ColumnNames.Benchmarks.ID,
				},
			},
		},
	}, Benchmarks.Columns().Names(), opts...)
}

func ThenLoadBenchmarkLogBenchmark(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBenchmarkLogBenchmark(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BenchmarkLogBenchmark", retrieved)
		}

		err := loader.LoadBenchmarkLogBenchmark(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBenchmarkLogBenchmark loads the benchmarkLog's Benchmark into the .R struct
func (o *BenchmarkLog) LoadBenchmarkLogBenchmark(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Benchmark = nil

	related, err := o.Benchmark(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.BenchmarkLog = o

	o.R.Benchmark = related
	return nil
}

// LoadBenchmarkLogBenchmark loads the benchmarkLog's Benchmark into the .R struct
func (os BenchmarkLogSlice) LoadBenchmarkLogBenchmark(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	benchmarks, err := os.Benchmark(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range benchmarks {
			if o.BenchmarkID != rel.ID {
				continue
			}

			rel.R.BenchmarkLog = o

			o.R.Benchmark = rel
			break
		}
	}

	return nil
}

func attachBenchmarkLogBenchmark0(ctx context.Context, exec bob.Executor, count int, benchmarkLog0 *BenchmarkLog, benchmark1 *Benchmark) (*BenchmarkLog, error) {
	setter := &BenchmarkLogSetter{
		BenchmarkID: omit.From(benchmark1.ID),
	}

	err := benchmarkLog0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachBenchmarkLogBenchmark0: %w", err)
	}

	return benchmarkLog0, nil
}

func (benchmarkLog0 *BenchmarkLog) InsertBenchmark(ctx context.Context, exec bob.Executor, related *BenchmarkSetter) error {
	benchmark1, err := Benchmarks.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachBenchmarkLogBenchmark0(ctx, exec, 1, benchmarkLog0, benchmark1)
	if err != nil {
		return err
	}

	benchmarkLog0.R.Benchmark = benchmark1

	benchmark1.R.BenchmarkLog = benchmarkLog0

	return nil
}

func (benchmarkLog0 *BenchmarkLog) AttachBenchmark(ctx context.Context, exec bob.Executor, benchmark1 *Benchmark) error {
	var err error

	_, err = attachBenchmarkLogBenchmark0(ctx, exec, 1, benchmarkLog0, benchmark1)
	if err != nil {
		return err
	}

	benchmarkLog0.R.Benchmark = benchmark1

	benchmark1.R.BenchmarkLog = benchmarkLog0

	return nil
}
