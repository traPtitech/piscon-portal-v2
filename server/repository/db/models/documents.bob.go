// Code generated by BobGen mysql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/dm"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
)

// Document is an object representing the database table.
type Document struct {
	ID        string    `db:"id,pk" `
	Body      string    `db:"body" `
	CreatedAt time.Time `db:"created_at" `
}

// DocumentSlice is an alias for a slice of pointers to Document.
// This should almost always be used instead of []*Document.
type DocumentSlice []*Document

// Documents contains methods to work with the documents table
var Documents = mysql.NewTablex[*Document, DocumentSlice, *DocumentSetter]("documents", []string{"id"})

// DocumentsQuery is a query on the documents table
type DocumentsQuery = *mysql.ViewQuery[*Document, DocumentSlice]

type documentColumnNames struct {
	ID        string
	Body      string
	CreatedAt string
}

var DocumentColumns = buildDocumentColumns("documents")

type documentColumns struct {
	tableAlias string
	ID         mysql.Expression
	Body       mysql.Expression
	CreatedAt  mysql.Expression
}

func (c documentColumns) Alias() string {
	return c.tableAlias
}

func (documentColumns) AliasedAs(alias string) documentColumns {
	return buildDocumentColumns(alias)
}

func buildDocumentColumns(alias string) documentColumns {
	return documentColumns{
		tableAlias: alias,
		ID:         mysql.Quote(alias, "id"),
		Body:       mysql.Quote(alias, "body"),
		CreatedAt:  mysql.Quote(alias, "created_at"),
	}
}

type documentWhere[Q mysql.Filterable] struct {
	ID        mysql.WhereMod[Q, string]
	Body      mysql.WhereMod[Q, string]
	CreatedAt mysql.WhereMod[Q, time.Time]
}

func (documentWhere[Q]) AliasedAs(alias string) documentWhere[Q] {
	return buildDocumentWhere[Q](buildDocumentColumns(alias))
}

func buildDocumentWhere[Q mysql.Filterable](cols documentColumns) documentWhere[Q] {
	return documentWhere[Q]{
		ID:        mysql.Where[Q, string](cols.ID),
		Body:      mysql.Where[Q, string](cols.Body),
		CreatedAt: mysql.Where[Q, time.Time](cols.CreatedAt),
	}
}

var DocumentErrors = &documentErrors{
	ErrUniquePrimary: &UniqueConstraintError{
		schema:  "",
		table:   "documents",
		columns: []string{"id"},
		s:       "PRIMARY",
	},
}

type documentErrors struct {
	ErrUniquePrimary *UniqueConstraintError
}

// DocumentSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type DocumentSetter struct {
	ID        *string    `db:"id,pk" `
	Body      *string    `db:"body" `
	CreatedAt *time.Time `db:"created_at" `
}

func (s DocumentSetter) SetColumns() []string {
	vals := make([]string, 0, 3)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.Body != nil {
		vals = append(vals, "body")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	return vals
}

func (s DocumentSetter) Overwrite(t *Document) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.Body != nil {
		t.Body = *s.Body
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
}

func (s *DocumentSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Documents.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(
		bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.ID == nil {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.ID).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.Body == nil {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.Body).WriteSQL(ctx, w, d, start)
		}), bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
			if s.CreatedAt == nil {
				return mysql.Raw("DEFAULT").WriteSQL(ctx, w, d, start)
			}
			return mysql.Arg(s.CreatedAt).WriteSQL(ctx, w, d, start)
		}))
}

func (s DocumentSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions("documents")...)
}

func (s DocumentSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 3)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if s.Body != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "body")...),
			mysql.Arg(s.Body),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "created_at")...),
			mysql.Arg(s.CreatedAt),
		}})
	}

	return exprs
}

// FindDocument retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindDocument(ctx context.Context, exec bob.Executor, IDPK string, cols ...string) (*Document, error) {
	if len(cols) == 0 {
		return Documents.Query(
			SelectWhere.Documents.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Documents.Query(
		SelectWhere.Documents.ID.EQ(IDPK),
		sm.Columns(Documents.Columns().Only(cols...)),
	).One(ctx, exec)
}

// DocumentExists checks the presence of a single record by primary key
func DocumentExists(ctx context.Context, exec bob.Executor, IDPK string) (bool, error) {
	return Documents.Query(
		SelectWhere.Documents.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Document is retrieved from the database
func (o *Document) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Documents.AfterSelectHooks.RunHooks(ctx, exec, DocumentSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Documents.AfterInsertHooks.RunHooks(ctx, exec, DocumentSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Documents.AfterUpdateHooks.RunHooks(ctx, exec, DocumentSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Documents.AfterDeleteHooks.RunHooks(ctx, exec, DocumentSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Document
func (o *Document) primaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

func (o *Document) pkEQ() dialect.Expression {
	return mysql.Quote("documents", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Document
func (o *Document) Update(ctx context.Context, exec bob.Executor, s *DocumentSetter) error {
	_, err := Documents.Update(s.UpdateMod(), um.Where(o.pkEQ())).Exec(ctx, exec)
	if err != nil {
		return err
	}

	s.Overwrite(o)

	return nil
}

// Delete deletes a single Document record with an executor
func (o *Document) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Documents.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Document using the executor
func (o *Document) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Documents.Query(
		SelectWhere.Documents.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after DocumentSlice is retrieved from the database
func (o DocumentSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Documents.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Documents.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Documents.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Documents.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o DocumentSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return mysql.Raw("NULL")
	}

	return mysql.Quote("documents", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o DocumentSlice) copyMatchingRows(from ...*Document) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o DocumentSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Documents.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Document:
				o.copyMatchingRows(retrieved)
			case []*Document:
				o.copyMatchingRows(retrieved...)
			case DocumentSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Document or a slice of Document
				// then run the AfterUpdateHooks on the slice
				_, err = Documents.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o DocumentSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Documents.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Document:
				o.copyMatchingRows(retrieved)
			case []*Document:
				o.copyMatchingRows(retrieved...)
			case DocumentSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Document or a slice of Document
				// then run the AfterDeleteHooks on the slice
				_, err = Documents.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o DocumentSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals DocumentSetter) error {
	_, err := Documents.Update(vals.UpdateMod(), o.UpdateMod()).Exec(ctx, exec)

	for i := range o {
		vals.Overwrite(o[i])
	}

	return err
}

func (o DocumentSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Documents.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o DocumentSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Documents.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
