// Code generated by BobGen mysql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Benchmarks = Table[
	benchmarkColumns,
	benchmarkIndexes,
	benchmarkForeignKeys,
	benchmarkUniques,
	benchmarkChecks,
]{
	Schema: "",
	Name:   "benchmarks",
	Columns: benchmarkColumns{
		ID: column{
			Name:      "id",
			DBType:    "varchar(36)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		InstanceID: column{
			Name:      "instance_id",
			DBType:    "varchar(36)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		TeamID: column{
			Name:      "team_id",
			DBType:    "varchar(36)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UserID: column{
			Name:      "user_id",
			DBType:    "varchar(36)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Status: column{
			Name:      "status",
			DBType:    "enum('waiting','readying','running','finished')",
			Default:   "waiting",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedAt: column{
			Name:      "created_at",
			DBType:    "timestamp",
			Default:   "CURRENT_TIMESTAMP",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		StartedAt: column{
			Name:      "started_at",
			DBType:    "timestamp",
			Default:   "",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		FinishedAt: column{
			Name:      "finished_at",
			DBType:    "timestamp",
			Default:   "",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Score: column{
			Name:      "score",
			DBType:    "bigint",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Result: column{
			Name:      "result",
			DBType:    "enum('passed','failed','error')",
			Default:   "",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		ErrorMessage: column{
			Name:      "error_message",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: benchmarkIndexes{
		InstanceID: index{
			Type: "BTREE",
			Name: "instance_id",
			Columns: []indexColumn{
				{
					Name:         "instance_id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  false,
			Comment: "",
		},
		PRIMARY: index{
			Type: "BTREE",
			Name: "PRIMARY",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
		},
	},
	PrimaryKey: &constraint{
		Name:    "PRIMARY",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: benchmarkForeignKeys{
		BenchmarksIbfk1: foreignKey{
			constraint: constraint{
				Name:    "benchmarks_ibfk_1",
				Columns: []string{"instance_id"},
				Comment: "",
			},
			ForeignTable:   "instances",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type benchmarkColumns struct {
	ID           column
	InstanceID   column
	TeamID       column
	UserID       column
	Status       column
	CreatedAt    column
	StartedAt    column
	FinishedAt   column
	Score        column
	Result       column
	ErrorMessage column
}

func (c benchmarkColumns) AsSlice() []column {
	return []column{
		c.ID, c.InstanceID, c.TeamID, c.UserID, c.Status, c.CreatedAt, c.StartedAt, c.FinishedAt, c.Score, c.Result, c.ErrorMessage,
	}
}

type benchmarkIndexes struct {
	InstanceID index
	PRIMARY    index
}

func (i benchmarkIndexes) AsSlice() []index {
	return []index{
		i.InstanceID, i.PRIMARY,
	}
}

type benchmarkForeignKeys struct {
	BenchmarksIbfk1 foreignKey
}

func (f benchmarkForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.BenchmarksIbfk1,
	}
}

type benchmarkUniques struct{}

func (u benchmarkUniques) AsSlice() []constraint {
	return []constraint{}
}

type benchmarkChecks struct{}

func (c benchmarkChecks) AsSlice() []check {
	return []check{}
}
