// Code generated by BobGen mysql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var BenchmarkLogs = Table[
	benchmarkLogColumns,
	benchmarkLogIndexes,
	benchmarkLogForeignKeys,
	benchmarkLogUniques,
	benchmarkLogChecks,
]{
	Schema: "",
	Name:   "benchmark_logs",
	Columns: benchmarkLogColumns{
		BenchmarkID: column{
			Name:      "benchmark_id",
			DBType:    "varchar(36)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UserLog: column{
			Name:      "user_log",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		AdminLog: column{
			Name:      "admin_log",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: benchmarkLogIndexes{
		PRIMARY: index{
			Type: "BTREE",
			Name: "PRIMARY",
			Columns: []indexColumn{
				{
					Name:         "benchmark_id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
		},
	},
	PrimaryKey: &constraint{
		Name:    "PRIMARY",
		Columns: []string{"benchmark_id"},
		Comment: "",
	},
	ForeignKeys: benchmarkLogForeignKeys{
		BenchmarkLogsIbfk1: foreignKey{
			constraint: constraint{
				Name:    "benchmark_logs_ibfk_1",
				Columns: []string{"benchmark_id"},
				Comment: "",
			},
			ForeignTable:   "benchmarks",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type benchmarkLogColumns struct {
	BenchmarkID column
	UserLog     column
	AdminLog    column
}

func (c benchmarkLogColumns) AsSlice() []column {
	return []column{
		c.BenchmarkID, c.UserLog, c.AdminLog,
	}
}

type benchmarkLogIndexes struct {
	PRIMARY index
}

func (i benchmarkLogIndexes) AsSlice() []index {
	return []index{
		i.PRIMARY,
	}
}

type benchmarkLogForeignKeys struct {
	BenchmarkLogsIbfk1 foreignKey
}

func (f benchmarkLogForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.BenchmarkLogsIbfk1,
	}
}

type benchmarkLogUniques struct{}

func (u benchmarkLogUniques) AsSlice() []constraint {
	return []constraint{}
}

type benchmarkLogChecks struct{}

func (c benchmarkLogChecks) AsSlice() []check {
	return []check{}
}
