// Code generated by BobGen mysql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Users = Table[
	userColumns,
	userIndexes,
	userForeignKeys,
	userUniques,
	userChecks,
]{
	Schema: "",
	Name:   "users",
	Columns: userColumns{
		ID: column{
			Name:      "id",
			DBType:    "varchar(36)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "varchar(255)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		TeamID: column{
			Name:      "team_id",
			DBType:    "varchar(36)",
			Default:   "",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		IsAdmin: column{
			Name:      "is_admin",
			DBType:    "tinyint(1)",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: userIndexes{
		Name: index{
			Type: "BTREE",
			Name: "name",
			Columns: []indexColumn{
				{
					Name:         "name",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
		},
		PRIMARY: index{
			Type: "BTREE",
			Name: "PRIMARY",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
		},
		TeamID: index{
			Type: "BTREE",
			Name: "team_id",
			Columns: []indexColumn{
				{
					Name:         "team_id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  false,
			Comment: "",
		},
	},
	PrimaryKey: &constraint{
		Name:    "PRIMARY",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: userForeignKeys{
		UsersIbfk1: foreignKey{
			constraint: constraint{
				Name:    "users_ibfk_1",
				Columns: []string{"team_id"},
				Comment: "",
			},
			ForeignTable:   "teams",
			ForeignColumns: []string{"id"},
		},
	},
	Uniques: userUniques{
		Name: constraint{
			Name:    "name",
			Columns: []string{"name"},
			Comment: "",
		},
	},

	Comment: "",
}

type userColumns struct {
	ID      column
	Name    column
	TeamID  column
	IsAdmin column
}

func (c userColumns) AsSlice() []column {
	return []column{
		c.ID, c.Name, c.TeamID, c.IsAdmin,
	}
}

type userIndexes struct {
	Name    index
	PRIMARY index
	TeamID  index
}

func (i userIndexes) AsSlice() []index {
	return []index{
		i.Name, i.PRIMARY, i.TeamID,
	}
}

type userForeignKeys struct {
	UsersIbfk1 foreignKey
}

func (f userForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.UsersIbfk1,
	}
}

type userUniques struct {
	Name constraint
}

func (u userUniques) AsSlice() []constraint {
	return []constraint{
		u.Name,
	}
}

type userChecks struct{}

func (c userChecks) AsSlice() []check {
	return []check{}
}
