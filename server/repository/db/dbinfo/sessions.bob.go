// Code generated by BobGen mysql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Sessions = Table[
	sessionColumns,
	sessionIndexes,
	sessionForeignKeys,
	sessionUniques,
	sessionChecks,
]{
	Schema: "",
	Name:   "sessions",
	Columns: sessionColumns{
		ID: column{
			Name:      "id",
			DBType:    "varchar(50)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UserID: column{
			Name:      "user_id",
			DBType:    "varchar(36)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedAt: column{
			Name:      "created_at",
			DBType:    "timestamp",
			Default:   "CURRENT_TIMESTAMP",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		ExpiredAt: column{
			Name:      "expired_at",
			DBType:    "timestamp",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: sessionIndexes{
		PRIMARY: index{
			Type: "BTREE",
			Name: "PRIMARY",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
		},
		UserID: index{
			Type: "BTREE",
			Name: "user_id",
			Columns: []indexColumn{
				{
					Name:         "user_id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  false,
			Comment: "",
		},
	},
	PrimaryKey: &constraint{
		Name:    "PRIMARY",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: sessionForeignKeys{
		SessionsIbfk1: foreignKey{
			constraint: constraint{
				Name:    "sessions_ibfk_1",
				Columns: []string{"user_id"},
				Comment: "",
			},
			ForeignTable:   "users",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type sessionColumns struct {
	ID        column
	UserID    column
	CreatedAt column
	ExpiredAt column
}

func (c sessionColumns) AsSlice() []column {
	return []column{
		c.ID, c.UserID, c.CreatedAt, c.ExpiredAt,
	}
}

type sessionIndexes struct {
	PRIMARY index
	UserID  index
}

func (i sessionIndexes) AsSlice() []index {
	return []index{
		i.PRIMARY, i.UserID,
	}
}

type sessionForeignKeys struct {
	SessionsIbfk1 foreignKey
}

func (f sessionForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.SessionsIbfk1,
	}
}

type sessionUniques struct{}

func (u sessionUniques) AsSlice() []constraint {
	return []constraint{}
}

type sessionChecks struct{}

func (c sessionChecks) AsSlice() []check {
	return []check{}
}
