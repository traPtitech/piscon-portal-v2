// Code generated by BobGen mysql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var TeamGithubAccounts = Table[
	teamGithubAccountColumns,
	teamGithubAccountIndexes,
	teamGithubAccountForeignKeys,
	teamGithubAccountUniques,
	teamGithubAccountChecks,
]{
	Schema: "",
	Name:   "team_github_accounts",
	Columns: teamGithubAccountColumns{
		ID: column{
			Name:      "id",
			DBType:    "varchar(36)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		TeamID: column{
			Name:      "team_id",
			DBType:    "varchar(36)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		GithubID: column{
			Name:      "github_id",
			DBType:    "varchar(255)",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: teamGithubAccountIndexes{
		PRIMARY: index{
			Type: "BTREE",
			Name: "PRIMARY",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
		},
		TeamID: index{
			Type: "BTREE",
			Name: "team_id",
			Columns: []indexColumn{
				{
					Name:         "team_id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  false,
			Comment: "",
		},
	},
	PrimaryKey: &constraint{
		Name:    "PRIMARY",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: teamGithubAccountForeignKeys{
		TeamGithubAccountsIbfk1: foreignKey{
			constraint: constraint{
				Name:    "team_github_accounts_ibfk_1",
				Columns: []string{"team_id"},
				Comment: "",
			},
			ForeignTable:   "teams",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type teamGithubAccountColumns struct {
	ID       column
	TeamID   column
	GithubID column
}

func (c teamGithubAccountColumns) AsSlice() []column {
	return []column{
		c.ID, c.TeamID, c.GithubID,
	}
}

type teamGithubAccountIndexes struct {
	PRIMARY index
	TeamID  index
}

func (i teamGithubAccountIndexes) AsSlice() []index {
	return []index{
		i.PRIMARY, i.TeamID,
	}
}

type teamGithubAccountForeignKeys struct {
	TeamGithubAccountsIbfk1 foreignKey
}

func (f teamGithubAccountForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.TeamGithubAccountsIbfk1,
	}
}

type teamGithubAccountUniques struct{}

func (u teamGithubAccountUniques) AsSlice() []constraint {
	return []constraint{}
}

type teamGithubAccountChecks struct{}

func (c teamGithubAccountChecks) AsSlice() []check {
	return []check{}
}
