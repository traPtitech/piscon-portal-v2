// Code generated by MockGen. DO NOT EDIT.
// Source: traq.go
//
// Generated by this command:
//
//	mockgen -source=traq.go -destination=mock/traq.go -package=mock -typed=true
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	traq "github.com/traPtitech/piscon-portal-v2/server/services/traq"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetUsers mocks base method.
func (m *MockService) GetUsers(ctx context.Context) ([]traq.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]traq.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockServiceMockRecorder) GetUsers(ctx any) *MockServiceGetUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockService)(nil).GetUsers), ctx)
	return &MockServiceGetUsersCall{Call: call}
}

// MockServiceGetUsersCall wrap *gomock.Call
type MockServiceGetUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetUsersCall) Return(arg0 []traq.User, arg1 error) *MockServiceGetUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetUsersCall) Do(f func(context.Context) ([]traq.User, error)) *MockServiceGetUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetUsersCall) DoAndReturn(f func(context.Context) ([]traq.User, error)) *MockServiceGetUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
