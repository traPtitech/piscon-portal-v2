// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/service.go -package=mock -typed=true
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGitHubService is a mock of GitHubService interface.
type MockGitHubService struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubServiceMockRecorder
	isgomock struct{}
}

// MockGitHubServiceMockRecorder is the mock recorder for MockGitHubService.
type MockGitHubServiceMockRecorder struct {
	mock *MockGitHubService
}

// NewMockGitHubService creates a new mock instance.
func NewMockGitHubService(ctrl *gomock.Controller) *MockGitHubService {
	mock := &MockGitHubService{ctrl: ctrl}
	mock.recorder = &MockGitHubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubService) EXPECT() *MockGitHubServiceMockRecorder {
	return m.recorder
}

// GetSSHKeys mocks base method.
func (m *MockGitHubService) GetSSHKeys(ctx context.Context, githubIDs []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHKeys", ctx, githubIDs)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSHKeys indicates an expected call of GetSSHKeys.
func (mr *MockGitHubServiceMockRecorder) GetSSHKeys(ctx, githubIDs any) *MockGitHubServiceGetSSHKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHKeys", reflect.TypeOf((*MockGitHubService)(nil).GetSSHKeys), ctx, githubIDs)
	return &MockGitHubServiceGetSSHKeysCall{Call: call}
}

// MockGitHubServiceGetSSHKeysCall wrap *gomock.Call
type MockGitHubServiceGetSSHKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitHubServiceGetSSHKeysCall) Return(arg0 []string, arg1 error) *MockGitHubServiceGetSSHKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitHubServiceGetSSHKeysCall) Do(f func(context.Context, []string) ([]string, error)) *MockGitHubServiceGetSSHKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitHubServiceGetSSHKeysCall) DoAndReturn(f func(context.Context, []string) ([]string, error)) *MockGitHubServiceGetSSHKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
