// Code generated by BobGen mysql v0.29.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "github.com/traPtitech/piscon-portal-v2/server/models"
)

type UserMod interface {
	Apply(*UserTemplate)
}

type UserModFunc func(*UserTemplate)

func (f UserModFunc) Apply(n *UserTemplate) {
	f(n)
}

type UserModSlice []UserMod

func (mods UserModSlice) Apply(n *UserTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// UserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserTemplate struct {
	ID      func() string
	Name    func() string
	TeamID  func() null.Val[string]
	IsAdmin func() bool

	r userR
	f *Factory
}

type userR struct {
	Sessions []*userRSessionsR
	Team     *userRTeamR
}

type userRSessionsR struct {
	number int
	o      *SessionTemplate
}
type userRTeamR struct {
	o *TeamTemplate
}

// Apply mods to the UserTemplate
func (o *UserTemplate) Apply(mods ...UserMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.User
// this does nothing with the relationship templates
func (o UserTemplate) toModel() *models.User {
	m := &models.User{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.TeamID != nil {
		m.TeamID = o.TeamID()
	}
	if o.IsAdmin != nil {
		m.IsAdmin = o.IsAdmin()
	}

	return m
}

// toModels returns an models.UserSlice
// this does nothing with the relationship templates
func (o UserTemplate) toModels(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.User
// according to the relationships in the template. Nothing is inserted into the db
func (t UserTemplate) setModelRels(o *models.User) {
	if t.r.Sessions != nil {
		rel := models.SessionSlice{}
		for _, r := range t.r.Sessions {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.UserID = o.ID
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.Sessions = rel
	}

	if t.r.Team != nil {
		rel := t.r.Team.o.toModel()
		rel.R.Users = append(rel.R.Users, o)
		o.TeamID = null.From(rel.ID)
		o.R.Team = rel
	}
}

// BuildSetter returns an *models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildSetter() *models.UserSetter {
	m := &models.UserSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.TeamID != nil {
		m.TeamID = omitnull.FromNull(o.TeamID())
	}
	if o.IsAdmin != nil {
		m.IsAdmin = omit.From(o.IsAdmin())
	}

	return m
}

// BuildManySetter returns an []*models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildManySetter(number int) []*models.UserSetter {
	m := make([]*models.UserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.User
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.Create
func (o UserTemplate) Build() *models.User {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.CreateMany
func (o UserTemplate) BuildMany(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUser(m *models.UserSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random_string(nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.User
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.User) (context.Context, error) {
	var err error

	if o.r.Sessions != nil {
		for _, r := range o.r.Sessions {
			var rel0 models.SessionSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachSessions(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Team != nil {
		var rel1 *models.Team
		ctx, rel1, err = o.r.Team.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachTeam(ctx, exec, rel1)
		if err != nil {
			return ctx, err
		}
	}

	return ctx, err
}

// Create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.User, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.User {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.User {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.User, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUser(opt)

	m, err := models.Users.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserSlice, error) {
	var err error
	m := make(models.UserSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// User has methods that act as mods for the UserTemplate
var UserMods userMods

type userMods struct{}

func (m userMods) RandomizeAllColumns(f *faker.Faker) UserMod {
	return UserModSlice{
		UserMods.RandomID(f),
		UserMods.RandomName(f),
		UserMods.RandomTeamID(f),
		UserMods.RandomIsAdmin(f),
	}
}

// Set the model columns to this value
func (m userMods) ID(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) IDFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetID() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomID(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Name(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) NameFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m userMods) UnsetName() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomName(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) TeamID(val null.Val[string]) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.TeamID = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userMods) TeamIDFunc(f func() null.Val[string]) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.TeamID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetTeamID() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.TeamID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomTeamID(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.TeamID = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			if f.Bool() {
				return null.FromPtr[string](nil)
			}

			return null.From(random_string(f))
		}
	})
}

// Set the model columns to this value
func (m userMods) IsAdmin(val bool) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.IsAdmin = func() bool { return val }
	})
}

// Set the Column from the function
func (m userMods) IsAdminFunc(f func() bool) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.IsAdmin = f
	})
}

// Clear any values for the column
func (m userMods) UnsetIsAdmin() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.IsAdmin = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomIsAdmin(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.IsAdmin = func() bool {
			return random_bool(f)
		}
	})
}

func (m userMods) WithTeam(rel *TeamTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Team = &userRTeamR{
			o: rel,
		}
	})
}

func (m userMods) WithNewTeam(mods ...TeamMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewTeam(mods...)

		m.WithTeam(related).Apply(o)
	})
}

func (m userMods) WithoutTeam() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Team = nil
	})
}

func (m userMods) WithSessions(number int, related *SessionTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Sessions = []*userRSessionsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewSessions(number int, mods ...SessionMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewSession(mods...)
		m.WithSessions(number, related).Apply(o)
	})
}

func (m userMods) AddSessions(number int, related *SessionTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Sessions = append(o.r.Sessions, &userRSessionsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewSessions(number int, mods ...SessionMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewSession(mods...)
		m.AddSessions(number, related).Apply(o)
	})
}

func (m userMods) WithoutSessions() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Sessions = nil
	})
}
