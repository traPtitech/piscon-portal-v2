// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

type AdminAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *AdminAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *AdminAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// ベンチマークのスコア.
// Ref: #/components/schemas/BenchScore
type BenchScore struct {
	BenchmarkId OptBenchmarkId `json:"benchmarkId"`
	TeamId      TeamId         `json:"teamId"`
	Score       Score          `json:"score"`
	CreatedAt   CreatedAt      `json:"createdAt"`
}

// GetBenchmarkId returns the value of BenchmarkId.
func (s *BenchScore) GetBenchmarkId() OptBenchmarkId {
	return s.BenchmarkId
}

// GetTeamId returns the value of TeamId.
func (s *BenchScore) GetTeamId() TeamId {
	return s.TeamId
}

// GetScore returns the value of Score.
func (s *BenchScore) GetScore() Score {
	return s.Score
}

// GetCreatedAt returns the value of CreatedAt.
func (s *BenchScore) GetCreatedAt() CreatedAt {
	return s.CreatedAt
}

// SetBenchmarkId sets the value of BenchmarkId.
func (s *BenchScore) SetBenchmarkId(val OptBenchmarkId) {
	s.BenchmarkId = val
}

// SetTeamId sets the value of TeamId.
func (s *BenchScore) SetTeamId(val TeamId) {
	s.TeamId = val
}

// SetScore sets the value of Score.
func (s *BenchScore) SetScore(val Score) {
	s.Score = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *BenchScore) SetCreatedAt(val CreatedAt) {
	s.CreatedAt = val
}

// Merged schema.
// Ref: #/components/schemas/Benchmark
// Benchmark represents sum type.
type Benchmark struct {
	Type              BenchmarkType // switch on this field
	WaitingBenchmark  WaitingBenchmark
	RunningBenchmark  RunningBenchmark
	FinishedBenchmark FinishedBenchmark
}

// BenchmarkType is oneOf type of Benchmark.
type BenchmarkType string

// Possible values for BenchmarkType.
const (
	WaitingBenchmarkBenchmark  BenchmarkType = "WaitingBenchmark"
	RunningBenchmarkBenchmark  BenchmarkType = "RunningBenchmark"
	FinishedBenchmarkBenchmark BenchmarkType = "FinishedBenchmark"
)

// IsWaitingBenchmark reports whether Benchmark is WaitingBenchmark.
func (s Benchmark) IsWaitingBenchmark() bool { return s.Type == WaitingBenchmarkBenchmark }

// IsRunningBenchmark reports whether Benchmark is RunningBenchmark.
func (s Benchmark) IsRunningBenchmark() bool { return s.Type == RunningBenchmarkBenchmark }

// IsFinishedBenchmark reports whether Benchmark is FinishedBenchmark.
func (s Benchmark) IsFinishedBenchmark() bool { return s.Type == FinishedBenchmarkBenchmark }

// SetWaitingBenchmark sets Benchmark to WaitingBenchmark.
func (s *Benchmark) SetWaitingBenchmark(v WaitingBenchmark) {
	s.Type = WaitingBenchmarkBenchmark
	s.WaitingBenchmark = v
}

// GetWaitingBenchmark returns WaitingBenchmark and true boolean if Benchmark is WaitingBenchmark.
func (s Benchmark) GetWaitingBenchmark() (v WaitingBenchmark, ok bool) {
	if !s.IsWaitingBenchmark() {
		return v, false
	}
	return s.WaitingBenchmark, true
}

// NewWaitingBenchmarkBenchmark returns new Benchmark from WaitingBenchmark.
func NewWaitingBenchmarkBenchmark(v WaitingBenchmark) Benchmark {
	var s Benchmark
	s.SetWaitingBenchmark(v)
	return s
}

// SetRunningBenchmark sets Benchmark to RunningBenchmark.
func (s *Benchmark) SetRunningBenchmark(v RunningBenchmark) {
	s.Type = RunningBenchmarkBenchmark
	s.RunningBenchmark = v
}

// GetRunningBenchmark returns RunningBenchmark and true boolean if Benchmark is RunningBenchmark.
func (s Benchmark) GetRunningBenchmark() (v RunningBenchmark, ok bool) {
	if !s.IsRunningBenchmark() {
		return v, false
	}
	return s.RunningBenchmark, true
}

// NewRunningBenchmarkBenchmark returns new Benchmark from RunningBenchmark.
func NewRunningBenchmarkBenchmark(v RunningBenchmark) Benchmark {
	var s Benchmark
	s.SetRunningBenchmark(v)
	return s
}

// SetFinishedBenchmark sets Benchmark to FinishedBenchmark.
func (s *Benchmark) SetFinishedBenchmark(v FinishedBenchmark) {
	s.Type = FinishedBenchmarkBenchmark
	s.FinishedBenchmark = v
}

// GetFinishedBenchmark returns FinishedBenchmark and true boolean if Benchmark is FinishedBenchmark.
func (s Benchmark) GetFinishedBenchmark() (v FinishedBenchmark, ok bool) {
	if !s.IsFinishedBenchmark() {
		return v, false
	}
	return s.FinishedBenchmark, true
}

// NewFinishedBenchmarkBenchmark returns new Benchmark from FinishedBenchmark.
func NewFinishedBenchmarkBenchmark(v FinishedBenchmark) Benchmark {
	var s Benchmark
	s.SetFinishedBenchmark(v)
	return s
}

func (*Benchmark) getTeamBenchmarkResultRes() {}

// Merged schema.
// Ref: #/components/schemas/BenchmarkAdminResult
// BenchmarkAdminResult represents sum type.
type BenchmarkAdminResult struct {
	Type              BenchmarkAdminResultType // switch on this field
	WaitingBenchmark  WaitingBenchmark
	RunningBenchmark  RunningBenchmark
	FinishedBenchmark FinishedBenchmark
}

// BenchmarkAdminResultType is oneOf type of BenchmarkAdminResult.
type BenchmarkAdminResultType string

// Possible values for BenchmarkAdminResultType.
const (
	WaitingBenchmarkBenchmarkAdminResult  BenchmarkAdminResultType = "WaitingBenchmark"
	RunningBenchmarkBenchmarkAdminResult  BenchmarkAdminResultType = "RunningBenchmark"
	FinishedBenchmarkBenchmarkAdminResult BenchmarkAdminResultType = "FinishedBenchmark"
)

// IsWaitingBenchmark reports whether BenchmarkAdminResult is WaitingBenchmark.
func (s BenchmarkAdminResult) IsWaitingBenchmark() bool {
	return s.Type == WaitingBenchmarkBenchmarkAdminResult
}

// IsRunningBenchmark reports whether BenchmarkAdminResult is RunningBenchmark.
func (s BenchmarkAdminResult) IsRunningBenchmark() bool {
	return s.Type == RunningBenchmarkBenchmarkAdminResult
}

// IsFinishedBenchmark reports whether BenchmarkAdminResult is FinishedBenchmark.
func (s BenchmarkAdminResult) IsFinishedBenchmark() bool {
	return s.Type == FinishedBenchmarkBenchmarkAdminResult
}

// SetWaitingBenchmark sets BenchmarkAdminResult to WaitingBenchmark.
func (s *BenchmarkAdminResult) SetWaitingBenchmark(v WaitingBenchmark) {
	s.Type = WaitingBenchmarkBenchmarkAdminResult
	s.WaitingBenchmark = v
}

// GetWaitingBenchmark returns WaitingBenchmark and true boolean if BenchmarkAdminResult is WaitingBenchmark.
func (s BenchmarkAdminResult) GetWaitingBenchmark() (v WaitingBenchmark, ok bool) {
	if !s.IsWaitingBenchmark() {
		return v, false
	}
	return s.WaitingBenchmark, true
}

// NewWaitingBenchmarkBenchmarkAdminResult returns new BenchmarkAdminResult from WaitingBenchmark.
func NewWaitingBenchmarkBenchmarkAdminResult(v WaitingBenchmark) BenchmarkAdminResult {
	var s BenchmarkAdminResult
	s.SetWaitingBenchmark(v)
	return s
}

// SetRunningBenchmark sets BenchmarkAdminResult to RunningBenchmark.
func (s *BenchmarkAdminResult) SetRunningBenchmark(v RunningBenchmark) {
	s.Type = RunningBenchmarkBenchmarkAdminResult
	s.RunningBenchmark = v
}

// GetRunningBenchmark returns RunningBenchmark and true boolean if BenchmarkAdminResult is RunningBenchmark.
func (s BenchmarkAdminResult) GetRunningBenchmark() (v RunningBenchmark, ok bool) {
	if !s.IsRunningBenchmark() {
		return v, false
	}
	return s.RunningBenchmark, true
}

// NewRunningBenchmarkBenchmarkAdminResult returns new BenchmarkAdminResult from RunningBenchmark.
func NewRunningBenchmarkBenchmarkAdminResult(v RunningBenchmark) BenchmarkAdminResult {
	var s BenchmarkAdminResult
	s.SetRunningBenchmark(v)
	return s
}

// SetFinishedBenchmark sets BenchmarkAdminResult to FinishedBenchmark.
func (s *BenchmarkAdminResult) SetFinishedBenchmark(v FinishedBenchmark) {
	s.Type = FinishedBenchmarkBenchmarkAdminResult
	s.FinishedBenchmark = v
}

// GetFinishedBenchmark returns FinishedBenchmark and true boolean if BenchmarkAdminResult is FinishedBenchmark.
func (s BenchmarkAdminResult) GetFinishedBenchmark() (v FinishedBenchmark, ok bool) {
	if !s.IsFinishedBenchmark() {
		return v, false
	}
	return s.FinishedBenchmark, true
}

// NewFinishedBenchmarkBenchmarkAdminResult returns new BenchmarkAdminResult from FinishedBenchmark.
func NewFinishedBenchmarkBenchmarkAdminResult(v FinishedBenchmark) BenchmarkAdminResult {
	var s BenchmarkAdminResult
	s.SetFinishedBenchmark(v)
	return s
}

func (*BenchmarkAdminResult) getBenchmarkResultRes() {}

type BenchmarkId uuid.UUID

// ベンチマーク.
// Ref: #/components/schemas/BenchmarkListItem
type BenchmarkListItem struct {
	OneOf BenchmarkListItemSum
}

// GetOneOf returns the value of OneOf.
func (s *BenchmarkListItem) GetOneOf() BenchmarkListItemSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *BenchmarkListItem) SetOneOf(val BenchmarkListItemSum) {
	s.OneOf = val
}

func (*BenchmarkListItem) postBenchmarkRes() {}

// BenchmarkListItemSum represents sum type.
type BenchmarkListItemSum struct {
	Type              BenchmarkListItemSumType // switch on this field
	WaitingBenchmark  WaitingBenchmark
	RunningBenchmark  RunningBenchmark
	FinishedBenchmark FinishedBenchmark
}

// BenchmarkListItemSumType is oneOf type of BenchmarkListItemSum.
type BenchmarkListItemSumType string

// Possible values for BenchmarkListItemSumType.
const (
	WaitingBenchmarkBenchmarkListItemSum  BenchmarkListItemSumType = "WaitingBenchmark"
	RunningBenchmarkBenchmarkListItemSum  BenchmarkListItemSumType = "RunningBenchmark"
	FinishedBenchmarkBenchmarkListItemSum BenchmarkListItemSumType = "FinishedBenchmark"
)

// IsWaitingBenchmark reports whether BenchmarkListItemSum is WaitingBenchmark.
func (s BenchmarkListItemSum) IsWaitingBenchmark() bool {
	return s.Type == WaitingBenchmarkBenchmarkListItemSum
}

// IsRunningBenchmark reports whether BenchmarkListItemSum is RunningBenchmark.
func (s BenchmarkListItemSum) IsRunningBenchmark() bool {
	return s.Type == RunningBenchmarkBenchmarkListItemSum
}

// IsFinishedBenchmark reports whether BenchmarkListItemSum is FinishedBenchmark.
func (s BenchmarkListItemSum) IsFinishedBenchmark() bool {
	return s.Type == FinishedBenchmarkBenchmarkListItemSum
}

// SetWaitingBenchmark sets BenchmarkListItemSum to WaitingBenchmark.
func (s *BenchmarkListItemSum) SetWaitingBenchmark(v WaitingBenchmark) {
	s.Type = WaitingBenchmarkBenchmarkListItemSum
	s.WaitingBenchmark = v
}

// GetWaitingBenchmark returns WaitingBenchmark and true boolean if BenchmarkListItemSum is WaitingBenchmark.
func (s BenchmarkListItemSum) GetWaitingBenchmark() (v WaitingBenchmark, ok bool) {
	if !s.IsWaitingBenchmark() {
		return v, false
	}
	return s.WaitingBenchmark, true
}

// NewWaitingBenchmarkBenchmarkListItemSum returns new BenchmarkListItemSum from WaitingBenchmark.
func NewWaitingBenchmarkBenchmarkListItemSum(v WaitingBenchmark) BenchmarkListItemSum {
	var s BenchmarkListItemSum
	s.SetWaitingBenchmark(v)
	return s
}

// SetRunningBenchmark sets BenchmarkListItemSum to RunningBenchmark.
func (s *BenchmarkListItemSum) SetRunningBenchmark(v RunningBenchmark) {
	s.Type = RunningBenchmarkBenchmarkListItemSum
	s.RunningBenchmark = v
}

// GetRunningBenchmark returns RunningBenchmark and true boolean if BenchmarkListItemSum is RunningBenchmark.
func (s BenchmarkListItemSum) GetRunningBenchmark() (v RunningBenchmark, ok bool) {
	if !s.IsRunningBenchmark() {
		return v, false
	}
	return s.RunningBenchmark, true
}

// NewRunningBenchmarkBenchmarkListItemSum returns new BenchmarkListItemSum from RunningBenchmark.
func NewRunningBenchmarkBenchmarkListItemSum(v RunningBenchmark) BenchmarkListItemSum {
	var s BenchmarkListItemSum
	s.SetRunningBenchmark(v)
	return s
}

// SetFinishedBenchmark sets BenchmarkListItemSum to FinishedBenchmark.
func (s *BenchmarkListItemSum) SetFinishedBenchmark(v FinishedBenchmark) {
	s.Type = FinishedBenchmarkBenchmarkListItemSum
	s.FinishedBenchmark = v
}

// GetFinishedBenchmark returns FinishedBenchmark and true boolean if BenchmarkListItemSum is FinishedBenchmark.
func (s BenchmarkListItemSum) GetFinishedBenchmark() (v FinishedBenchmark, ok bool) {
	if !s.IsFinishedBenchmark() {
		return v, false
	}
	return s.FinishedBenchmark, true
}

// NewFinishedBenchmarkBenchmarkListItemSum returns new BenchmarkListItemSum from FinishedBenchmark.
func NewFinishedBenchmarkBenchmarkListItemSum(v FinishedBenchmark) BenchmarkListItemSum {
	var s BenchmarkListItemSum
	s.SetFinishedBenchmark(v)
	return s
}

// Ref: #/components/schemas/BenchmarkStatus
type BenchmarkStatus string

const (
	BenchmarkStatusWaiting  BenchmarkStatus = "waiting"
	BenchmarkStatusRunning  BenchmarkStatus = "running"
	BenchmarkStatusFinished BenchmarkStatus = "finished"
)

// AllValues returns all BenchmarkStatus values.
func (BenchmarkStatus) AllValues() []BenchmarkStatus {
	return []BenchmarkStatus{
		BenchmarkStatusWaiting,
		BenchmarkStatusRunning,
		BenchmarkStatusFinished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BenchmarkStatus) MarshalText() ([]byte, error) {
	switch s {
	case BenchmarkStatusWaiting:
		return []byte(s), nil
	case BenchmarkStatusRunning:
		return []byte(s), nil
	case BenchmarkStatusFinished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BenchmarkStatus) UnmarshalText(data []byte) error {
	switch BenchmarkStatus(data) {
	case BenchmarkStatusWaiting:
		*s = BenchmarkStatusWaiting
		return nil
	case BenchmarkStatusRunning:
		*s = BenchmarkStatusRunning
		return nil
	case BenchmarkStatusFinished:
		*s = BenchmarkStatusFinished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatedAt time.Time

// DeleteTeamInstanceOK is response for DeleteTeamInstance operation.
type DeleteTeamInstanceOK struct{}

func (*DeleteTeamInstanceOK) deleteTeamInstanceRes() {}

// Ref: #/components/schemas/ErrorBadRequest
type ErrorBadRequest struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorBadRequest) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorBadRequest) SetMessage(val OptString) {
	s.Message = val
}

func (*ErrorBadRequest) createTeamInstanceRes() {}
func (*ErrorBadRequest) patchDocsRes()          {}
func (*ErrorBadRequest) patchTeamInstanceRes()  {}
func (*ErrorBadRequest) patchTeamRes()          {}
func (*ErrorBadRequest) postBenchmarkRes()      {}
func (*ErrorBadRequest) postTeamRes()           {}
func (*ErrorBadRequest) putAdminsRes()          {}

type FinishedAt time.Time

// Status=finished のベンチマーク結果.
// Ref: #/components/schemas/FinishedBenchmark
type FinishedBenchmark struct {
	ID         BenchmarkId             `json:"id"`
	InstanceId InstanceId              `json:"instanceId"`
	TeamId     TeamId                  `json:"teamId"`
	UserId     UserId                  `json:"userId"`
	Status     FinishedBenchmarkStatus `json:"status"`
	Score      Score                   `json:"score"`
	Result     FinishedBenchmarkResult `json:"result"`
	CreatedAt  CreatedAt               `json:"createdAt"`
	StartedAt  StartedAt               `json:"startedAt"`
	FinishedAt FinishedAt              `json:"finishedAt"`
}

// GetID returns the value of ID.
func (s *FinishedBenchmark) GetID() BenchmarkId {
	return s.ID
}

// GetInstanceId returns the value of InstanceId.
func (s *FinishedBenchmark) GetInstanceId() InstanceId {
	return s.InstanceId
}

// GetTeamId returns the value of TeamId.
func (s *FinishedBenchmark) GetTeamId() TeamId {
	return s.TeamId
}

// GetUserId returns the value of UserId.
func (s *FinishedBenchmark) GetUserId() UserId {
	return s.UserId
}

// GetStatus returns the value of Status.
func (s *FinishedBenchmark) GetStatus() FinishedBenchmarkStatus {
	return s.Status
}

// GetScore returns the value of Score.
func (s *FinishedBenchmark) GetScore() Score {
	return s.Score
}

// GetResult returns the value of Result.
func (s *FinishedBenchmark) GetResult() FinishedBenchmarkResult {
	return s.Result
}

// GetCreatedAt returns the value of CreatedAt.
func (s *FinishedBenchmark) GetCreatedAt() CreatedAt {
	return s.CreatedAt
}

// GetStartedAt returns the value of StartedAt.
func (s *FinishedBenchmark) GetStartedAt() StartedAt {
	return s.StartedAt
}

// GetFinishedAt returns the value of FinishedAt.
func (s *FinishedBenchmark) GetFinishedAt() FinishedAt {
	return s.FinishedAt
}

// SetID sets the value of ID.
func (s *FinishedBenchmark) SetID(val BenchmarkId) {
	s.ID = val
}

// SetInstanceId sets the value of InstanceId.
func (s *FinishedBenchmark) SetInstanceId(val InstanceId) {
	s.InstanceId = val
}

// SetTeamId sets the value of TeamId.
func (s *FinishedBenchmark) SetTeamId(val TeamId) {
	s.TeamId = val
}

// SetUserId sets the value of UserId.
func (s *FinishedBenchmark) SetUserId(val UserId) {
	s.UserId = val
}

// SetStatus sets the value of Status.
func (s *FinishedBenchmark) SetStatus(val FinishedBenchmarkStatus) {
	s.Status = val
}

// SetScore sets the value of Score.
func (s *FinishedBenchmark) SetScore(val Score) {
	s.Score = val
}

// SetResult sets the value of Result.
func (s *FinishedBenchmark) SetResult(val FinishedBenchmarkResult) {
	s.Result = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *FinishedBenchmark) SetCreatedAt(val CreatedAt) {
	s.CreatedAt = val
}

// SetStartedAt sets the value of StartedAt.
func (s *FinishedBenchmark) SetStartedAt(val StartedAt) {
	s.StartedAt = val
}

// SetFinishedAt sets the value of FinishedAt.
func (s *FinishedBenchmark) SetFinishedAt(val FinishedAt) {
	s.FinishedAt = val
}

type FinishedBenchmarkResult string

const (
	FinishedBenchmarkResultPassed FinishedBenchmarkResult = "passed"
	FinishedBenchmarkResultFailed FinishedBenchmarkResult = "failed"
	FinishedBenchmarkResultError  FinishedBenchmarkResult = "error"
)

// AllValues returns all FinishedBenchmarkResult values.
func (FinishedBenchmarkResult) AllValues() []FinishedBenchmarkResult {
	return []FinishedBenchmarkResult{
		FinishedBenchmarkResultPassed,
		FinishedBenchmarkResultFailed,
		FinishedBenchmarkResultError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FinishedBenchmarkResult) MarshalText() ([]byte, error) {
	switch s {
	case FinishedBenchmarkResultPassed:
		return []byte(s), nil
	case FinishedBenchmarkResultFailed:
		return []byte(s), nil
	case FinishedBenchmarkResultError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FinishedBenchmarkResult) UnmarshalText(data []byte) error {
	switch FinishedBenchmarkResult(data) {
	case FinishedBenchmarkResultPassed:
		*s = FinishedBenchmarkResultPassed
		return nil
	case FinishedBenchmarkResultFailed:
		*s = FinishedBenchmarkResultFailed
		return nil
	case FinishedBenchmarkResultError:
		*s = FinishedBenchmarkResultError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FinishedBenchmarkStatus string

const (
	FinishedBenchmarkStatusFinished FinishedBenchmarkStatus = "finished"
)

// AllValues returns all FinishedBenchmarkStatus values.
func (FinishedBenchmarkStatus) AllValues() []FinishedBenchmarkStatus {
	return []FinishedBenchmarkStatus{
		FinishedBenchmarkStatusFinished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FinishedBenchmarkStatus) MarshalText() ([]byte, error) {
	switch s {
	case FinishedBenchmarkStatusFinished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FinishedBenchmarkStatus) UnmarshalText(data []byte) error {
	switch FinishedBenchmarkStatus(data) {
	case FinishedBenchmarkStatusFinished:
		*s = FinishedBenchmarkStatusFinished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Forbidden struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Forbidden) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Forbidden) SetMessage(val OptString) {
	s.Message = val
}

func (*Forbidden) createTeamInstanceRes()     {}
func (*Forbidden) deleteTeamInstanceRes()     {}
func (*Forbidden) getBenchmarkResultRes()     {}
func (*Forbidden) getBenchmarksRes()          {}
func (*Forbidden) getInstancesRes()           {}
func (*Forbidden) getTeamBenchmarkResultRes() {}
func (*Forbidden) getTeamBenchmarksRes()      {}
func (*Forbidden) getTeamInstancesRes()       {}
func (*Forbidden) patchDocsRes()              {}
func (*Forbidden) patchTeamInstanceRes()      {}
func (*Forbidden) patchTeamRes()              {}
func (*Forbidden) postBenchmarkRes()          {}
func (*Forbidden) putAdminsRes()              {}

type GetBenchmarkQueueOKApplicationJSON []BenchmarkListItem

func (*GetBenchmarkQueueOKApplicationJSON) getBenchmarkQueueRes() {}

type GetBenchmarksOKApplicationJSON []BenchmarkListItem

func (*GetBenchmarksOKApplicationJSON) getBenchmarksRes() {}

type GetDocsOK struct {
	Body OptMarkdownDocument `json:"body"`
}

// GetBody returns the value of Body.
func (s *GetDocsOK) GetBody() OptMarkdownDocument {
	return s.Body
}

// SetBody sets the value of Body.
func (s *GetDocsOK) SetBody(val OptMarkdownDocument) {
	s.Body = val
}

func (*GetDocsOK) getDocsRes() {}

type GetInstancesOKApplicationJSON []Instance

func (*GetInstancesOKApplicationJSON) getInstancesRes() {}

type GetOauth2CallbackBadRequest struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *GetOauth2CallbackBadRequest) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *GetOauth2CallbackBadRequest) SetMessage(val OptString) {
	s.Message = val
}

func (*GetOauth2CallbackBadRequest) getOauth2CallbackRes() {}

// GetOauth2CallbackSeeOther is response for GetOauth2Callback operation.
type GetOauth2CallbackSeeOther struct {
	Location OptURI
}

// GetLocation returns the value of Location.
func (s *GetOauth2CallbackSeeOther) GetLocation() OptURI {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *GetOauth2CallbackSeeOther) SetLocation(val OptURI) {
	s.Location = val
}

func (*GetOauth2CallbackSeeOther) getOauth2CallbackRes() {}

// GetOauth2CodeSeeOther is response for GetOauth2Code operation.
type GetOauth2CodeSeeOther struct {
	Location OptURI
}

// GetLocation returns the value of Location.
func (s *GetOauth2CodeSeeOther) GetLocation() OptURI {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *GetOauth2CodeSeeOther) SetLocation(val OptURI) {
	s.Location = val
}

func (*GetOauth2CodeSeeOther) getOauth2CodeRes() {}

type GetRankingOKApplicationJSON []RankingItem

func (*GetRankingOKApplicationJSON) getRankingRes() {}

type GetScoresOKApplicationJSON []TeamScores

func (*GetScoresOKApplicationJSON) getScoresRes() {}

type GetTeamBenchmarksOKApplicationJSON []BenchmarkListItem

func (*GetTeamBenchmarksOKApplicationJSON) getTeamBenchmarksRes() {}

type GetTeamInstancesOKApplicationJSON []Instance

func (*GetTeamInstancesOKApplicationJSON) getTeamInstancesRes() {}

type GetTeamsOKApplicationJSON []Team

func (*GetTeamsOKApplicationJSON) getTeamsRes() {}

type GetUsersOKApplicationJSON []User

func (*GetUsersOKApplicationJSON) getUsersRes() {}

type GitHubId string

type IPAddress string

// サーバーのインスタンス.
// Ref: #/components/schemas/Instance
type Instance struct {
	ID     InstanceId `json:"id"`
	TeamId TeamId     `json:"teamId"`
	// サーバーのID。チームごとに1から始まる。表示用。
	// 新しくインスタンスを起動する場合は、1以上の現在使われていない整数が採用される。
	// インスタンスを削除したら、そのIDは使用されていないものとし、再利用できる。.
	ServerId         int            `json:"serverId"`
	PublicIPAddress  IPAddress      `json:"publicIPAddress"`
	PrivateIPAddress IPAddress      `json:"privateIPAddress"`
	Status           InstanceStatus `json:"status"`
	CreatedAt        time.Time      `json:"createdAt"`
}

// GetID returns the value of ID.
func (s *Instance) GetID() InstanceId {
	return s.ID
}

// GetTeamId returns the value of TeamId.
func (s *Instance) GetTeamId() TeamId {
	return s.TeamId
}

// GetServerId returns the value of ServerId.
func (s *Instance) GetServerId() int {
	return s.ServerId
}

// GetPublicIPAddress returns the value of PublicIPAddress.
func (s *Instance) GetPublicIPAddress() IPAddress {
	return s.PublicIPAddress
}

// GetPrivateIPAddress returns the value of PrivateIPAddress.
func (s *Instance) GetPrivateIPAddress() IPAddress {
	return s.PrivateIPAddress
}

// GetStatus returns the value of Status.
func (s *Instance) GetStatus() InstanceStatus {
	return s.Status
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Instance) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *Instance) SetID(val InstanceId) {
	s.ID = val
}

// SetTeamId sets the value of TeamId.
func (s *Instance) SetTeamId(val TeamId) {
	s.TeamId = val
}

// SetServerId sets the value of ServerId.
func (s *Instance) SetServerId(val int) {
	s.ServerId = val
}

// SetPublicIPAddress sets the value of PublicIPAddress.
func (s *Instance) SetPublicIPAddress(val IPAddress) {
	s.PublicIPAddress = val
}

// SetPrivateIPAddress sets the value of PrivateIPAddress.
func (s *Instance) SetPrivateIPAddress(val IPAddress) {
	s.PrivateIPAddress = val
}

// SetStatus sets the value of Status.
func (s *Instance) SetStatus(val InstanceStatus) {
	s.Status = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Instance) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

func (*Instance) createTeamInstanceRes() {}

type InstanceId uuid.UUID

// Ref: #/components/schemas/InstanceOperation
type InstanceOperation string

const (
	InstanceOperationStart InstanceOperation = "start"
	InstanceOperationStop  InstanceOperation = "stop"
)

// AllValues returns all InstanceOperation values.
func (InstanceOperation) AllValues() []InstanceOperation {
	return []InstanceOperation{
		InstanceOperationStart,
		InstanceOperationStop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InstanceOperation) MarshalText() ([]byte, error) {
	switch s {
	case InstanceOperationStart:
		return []byte(s), nil
	case InstanceOperationStop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstanceOperation) UnmarshalText(data []byte) error {
	switch InstanceOperation(data) {
	case InstanceOperationStart:
		*s = InstanceOperationStart
		return nil
	case InstanceOperationStop:
		*s = InstanceOperationStop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/InstanceStatus
type InstanceStatus string

const (
	InstanceStatusBuilding InstanceStatus = "building"
	InstanceStatusRunning  InstanceStatus = "running"
	InstanceStatusStopped  InstanceStatus = "stopped"
	InstanceStatusDeleted  InstanceStatus = "deleted"
)

// AllValues returns all InstanceStatus values.
func (InstanceStatus) AllValues() []InstanceStatus {
	return []InstanceStatus{
		InstanceStatusBuilding,
		InstanceStatusRunning,
		InstanceStatusStopped,
		InstanceStatusDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InstanceStatus) MarshalText() ([]byte, error) {
	switch s {
	case InstanceStatusBuilding:
		return []byte(s), nil
	case InstanceStatusRunning:
		return []byte(s), nil
	case InstanceStatusStopped:
		return []byte(s), nil
	case InstanceStatusDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstanceStatus) UnmarshalText(data []byte) error {
	switch InstanceStatus(data) {
	case InstanceStatusBuilding:
		*s = InstanceStatusBuilding
		return nil
	case InstanceStatusRunning:
		*s = InstanceStatusRunning
		return nil
	case InstanceStatusStopped:
		*s = InstanceStatusStopped
		return nil
	case InstanceStatusDeleted:
		*s = InstanceStatusDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type InternalServerError struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *InternalServerError) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *InternalServerError) SetMessage(val OptString) {
	s.Message = val
}

func (*InternalServerError) createTeamInstanceRes()     {}
func (*InternalServerError) deleteTeamInstanceRes()     {}
func (*InternalServerError) getBenchmarkQueueRes()      {}
func (*InternalServerError) getBenchmarkResultRes()     {}
func (*InternalServerError) getBenchmarksRes()          {}
func (*InternalServerError) getDocsRes()                {}
func (*InternalServerError) getInstancesRes()           {}
func (*InternalServerError) getMeRes()                  {}
func (*InternalServerError) getOauth2CallbackRes()      {}
func (*InternalServerError) getOauth2CodeRes()          {}
func (*InternalServerError) getRankingRes()             {}
func (*InternalServerError) getScoresRes()              {}
func (*InternalServerError) getTeamBenchmarkResultRes() {}
func (*InternalServerError) getTeamBenchmarksRes()      {}
func (*InternalServerError) getTeamInstancesRes()       {}
func (*InternalServerError) getTeamRes()                {}
func (*InternalServerError) getTeamsRes()               {}
func (*InternalServerError) getUsersRes()               {}
func (*InternalServerError) patchDocsRes()              {}
func (*InternalServerError) patchTeamInstanceRes()      {}
func (*InternalServerError) patchTeamRes()              {}
func (*InternalServerError) postBenchmarkRes()          {}
func (*InternalServerError) postOauth2LogoutRes()       {}
func (*InternalServerError) postTeamRes()               {}
func (*InternalServerError) putAdminsRes()              {}

type MarkdownDocument string

type NotFound struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *NotFound) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *NotFound) SetMessage(val OptString) {
	s.Message = val
}

func (*NotFound) createTeamInstanceRes()     {}
func (*NotFound) deleteTeamInstanceRes()     {}
func (*NotFound) getBenchmarkResultRes()     {}
func (*NotFound) getTeamBenchmarkResultRes() {}
func (*NotFound) getTeamBenchmarksRes()      {}
func (*NotFound) getTeamInstancesRes()       {}
func (*NotFound) getTeamRes()                {}
func (*NotFound) patchTeamInstanceRes()      {}
func (*NotFound) patchTeamRes()              {}

// NewOptBenchmarkId returns new OptBenchmarkId with value set to v.
func NewOptBenchmarkId(v BenchmarkId) OptBenchmarkId {
	return OptBenchmarkId{
		Value: v,
		Set:   true,
	}
}

// OptBenchmarkId is optional BenchmarkId.
type OptBenchmarkId struct {
	Value BenchmarkId
	Set   bool
}

// IsSet returns true if OptBenchmarkId was set.
func (o OptBenchmarkId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBenchmarkId) Reset() {
	var v BenchmarkId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBenchmarkId) SetTo(v BenchmarkId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBenchmarkId) Get() (v BenchmarkId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBenchmarkId) Or(d BenchmarkId) BenchmarkId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBenchmarkStatus returns new OptBenchmarkStatus with value set to v.
func NewOptBenchmarkStatus(v BenchmarkStatus) OptBenchmarkStatus {
	return OptBenchmarkStatus{
		Value: v,
		Set:   true,
	}
}

// OptBenchmarkStatus is optional BenchmarkStatus.
type OptBenchmarkStatus struct {
	Value BenchmarkStatus
	Set   bool
}

// IsSet returns true if OptBenchmarkStatus was set.
func (o OptBenchmarkStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBenchmarkStatus) Reset() {
	var v BenchmarkStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBenchmarkStatus) SetTo(v BenchmarkStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBenchmarkStatus) Get() (v BenchmarkStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBenchmarkStatus) Or(d BenchmarkStatus) BenchmarkStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatedAt returns new OptCreatedAt with value set to v.
func NewOptCreatedAt(v CreatedAt) OptCreatedAt {
	return OptCreatedAt{
		Value: v,
		Set:   true,
	}
}

// OptCreatedAt is optional CreatedAt.
type OptCreatedAt struct {
	Value CreatedAt
	Set   bool
}

// IsSet returns true if OptCreatedAt was set.
func (o OptCreatedAt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatedAt) Reset() {
	var v CreatedAt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatedAt) SetTo(v CreatedAt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatedAt) Get() (v CreatedAt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatedAt) Or(d CreatedAt) CreatedAt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMarkdownDocument returns new OptMarkdownDocument with value set to v.
func NewOptMarkdownDocument(v MarkdownDocument) OptMarkdownDocument {
	return OptMarkdownDocument{
		Value: v,
		Set:   true,
	}
}

// OptMarkdownDocument is optional MarkdownDocument.
type OptMarkdownDocument struct {
	Value MarkdownDocument
	Set   bool
}

// IsSet returns true if OptMarkdownDocument was set.
func (o OptMarkdownDocument) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMarkdownDocument) Reset() {
	var v MarkdownDocument
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMarkdownDocument) SetTo(v MarkdownDocument) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMarkdownDocument) Get() (v MarkdownDocument, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMarkdownDocument) Or(d MarkdownDocument) MarkdownDocument {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPatchTeamReq returns new OptPatchTeamReq with value set to v.
func NewOptPatchTeamReq(v PatchTeamReq) OptPatchTeamReq {
	return OptPatchTeamReq{
		Value: v,
		Set:   true,
	}
}

// OptPatchTeamReq is optional PatchTeamReq.
type OptPatchTeamReq struct {
	Value PatchTeamReq
	Set   bool
}

// IsSet returns true if OptPatchTeamReq was set.
func (o OptPatchTeamReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPatchTeamReq) Reset() {
	var v PatchTeamReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPatchTeamReq) SetTo(v PatchTeamReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPatchTeamReq) Get() (v PatchTeamReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPatchTeamReq) Or(d PatchTeamReq) PatchTeamReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostBenchmarkReq returns new OptPostBenchmarkReq with value set to v.
func NewOptPostBenchmarkReq(v PostBenchmarkReq) OptPostBenchmarkReq {
	return OptPostBenchmarkReq{
		Value: v,
		Set:   true,
	}
}

// OptPostBenchmarkReq is optional PostBenchmarkReq.
type OptPostBenchmarkReq struct {
	Value PostBenchmarkReq
	Set   bool
}

// IsSet returns true if OptPostBenchmarkReq was set.
func (o OptPostBenchmarkReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostBenchmarkReq) Reset() {
	var v PostBenchmarkReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostBenchmarkReq) SetTo(v PostBenchmarkReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostBenchmarkReq) Get() (v PostBenchmarkReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostBenchmarkReq) Or(d PostBenchmarkReq) PostBenchmarkReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostTeamReq returns new OptPostTeamReq with value set to v.
func NewOptPostTeamReq(v PostTeamReq) OptPostTeamReq {
	return OptPostTeamReq{
		Value: v,
		Set:   true,
	}
}

// OptPostTeamReq is optional PostTeamReq.
type OptPostTeamReq struct {
	Value PostTeamReq
	Set   bool
}

// IsSet returns true if OptPostTeamReq was set.
func (o OptPostTeamReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostTeamReq) Reset() {
	var v PostTeamReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostTeamReq) SetTo(v PostTeamReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostTeamReq) Get() (v PostTeamReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostTeamReq) Or(d PostTeamReq) PostTeamReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamId returns new OptTeamId with value set to v.
func NewOptTeamId(v TeamId) OptTeamId {
	return OptTeamId{
		Value: v,
		Set:   true,
	}
}

// OptTeamId is optional TeamId.
type OptTeamId struct {
	Value TeamId
	Set   bool
}

// IsSet returns true if OptTeamId was set.
func (o OptTeamId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamId) Reset() {
	var v TeamId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamId) SetTo(v TeamId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamId) Get() (v TeamId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamId) Or(d TeamId) TeamId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamName returns new OptTeamName with value set to v.
func NewOptTeamName(v TeamName) OptTeamName {
	return OptTeamName{
		Value: v,
		Set:   true,
	}
}

// OptTeamName is optional TeamName.
type OptTeamName struct {
	Value TeamName
	Set   bool
}

// IsSet returns true if OptTeamName was set.
func (o OptTeamName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamName) Reset() {
	var v TeamName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamName) SetTo(v TeamName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamName) Get() (v TeamName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamName) Or(d TeamName) TeamName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type PatchDocsOK struct {
	Body OptMarkdownDocument `json:"body"`
}

// GetBody returns the value of Body.
func (s *PatchDocsOK) GetBody() OptMarkdownDocument {
	return s.Body
}

// SetBody sets the value of Body.
func (s *PatchDocsOK) SetBody(val OptMarkdownDocument) {
	s.Body = val
}

func (*PatchDocsOK) patchDocsRes() {}

type PatchDocsReq struct {
	Body MarkdownDocument `json:"body"`
}

// GetBody returns the value of Body.
func (s *PatchDocsReq) GetBody() MarkdownDocument {
	return s.Body
}

// SetBody sets the value of Body.
func (s *PatchDocsReq) SetBody(val MarkdownDocument) {
	s.Body = val
}

// PatchTeamInstanceOK is response for PatchTeamInstance operation.
type PatchTeamInstanceOK struct{}

func (*PatchTeamInstanceOK) patchTeamInstanceRes() {}

type PatchTeamInstanceReq struct {
	Operation InstanceOperation `json:"operation"`
}

// GetOperation returns the value of Operation.
func (s *PatchTeamInstanceReq) GetOperation() InstanceOperation {
	return s.Operation
}

// SetOperation sets the value of Operation.
func (s *PatchTeamInstanceReq) SetOperation(val InstanceOperation) {
	s.Operation = val
}

type PatchTeamReq struct {
	Name OptTeamName `json:"name"`
	// チームに所属させる部員のID.
	Members []UserId `json:"members"`
	// チームに所属させる部員のGitHub ID.
	GithubIds []GitHubId `json:"githubIds"`
}

// GetName returns the value of Name.
func (s *PatchTeamReq) GetName() OptTeamName {
	return s.Name
}

// GetMembers returns the value of Members.
func (s *PatchTeamReq) GetMembers() []UserId {
	return s.Members
}

// GetGithubIds returns the value of GithubIds.
func (s *PatchTeamReq) GetGithubIds() []GitHubId {
	return s.GithubIds
}

// SetName sets the value of Name.
func (s *PatchTeamReq) SetName(val OptTeamName) {
	s.Name = val
}

// SetMembers sets the value of Members.
func (s *PatchTeamReq) SetMembers(val []UserId) {
	s.Members = val
}

// SetGithubIds sets the value of GithubIds.
func (s *PatchTeamReq) SetGithubIds(val []GitHubId) {
	s.GithubIds = val
}

type PostBenchmarkReq struct {
	InstanceId InstanceId `json:"instanceId"`
}

// GetInstanceId returns the value of InstanceId.
func (s *PostBenchmarkReq) GetInstanceId() InstanceId {
	return s.InstanceId
}

// SetInstanceId sets the value of InstanceId.
func (s *PostBenchmarkReq) SetInstanceId(val InstanceId) {
	s.InstanceId = val
}

type PostOauth2LogoutBadRequest struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *PostOauth2LogoutBadRequest) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *PostOauth2LogoutBadRequest) SetMessage(val OptString) {
	s.Message = val
}

func (*PostOauth2LogoutBadRequest) postOauth2LogoutRes() {}

// PostOauth2LogoutOK is response for PostOauth2Logout operation.
type PostOauth2LogoutOK struct{}

func (*PostOauth2LogoutOK) postOauth2LogoutRes() {}

type PostTeamReq struct {
	Name TeamName `json:"name"`
	// チームに所属させる部員のID.
	Members []UserId `json:"members"`
}

// GetName returns the value of Name.
func (s *PostTeamReq) GetName() TeamName {
	return s.Name
}

// GetMembers returns the value of Members.
func (s *PostTeamReq) GetMembers() []UserId {
	return s.Members
}

// SetName sets the value of Name.
func (s *PostTeamReq) SetName(val TeamName) {
	s.Name = val
}

// SetMembers sets the value of Members.
func (s *PostTeamReq) SetMembers(val []UserId) {
	s.Members = val
}

// PutAdminsOK is response for PutAdmins operation.
type PutAdminsOK struct{}

func (*PutAdminsOK) putAdminsRes() {}

// ランキングの順位。まだベンチマークを1回も実行していない場合、createdAtはnull.
// Ref: #/components/schemas/RankingItem
type RankingItem struct {
	// 順位.
	Rank      int          `json:"rank"`
	TeamId    TeamId       `json:"teamId"`
	Score     Score        `json:"score"`
	CreatedAt OptCreatedAt `json:"createdAt"`
}

// GetRank returns the value of Rank.
func (s *RankingItem) GetRank() int {
	return s.Rank
}

// GetTeamId returns the value of TeamId.
func (s *RankingItem) GetTeamId() TeamId {
	return s.TeamId
}

// GetScore returns the value of Score.
func (s *RankingItem) GetScore() Score {
	return s.Score
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RankingItem) GetCreatedAt() OptCreatedAt {
	return s.CreatedAt
}

// SetRank sets the value of Rank.
func (s *RankingItem) SetRank(val int) {
	s.Rank = val
}

// SetTeamId sets the value of TeamId.
func (s *RankingItem) SetTeamId(val TeamId) {
	s.TeamId = val
}

// SetScore sets the value of Score.
func (s *RankingItem) SetScore(val Score) {
	s.Score = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RankingItem) SetCreatedAt(val OptCreatedAt) {
	s.CreatedAt = val
}

type RankingOrderBy string

const (
	RankingOrderByLatest  RankingOrderBy = "latest"
	RankingOrderByHighest RankingOrderBy = "highest"
)

// AllValues returns all RankingOrderBy values.
func (RankingOrderBy) AllValues() []RankingOrderBy {
	return []RankingOrderBy{
		RankingOrderByLatest,
		RankingOrderByHighest,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RankingOrderBy) MarshalText() ([]byte, error) {
	switch s {
	case RankingOrderByLatest:
		return []byte(s), nil
	case RankingOrderByHighest:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RankingOrderBy) UnmarshalText(data []byte) error {
	switch RankingOrderBy(data) {
	case RankingOrderByLatest:
		*s = RankingOrderByLatest
		return nil
	case RankingOrderByHighest:
		*s = RankingOrderByHighest
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Status=running のベンチマーク結果.
// Ref: #/components/schemas/RunningBenchmark
type RunningBenchmark struct {
	ID         BenchmarkId            `json:"id"`
	InstanceId InstanceId             `json:"instanceId"`
	TeamId     TeamId                 `json:"teamId"`
	UserId     UserId                 `json:"userId"`
	Status     RunningBenchmarkStatus `json:"status"`
	Score      Score                  `json:"score"`
	CreatedAt  CreatedAt              `json:"createdAt"`
	StartedAt  StartedAt              `json:"startedAt"`
}

// GetID returns the value of ID.
func (s *RunningBenchmark) GetID() BenchmarkId {
	return s.ID
}

// GetInstanceId returns the value of InstanceId.
func (s *RunningBenchmark) GetInstanceId() InstanceId {
	return s.InstanceId
}

// GetTeamId returns the value of TeamId.
func (s *RunningBenchmark) GetTeamId() TeamId {
	return s.TeamId
}

// GetUserId returns the value of UserId.
func (s *RunningBenchmark) GetUserId() UserId {
	return s.UserId
}

// GetStatus returns the value of Status.
func (s *RunningBenchmark) GetStatus() RunningBenchmarkStatus {
	return s.Status
}

// GetScore returns the value of Score.
func (s *RunningBenchmark) GetScore() Score {
	return s.Score
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RunningBenchmark) GetCreatedAt() CreatedAt {
	return s.CreatedAt
}

// GetStartedAt returns the value of StartedAt.
func (s *RunningBenchmark) GetStartedAt() StartedAt {
	return s.StartedAt
}

// SetID sets the value of ID.
func (s *RunningBenchmark) SetID(val BenchmarkId) {
	s.ID = val
}

// SetInstanceId sets the value of InstanceId.
func (s *RunningBenchmark) SetInstanceId(val InstanceId) {
	s.InstanceId = val
}

// SetTeamId sets the value of TeamId.
func (s *RunningBenchmark) SetTeamId(val TeamId) {
	s.TeamId = val
}

// SetUserId sets the value of UserId.
func (s *RunningBenchmark) SetUserId(val UserId) {
	s.UserId = val
}

// SetStatus sets the value of Status.
func (s *RunningBenchmark) SetStatus(val RunningBenchmarkStatus) {
	s.Status = val
}

// SetScore sets the value of Score.
func (s *RunningBenchmark) SetScore(val Score) {
	s.Score = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RunningBenchmark) SetCreatedAt(val CreatedAt) {
	s.CreatedAt = val
}

// SetStartedAt sets the value of StartedAt.
func (s *RunningBenchmark) SetStartedAt(val StartedAt) {
	s.StartedAt = val
}

type RunningBenchmarkStatus string

const (
	RunningBenchmarkStatusRunning RunningBenchmarkStatus = "running"
)

// AllValues returns all RunningBenchmarkStatus values.
func (RunningBenchmarkStatus) AllValues() []RunningBenchmarkStatus {
	return []RunningBenchmarkStatus{
		RunningBenchmarkStatusRunning,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunningBenchmarkStatus) MarshalText() ([]byte, error) {
	switch s {
	case RunningBenchmarkStatusRunning:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunningBenchmarkStatus) UnmarshalText(data []byte) error {
	switch RunningBenchmarkStatus(data) {
	case RunningBenchmarkStatusRunning:
		*s = RunningBenchmarkStatusRunning
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Score float64

type StartedAt time.Time

// チーム.
// Ref: #/components/schemas/Team
type Team struct {
	ID   TeamId   `json:"id"`
	Name TeamName `json:"name"`
	// チームに所属している部員のID.
	Members []UserId `json:"members"`
	// チームに所属している部員のGitHub ID.
	GithubIds []GitHubId `json:"githubIds"`
	CreatedAt time.Time  `json:"createdAt"`
}

// GetID returns the value of ID.
func (s *Team) GetID() TeamId {
	return s.ID
}

// GetName returns the value of Name.
func (s *Team) GetName() TeamName {
	return s.Name
}

// GetMembers returns the value of Members.
func (s *Team) GetMembers() []UserId {
	return s.Members
}

// GetGithubIds returns the value of GithubIds.
func (s *Team) GetGithubIds() []GitHubId {
	return s.GithubIds
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Team) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *Team) SetID(val TeamId) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Team) SetName(val TeamName) {
	s.Name = val
}

// SetMembers sets the value of Members.
func (s *Team) SetMembers(val []UserId) {
	s.Members = val
}

// SetGithubIds sets the value of GithubIds.
func (s *Team) SetGithubIds(val []GitHubId) {
	s.GithubIds = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Team) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

func (*Team) getTeamRes()   {}
func (*Team) patchTeamRes() {}
func (*Team) postTeamRes()  {}

type TeamAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *TeamAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *TeamAuth) SetAPIKey(val string) {
	s.APIKey = val
}

type TeamId uuid.UUID

type TeamName string

// チームのスコア一覧。.
// Ref: #/components/schemas/TeamScores
type TeamScores struct {
	TeamId TeamId `json:"teamId"`
	// CreatedAtの昇順.
	Scores []BenchScore `json:"scores"`
}

// GetTeamId returns the value of TeamId.
func (s *TeamScores) GetTeamId() TeamId {
	return s.TeamId
}

// GetScores returns the value of Scores.
func (s *TeamScores) GetScores() []BenchScore {
	return s.Scores
}

// SetTeamId sets the value of TeamId.
func (s *TeamScores) SetTeamId(val TeamId) {
	s.TeamId = val
}

// SetScores sets the value of Scores.
func (s *TeamScores) SetScores(val []BenchScore) {
	s.Scores = val
}

type Unauthorized struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Unauthorized) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Unauthorized) SetMessage(val OptString) {
	s.Message = val
}

func (*Unauthorized) createTeamInstanceRes()     {}
func (*Unauthorized) deleteTeamInstanceRes()     {}
func (*Unauthorized) getBenchmarkQueueRes()      {}
func (*Unauthorized) getBenchmarkResultRes()     {}
func (*Unauthorized) getBenchmarksRes()          {}
func (*Unauthorized) getDocsRes()                {}
func (*Unauthorized) getInstancesRes()           {}
func (*Unauthorized) getMeRes()                  {}
func (*Unauthorized) getRankingRes()             {}
func (*Unauthorized) getScoresRes()              {}
func (*Unauthorized) getTeamBenchmarkResultRes() {}
func (*Unauthorized) getTeamBenchmarksRes()      {}
func (*Unauthorized) getTeamInstancesRes()       {}
func (*Unauthorized) getTeamRes()                {}
func (*Unauthorized) getTeamsRes()               {}
func (*Unauthorized) getUsersRes()               {}
func (*Unauthorized) patchDocsRes()              {}
func (*Unauthorized) patchTeamInstanceRes()      {}
func (*Unauthorized) patchTeamRes()              {}
func (*Unauthorized) postBenchmarkRes()          {}
func (*Unauthorized) postOauth2LogoutRes()       {}
func (*Unauthorized) postTeamRes()               {}
func (*Unauthorized) putAdminsRes()              {}

// 部員.
// Ref: #/components/schemas/User
type User struct {
	ID     UserId    `json:"id"`
	Name   UserName  `json:"name"`
	TeamId OptTeamId `json:"teamId"`
	// 管理者権限を持っているかどうか.
	IsAdmin bool `json:"isAdmin"`
}

// GetID returns the value of ID.
func (s *User) GetID() UserId {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() UserName {
	return s.Name
}

// GetTeamId returns the value of TeamId.
func (s *User) GetTeamId() OptTeamId {
	return s.TeamId
}

// GetIsAdmin returns the value of IsAdmin.
func (s *User) GetIsAdmin() bool {
	return s.IsAdmin
}

// SetID sets the value of ID.
func (s *User) SetID(val UserId) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val UserName) {
	s.Name = val
}

// SetTeamId sets the value of TeamId.
func (s *User) SetTeamId(val OptTeamId) {
	s.TeamId = val
}

// SetIsAdmin sets the value of IsAdmin.
func (s *User) SetIsAdmin(val bool) {
	s.IsAdmin = val
}

func (*User) getMeRes() {}

type UserAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *UserAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *UserAuth) SetAPIKey(val string) {
	s.APIKey = val
}

type UserId uuid.UUID

type UserName string

// Status=waiting のベンチマーク結果.
// Ref: #/components/schemas/WaitingBenchmark
type WaitingBenchmark struct {
	ID         BenchmarkId            `json:"id"`
	InstanceId InstanceId             `json:"instanceId"`
	TeamId     TeamId                 `json:"teamId"`
	UserId     UserId                 `json:"userId"`
	Status     WaitingBenchmarkStatus `json:"status"`
	CreatedAt  CreatedAt              `json:"createdAt"`
}

// GetID returns the value of ID.
func (s *WaitingBenchmark) GetID() BenchmarkId {
	return s.ID
}

// GetInstanceId returns the value of InstanceId.
func (s *WaitingBenchmark) GetInstanceId() InstanceId {
	return s.InstanceId
}

// GetTeamId returns the value of TeamId.
func (s *WaitingBenchmark) GetTeamId() TeamId {
	return s.TeamId
}

// GetUserId returns the value of UserId.
func (s *WaitingBenchmark) GetUserId() UserId {
	return s.UserId
}

// GetStatus returns the value of Status.
func (s *WaitingBenchmark) GetStatus() WaitingBenchmarkStatus {
	return s.Status
}

// GetCreatedAt returns the value of CreatedAt.
func (s *WaitingBenchmark) GetCreatedAt() CreatedAt {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *WaitingBenchmark) SetID(val BenchmarkId) {
	s.ID = val
}

// SetInstanceId sets the value of InstanceId.
func (s *WaitingBenchmark) SetInstanceId(val InstanceId) {
	s.InstanceId = val
}

// SetTeamId sets the value of TeamId.
func (s *WaitingBenchmark) SetTeamId(val TeamId) {
	s.TeamId = val
}

// SetUserId sets the value of UserId.
func (s *WaitingBenchmark) SetUserId(val UserId) {
	s.UserId = val
}

// SetStatus sets the value of Status.
func (s *WaitingBenchmark) SetStatus(val WaitingBenchmarkStatus) {
	s.Status = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *WaitingBenchmark) SetCreatedAt(val CreatedAt) {
	s.CreatedAt = val
}

type WaitingBenchmarkStatus string

const (
	WaitingBenchmarkStatusWaiting WaitingBenchmarkStatus = "waiting"
)

// AllValues returns all WaitingBenchmarkStatus values.
func (WaitingBenchmarkStatus) AllValues() []WaitingBenchmarkStatus {
	return []WaitingBenchmarkStatus{
		WaitingBenchmarkStatusWaiting,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WaitingBenchmarkStatus) MarshalText() ([]byte, error) {
	switch s {
	case WaitingBenchmarkStatusWaiting:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WaitingBenchmarkStatus) UnmarshalText(data []byte) error {
	switch WaitingBenchmarkStatus(data) {
	case WaitingBenchmarkStatusWaiting:
		*s = WaitingBenchmarkStatusWaiting
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
