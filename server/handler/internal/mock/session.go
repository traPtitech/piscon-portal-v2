// Code generated by MockGen. DO NOT EDIT.
// Source: session.go
//
// Generated by this command:
//
//	mockgen -source=session.go -destination=internal/mock/session.go -package=mock -typed=true
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
	isgomock struct{}
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// ClearSessionID mocks base method.
func (m *MockSessionManager) ClearSessionID(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearSessionID", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearSessionID indicates an expected call of ClearSessionID.
func (mr *MockSessionManagerMockRecorder) ClearSessionID(c any) *MockSessionManagerClearSessionIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSessionID", reflect.TypeOf((*MockSessionManager)(nil).ClearSessionID), c)
	return &MockSessionManagerClearSessionIDCall{Call: call}
}

// MockSessionManagerClearSessionIDCall wrap *gomock.Call
type MockSessionManagerClearSessionIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockSessionManagerClearSessionIDCall) Return(arg0 error) *MockSessionManagerClearSessionIDCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockSessionManagerClearSessionIDCall) Do(f func(echo.Context) error) *MockSessionManagerClearSessionIDCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockSessionManagerClearSessionIDCall) DoAndReturn(f func(echo.Context) error) *MockSessionManagerClearSessionIDCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// GetSessionID mocks base method.
func (m *MockSessionManager) GetSessionID(c echo.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionID", c)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionID indicates an expected call of GetSessionID.
func (mr *MockSessionManagerMockRecorder) GetSessionID(c any) *MockSessionManagerGetSessionIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionID", reflect.TypeOf((*MockSessionManager)(nil).GetSessionID), c)
	return &MockSessionManagerGetSessionIDCall{Call: call}
}

// MockSessionManagerGetSessionIDCall wrap *gomock.Call
type MockSessionManagerGetSessionIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockSessionManagerGetSessionIDCall) Return(arg0 string, arg1 error) *MockSessionManagerGetSessionIDCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockSessionManagerGetSessionIDCall) Do(f func(echo.Context) (string, error)) *MockSessionManagerGetSessionIDCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockSessionManagerGetSessionIDCall) DoAndReturn(f func(echo.Context) (string, error)) *MockSessionManagerGetSessionIDCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// Init mocks base method.
func (m *MockSessionManager) Init(e *echo.Group) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", e)
}

// Init indicates an expected call of Init.
func (mr *MockSessionManagerMockRecorder) Init(e any) *MockSessionManagerInitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSessionManager)(nil).Init), e)
	return &MockSessionManagerInitCall{Call: call}
}

// MockSessionManagerInitCall wrap *gomock.Call
type MockSessionManagerInitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionManagerInitCall) Return() *MockSessionManagerInitCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionManagerInitCall) Do(f func(*echo.Group)) *MockSessionManagerInitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionManagerInitCall) DoAndReturn(f func(*echo.Group)) *MockSessionManagerInitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetSessionID mocks base method.
func (m *MockSessionManager) SetSessionID(c echo.Context, maxAge time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSessionID", c, maxAge)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSessionID indicates an expected call of SetSessionID.
func (mr *MockSessionManagerMockRecorder) SetSessionID(c, maxAge any) *MockSessionManagerSetSessionIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSessionID", reflect.TypeOf((*MockSessionManager)(nil).SetSessionID), c, maxAge)
	return &MockSessionManagerSetSessionIDCall{Call: call}
}

// MockSessionManagerSetSessionIDCall wrap *gomock.Call
type MockSessionManagerSetSessionIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockSessionManagerSetSessionIDCall) Return(arg0 string, arg1 error) *MockSessionManagerSetSessionIDCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockSessionManagerSetSessionIDCall) Do(f func(echo.Context, time.Duration) (string, error)) *MockSessionManagerSetSessionIDCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockSessionManagerSetSessionIDCall) DoAndReturn(f func(echo.Context, time.Duration) (string, error)) *MockSessionManagerSetSessionIDCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
