openapi: 3.0.3
info:
  title: "piscon-portal-v2"
  version: "v0.0.0"
servers:
  - url: "http://localhost:8080/api"
    description: "Local server"

tags:
  - name: "oauth2"
    description: "OAuth2を使った部員の認証"
  - name: "users"
    description: "部員に関するAPI"
  - name: "teams"
    description: "チームに関するAPI"

paths:
  /oauth2/code:
    get:
      operationId: "getOauth2Code"
      tags:
        - "oauth2"
      summary: "OAuth2認証コードの取得・traQの認可ページにリダイレクト"
      description: "OAuth2の認証に必要なCode Verifierを生成し、traQの認可ページにリダイレクトします。"
      responses:
        303:
          description: "traQの認可ページにリダイレクトします。"
          headers:
            Location:
              schema:
                type: "string"
                format: "uri"
                example: "https://q.trap.jp/oauth2/authorize?response_type=code&client_id=client_id&redirect_uri=http://localhost:8080/api/oauth2/callback&state=state&code_challenge=code_challenge&code_challenge_method=S256"
        500:
          $ref: "#/components/responses/InternalServerError"

  /oauth2/callback:
    get:
      operationId: "getOauth2Callback"
      tags:
        - "oauth2"
      summary: "traQからのリダイレクト"
      description: "traQ上での認証後にtraQから Authorization Codeがクエリパラメーターにつけられて、 リダイレクトされます。"
      parameters:
        - name: "code"
          in: "query"
          description: "traQからのAuthorization Code"
          required: true
          schema:
            type: "string"
            example: "authorization_code"
      responses:
        200:
          description: "認証に成功しました。"
        400:
          description: "セッションやAuthorization Codeに誤りがあり、認証に失敗しました"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "認証に失敗しました。"
        500:
          $ref: "#/components/responses/InternalServerError"

  /oauth2/logout:
    post:
      summary: "ログアウト"
      description: "ログアウトし、セッションを削除します"
      tags:
        - "oauth2"
      security:
        - UserAuth: []
      operationId: "postOauth2Logout"
      responses:
        200:
          description: "ログアウトしました。"
        400:
          description: "セッションに誤りがあり、認証に失敗しました"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "誤りの内容"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  /users:
    get:
      tags: ["users"]
      summary: "部員一覧取得"
      description: "凍結されていない部員一覧を取得します"
      operationId: "getUsers"
      security:
        - UserAuth: []
      responses:
        200:
          description: "部員一覧の取得に成功"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  /users/me:
    get:
      tags: ["users"]
      summary: "自分の情報取得"
      description: "自分の情報を取得します"
      operationId: "getMe"
      security:
        - UserAuth: []
      responses:
        200:
          description: "自分の情報の取得に成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  /teams:
    get:
      tags: ["teams"]
      summary: "チーム一覧取得"
      description: "チーム一覧を取得します"
      operationId: "getTeams"
      security:
        - UserAuth: []
      responses:
        200:
          description: "チーム一覧の取得に成功"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Team"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

    post:
      tags: ["teams"]
      summary: "チーム作成"
      description: "チームを作成します"
      operationId: "postTeam"
      security:
        - UserAuth: []
      requestBody:
        required: true
        $ref: "#/components/requestBodies/NewTeam"
      responses:
        201:
          description: "チームの作成に成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  /teams/{teamId}:
    get:
      tags: ["teams"]
      summary: "チーム情報取得"
      description: "チーム情報を取得します"
      operationId: "getTeam"
      security:
        - UserAuth: []
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        200:
          description: "チーム情報の取得に成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags: ["teams"]
      summary: "チーム情報更新"
      description: "チーム情報やメンバーを更新します"
      operationId: "patchTeam"
      security:
        - TeamAuth: []
        - AdminAuth: []
      parameters:
        - $ref: "#/components/parameters/teamId"
      requestBody:
        required: true
        $ref: "#/components/requestBodies/PatchTeam"
      responses:
        200:
          description: "チーム情報の更新に成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

components:
  requestBodies:
    NewTeam:
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                $ref: "#/components/schemas/TeamName"
              members:
                description: "チームに所属させる部員のID"
                maxItems: 3
                minItems: 1
                type: "array"
                items:
                  $ref: "#/components/schemas/UserId"
            required:
              - name
              - members
    PatchTeam:
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                $ref: "#/components/schemas/TeamName"
              members:
                description: "チームに所属させる部員のID"
                minItems: 1
                maxItems: 3
                type: "array"
                items:
                  $ref: "#/components/schemas/UserId"

  parameters:
    teamId:
      name: "teamId"
      in: "path"
      description: "チームID"
      required: true
      schema:
        $ref: "#/components/schemas/TeamId"

  schemas:
    UserId:
      type: "string"
      format: "uuid"
      example: "00000000-0000-0000-0000-000000000000"
      description: "traQのUUID"
    UserName:
      type: "string"
      example: "ikura-hamu"
      description: "traQのID"
    User:
      type: "object"
      description: "部員"
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        name:
          $ref: "#/components/schemas/UserName"
        teamId:
          $ref: "#/components/schemas/TeamId"
        isAdmin:
          type: "boolean"
          example: false
          description: "管理者権限を持っているかどうか"
      required:
        - id
        - name
        - isAdmin

    TeamId:
      type: "string"
      format: "uuid"
      example: "00000000-0000-0000-0000-000000000000"
    TeamName:
      type: "string"
      example: "team1"
      description: "チーム名"
    Team:
      type: "object"
      description: "チーム"
      properties:
        id:
          $ref: "#/components/schemas/TeamId"
        name:
          $ref: "#/components/schemas/TeamName"
        members:
          description: "チームに所属している部員のID"
          maxItems: 3
          type: "array"
          items:
            $ref: "#/components/schemas/UserId"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2021-01-01T00:00:00Z"
      required:
        - id
        - name
        - members
        - createdAt

  responses:
    BadRequest:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid xxx"
    Unauthorized:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Unauthorized"
    Forbidden:
      description: "Forbidden"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Forbidden"
    NotFound:
      description: "Not Found"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "xxx not found"
    InternalServerError:
      description: "Internal Server Error"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Internal Server Error"

  securitySchemes:
    UserAuth:
      type: apiKey
      in: cookie
      name: piscon_session
      description: "部員である場合にアクセスできる"
    AdminAuth:
      type: apiKey
      in: cookie
      name: piscon_session
      description: "管理者である場合にアクセスできる"
    TeamAuth:
      type: apiKey
      in: cookie
      name: piscon_session
      description: "チームメンバーである場合にアクセスできる"
